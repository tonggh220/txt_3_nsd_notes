DBA2进阶课程 各种数据存储架构的部署5天 
50  做客户端  51~55 做数据库服务器
DAY01  MySQL主从同步
DAY02  数据读写分离 MySQL多实例
DAY03  MySQL分库分表
DAY04  MySQL高可集群（MHA）
DAY04  MySQL高可集群（PXC）MySQL存储引擎	
DAY01  MySQL主从同步

############DAY01  MySQL主从同步
一、MySQL主从同步
	   1.1 主从同步介绍（他是什么）
	       存储数据的服务结构。结构中有2种角色，主数据库服务器master 
												从数据库服务器slave 
		   能够实现数据的自动备份，从角色数据库服务器 自动同步主角色数据库服务器
		   的数据存放到本机的数据库里。
           
		   被访问的数据库服务器做master ,其他的都做slave 
  			
	   1.2 工作过程 (需要掌握)
	   
	   1.3 怎么做（配置MySQL主从同步）
			***没有配置为slave角色之前要保证和主数据库服务器数据一致包括授权用户

	   
	   
	       1.3.1 配置mysql一主一从同步结构
				诉求 51 (master )  52(slave)
				配置主服务器,具体配置如下：
						1 启用binlog日志
						vim /etc/my.cnf
						    [mysqld]
						     log_bin=master51
							 server_id=51
						:wq
						systemctl  restart mysqld
						
						ls /var/lib/mysql/master51*
						
						2 用户授权
[root@host51 ~]# mysql -uroot -p789...qqqA 
mysql> grant replication slave on *.*  to repluser@"%" identified by "123qqq...A";
						
						3 查看日志信息
mysql> show master status;
+-----------------+----------+--------------+------------------+-------------------+
| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-----------------+----------+--------------+------------------+-------------------+
| master51.000001 |      441 |              |                  |                   |
+-----------------+----------+--------------+------------------+-------------------+
						
				配置从服务器,具体步骤如下：
					1 指定server_id
					vim /etc/my.cnf
					[mysqld]
                    server_id=52
				 :wq
]# systemctl restart mysqld

				    2 指定主服务器信息
					]# mysql -uroot -p密码 
mysql> change master to master_host="192.168.4.51" , 
master_user="repluser" , master_password="123qqq...A" , 
master_log_file="master51.000001",master_log_pos=441 ;          休息到17:15 

					3 启动slave进程
					start slave;
					
					
					4 查看状态信息
			mysql> show slave status \G		
			Slave_IO_Running:  Yes      IO线程
            Slave_SQL_Running: Yes     SQL线程
			
			
				验证配置：
				结果：客户端连接主服务器存储的数据，连接从服务器时也可以访问到
				具体步骤：	
					1 在主服务器添加用户（给客户端连接使用）
mysql> grant all on *.* to jingyaya@"%" identified by "123qqq...A";	
				
					2 客户端连接主服务器存储数据
host50 ~]# mysql -h192.168.4.51 -ujingyaya -p123qqq...A
mysql> create database bbs;
mysql> create table bbs.a(id int);
mysql> insert into bbs.a values(119);
mysql> insert into bbs.a values(114);
MySQL>  insert into db3.user(name,uid)values("xdd",0);
				
				3 客户端连接从服务器时也可以访问同样的数据
50]# mysql  -h192.168.4.52 -ujingyaya -p123qqq...A	
mysql> 	select * from db3.user	 where name="xdd";
mysql> select * from bbs.a ;

		  统一排错时间
		  show  slave status \G
		  Last_SQL_Error: SQL线程的报错信息
		  Last_IO_Error:  IO线程的报错信息

Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.
host52: systemctl stop mysqld				
	   
vim /var/lib/mysql/auto.cnf 
[auto]
server-uuid=c62bdcf5-a245-11eb-ab96-52540055a1f7
   :wq
   systemctl start mysqld
   
   show  slave status；
   
   
 Got fatal error 1236 from master when reading data from binary log: 
 'Could not find first log file name in binary log index file'  
   
 在主服务器查看当前使用的binlog日志信息
 show master  status；

 在从服务器
 stop slave ;
 change master to  master_log_file="查看日志名",master_log_pos=偏移量;
 start slave ;
 show slave status \G
 
  Last_IO_Error: error connecting to master 'repluser@192.168.4.51:3306' - retry-time: 60  retries: 1
  检查主从服务器的防火墙是否关闭
  在从服务器的命令行测试授权 
  [root@host52 ~]# mysql -h192.168.4.51 -urepluser -p123qqq...A 能连接是对的


  与slave服务器相关的配置文件
		   @host52 ~]# cd /var/lib/mysql
[root@host52 mysql]# ls master.info 
[root@host52 mysql]#cat master.info  (存储change master to  命令的执行结果)

[root@host52 mysql]# ls relay-log.info 
relay-log.info  记录中间日志文件信息

]# cat relay-log.info

[root@host52 mysql]# ls host52-relay-bin.*   中继日志文件
中继日志文件
host52-relay-bin.000002  host52-relay-bin.index  索引文件
host52-relay-bin.000003
   
]# mysqlbinlog  host52-relay-bin.000003
]# cat  host52-relay-bin.index
		   
		   把删除相关文件，重启数据库服务，
		   可以把从服务器恢复为独立的数据库服务器
		   
 
		   1.3.2 配置mysql一主多从同步结构
		         诉求： 把53 也配置为 51 的 slave 服务器
				        休息到 10:05 
		   51 master     
		                
	52 slave 	  53 slave 
	
	
				 配置数据库服务器53 
					  运行53主机的数据库服务
					  确保与主数据库服务器数据一致
					  指定server_id
					  指定主服务器信息
					  启动slave进程
					  查看状态
					  测试配置
					  

					  
		   1.3.3 配置mysql主从从同步结构
				 给slave 服务器也配置slave服务器
				 把53 恢复为独立的数据服务器，然后和新数据库服务器54 、55 
把53 恢复为独立的数据服务器	
rm  -rf /var/lib/mysql/master.info
rm -rf /var/lib/mysql/relay-log.info 
rm -rf /var/lib/mysql/host53-relay-bin.*
systemctl  restart mysqld

通过删除数据的方式，与2台新数据库服务器保持数据一致。
在53主机做如下操作：
#删除添加的用户 select  user ,host from mysql.user;
delete from mysql.user where
    user not in ("root","mysql.sys") and host != "localhost";
	
delete from mysql.user where user in ("jing4","yaya1");
mysql> select user ,host from mysql.user;
+-----------+-----------+
| user      | host      |
+-----------+-----------+
| mysql.sys | localhost |
| root      | localhost |
+-----------+-----------+
mysql> flush privileges;

#删除自定义的库  drop  database bbs; drop database db1;

				 
				 
				 配置主从从结构
				      主   从
				 53-->54--->55
		         主   从   从
				 
				 配置master 服务器 53
 #启用binlog日志
[root@host53 ~]# vim /etc/my.cnf
			[mysqld]
			server_id=53
			log_bin=master53
			:wq
[root@host53 ~]# systemctl  restart mysqld
[root@host53 ~]# ls /var/lib/mysql/master53.*
/var/lib/mysql/master53.000001
/var/lib/mysql/master53.index
[root@host53 ~]#	
			 
				 #用户授权
[root@host53 ~]# mysql -uroot -p789...qqqA 
-e 'grant replication slave on  *.* to  repluser@"%" identified by "123qqq...A"'
				 
				 #查看日志信息
[root@host53 ~]# mysql -uroot -p789...qqqA -e 'show master status'
mysql: [Warning] Using a password on the command line interface can be insecure.
+-----------------+----------+--------------+------------------+-------------------+
| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-----------------+----------+--------------+------------------+-------------------+
| master53.000001 |      441 |              |                  |                   |
+-----------------+----------+--------------+------------------+-------------------+
[root@host53 ~]#  


 配置数据服务器54：（因为54既做master服务器又做slave服务器，所以
					2种角色的配置都要有）
				    #做主服务器的配置
					]# vim /etc/my.cnf
					[mysqld]

					log_bin=master54
				     server_id=54
					:wq
[root@host54 ~]# systemctl  restart mysqld
[root@host54 ~]# mysql -uroot -p123qqq...A 
-e 'grant replication slave on *.* to repluser@"%" identified by "123qqq...A"'

[root@host54 ~]# mysql -uroot -p123qqq...A -e 'show master status'
mysql: [Warning] Using a password on the command line interface can be insecure.
+-----------------+----------+--------------+------------------+-------------------+
| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-----------------+----------+--------------+------------------+-------------------+
| master54.000001 |      441 |              |                  |                   |
+-----------------+----------+--------------+------------------+-------------------+
[root@host54 ~]# 

					#做从服务器的配置
[root@host54 ~]# mysql -uroot -p123qqq...A 
-e 'change master to master_host="192.168.4.53",master_user="repluser",
master_password="123qqq...A",master_log_file="master53.000001",master_log_pos=441'

[root@host54 ~]# mysql -uroot -p123qqq...A -e 'start slave'
					
[root@host54 ~]# mysql -uroot -p123qqq...A -e 'show slave status \G' | grep -i yes
mysql: [Warning] Using a password on the command line interface can be insecure.
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
[root@host54 ~]# 
[root@host54 ~]# mysql -uroot -p123qqq...A -e 'show slave status \G' | grep -i "master_host"
mysql: [Warning] Using a password on the command line interface can be insecure.
                  Master_Host: 192.168.4.53
[root@host54 ~]#
                


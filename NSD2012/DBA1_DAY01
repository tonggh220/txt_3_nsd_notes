数据库课程 13天 + 2天 = 15天
DBA1  数据库基础 5天
DBA2  进阶       5天
NoSQL 			 3天

工作岗位  数据库管理员  DBA

庞丽静  静静   panglj@tedu.cn
+++++++++++++++++++++
day01
一 搭建数据服务器
	1.1 相关的概念？
		    数据库？
    服务的一种
	存储数据的仓库
	
	1.2 数据都包括那些？
	
	1.3 提供数据库服务的软件？
	关系型数据库服务软件
	MySQL  Oracle  SQL server

	非关系型数据库服务软件
	 Redis  memcached  mongodb
	
	开源软件 不等于 免费  
	商业软件
	
	是否跨平台（操作系统）
	windows  linux  Unix
	
	mysql 软件历史？
	
	MySQL特点及应用场景
	
	专业术语？(行话)
	 DB  DBMS  DBS 
	1.2 搭建数据库服务器
	诉求：在50主机使用mysql软件
	搭建数据库服务器，设置管理员root
	密码为tarena
		具体操作如下：
			1 解压软件
			tar  -xvf   ....
			2 安装软件
			yum -y install  .rpm
			3 启动服务
			4 查看初始密码
]# grep -i "password" /var/log/mysqld.log			
			
			5 使用初始密码登录
	]# mysql  -hlocalhost 	-uroot  -p'密码'
	
			6 查看原始数据

强制修改登录密码
mysql> alter user root@"localhost" identified by "123qqq...A";			
mysql> show databases; 查看原始数据
			
			7 断开连接  mysql> exit;
			
			使用修改的密码123qqq...A 登录
[root@host50 ~]# mysql -hlocalhost -uroot -p123qqq...A			
			
			8 修改密码策略   休息到11:20 
				  8.1 查看密码策略
			show  variables;	 查看所有变量
            show  variables like "%password%"; 只查看包含
			password 字样的变量
			   
show  variables like  "validate_password_policy";查看指定变量
show  variables like  "validate_password_length"; 查看密码长度
				  
				  8.2 修改密码策略
					   8.2.1  命令行临时有效
	set  global  validate_password_policy=0; 修改密码策略				   
	set  global  validate_password_length=6；修改密码长度为>=6个字符
	
					   
						  
			9 修改登录密码
	alter user root@"localhost" identified by "123456";
	alter user root@"localhost" identified by "tarena";
	exit;
	
			
			10 使用新密码登录
	]#mysql  -hlocalhost -uroot  -ptarena
	mysql> show databases;
	
	
	        8.2.2  修改配置文件永久生效
				      ]# vim /etc/my.cnf
						     [mysqld]
							  validate_password_policy=0
						      validate_password_length=6
			               :wq
					  ]#systemctl restart mysqld  重启成功说明改对了 

巩固练习搭建数据库服务器
诉求：在51主机使用mysql软件
      搭建数据库服务器，设置管理员root  密码为tarena
	   具体操作如下：
			1 解压软件
			2 安装软件
			3 启动服务
			4 查看初始密码
			5 使用初始密码登录
			6 修改登录密码并查看原始数据
			7 断开连接
			8 修改密码策略
			9 设置新密码为tarena
			10 配置策略永久有效


二、MySQL服务的基本管理
	2.1 连接数据库服务的连接方式？
			1 python/java/php 脚本连接  
			2 图形工具 （需要安装图形软件）
			
			3 命令行连接  mysql命令
]# mysql  --help 
]# man  mysql

]# mysql  [-h数据库服务器Ip地址或主机名] -u用户名 	-p密码	[数据库名]
			
]# mysql  -uroot -ptarena  sys  连接服务直接进入sys库里
mysql> select  database();  显示当前所在的库 
mysql> show  tables ； 显示所在库已有的表

-e  在系统命令行下执行 mysql 命令 			
]# mysql -uroot -ptarena  -e 'show databases'
			
			一起执行多个mysql命令使用；间隔命令
]# mysql -uroot -ptarena  -e 'show databases ;use mysql ; show tables'
			
[root@host50 ~]# mysql -uroot -p			
Enter password: 输入密码（不会显示出来）

	2.2 客户端把数据存储到数据库服务器的过程
		 1 连接数据库服务器
		 2 创建数据库（/var/lib/mysql/目录）
			create database  库名；
			create database 123a;
			show  databases;
			]# ls /var/lib/mysql/
			]# mkdir  /var/lib/mysql/gamedb
			show databases
					
 3 创建表 (表就是数据目录下的文件，文件必须使用mysql命令创建,
表必须要创建在库里，库必须要事先创建好	 )
		   create table  库名.表名(表头名 数据类型，表头名 数据类型 ....);
		   
		  
		 5 断开连接 exit ;
		 
	库的相关管理命令
	    库名的命名规则（背诵）
		建库  create database bbsdb;
		查看已有的库名  show databases;
		进入到库bbsdb库里   use  bbsdb;
		显示库里已有的表  show tables;
		查看当前所在的库 select database();
		查看当前登录的用户名和客户端  select user();
		删除已有的库  drop database  bbsdb;
			
		表的相关管理命令
		    use  mysql;
		   显示库里已有的表  show tables;
		   查看表头  desc  mysql.user;
				   
		记录的相关管理命令	
			插入记录 insert into  库.表 values(值列表);
			查询记录 select  表头名  from  库.表
			修改记录 update  库.表 set  表头名=值； 
			删除记录 delete from  库.表;
			
 create table 123a.stuinfo(姓名 char(5), 性别  char(1), 
		   年龄 int, 班级 char(7) ); 
		   
		   use  123a;
		   show tables;  查看已有表
		   desc  stuinfo; 查看已有表的表头
		   ]# ls /var/lib/mysql/123a/stuinfo.*
		   
]# chown  mysql.mysql /var/lib/mysql/gamedb		   
create table gamedb.stuinfo(姓名 char(5), 性别  char(1), 
		   年龄 int, 班级 char(7) );
		   
		 4 存储数据  insert into 
		    insert into 库.表  values (值列表) ;
		    insert into  123a.stuinfo values("bob" ,"m",21,"nsd2012" );
			
			insert into  123a.stuinfo values("tom" ,"m",21,"nsd2012" ),
			("jim" ,"m",21,"nsd2012")；
			
			查看行（查看表记录）
			select  表头名称  from 库.表;
			
			select  *  from 123a.stuinfo;    * 表示所有表头名
			select  姓名，年龄  from 123a.stuinfo;  查看指定表名 
			
			修改
			update 库.表 set 表头名=值，表头名=值；
			mysql> update 123a.stuinfo set 年龄=25 ;
			select  姓名，年龄  from 123a.stuinfo;
			
			删除所有行  delete from 库.表;
			delete from 123a.stuinfo;
		
			use  123a；
			show  tables；  只看到表名
			select  *  from 123a.stuinfo; 没有行
			
			删除已有的表 drop  table 123a.stuinfo;
			                           库.表	
			
 名词：对MySQL命令的分类（背诵）
     使用SQL（结构化查询语言）的使用规则（背诵）

三、mysql 数据类型 （建表时合理的设置标头使用的数据类型）
           mysql> desc mysql.user;
		   休息到 17:25
		  每种类型规定要使用固定的命令表示
		  
		  字符类型  char定长  255   
		            varchar变长   65532  
		 
		            text  blob  大文本    
create  table db1.t8(name  char(3) ,  class  char(7) ,  mail  varchar(15) );
desc  db1.t7;

insert into  db1.t8 values ("lucy","nsd2012","jim@163.com"); 报错 
insert into  db1.t8 values ("jim","nsd2012","jim@163.com"); 正常

select  * from  db1.t8;

     
		  数值类型
		         整型类型    例如  12  20  -11   
								     正数  负数 
                  tinyint  smallint mediumint  int  bigint					
已tinyint类型为例演示整数类型的使用

create table  db1.t5(level  tinyint unsigned ,  age  tinyint  );
desc  db1.t5;

mysql> insert into db1.t5 values (255,127); 在存储范围内都可以存储

mysql> insert into db1.t5 values (28.8 , 17.41); 四舍五入存储整数位
				
				 浮点类型：有小数点的数 例如 1.88  0.34 
                         单精度 float
						 双精度 double
mysql> insert into db1.t6 values(35000.88 , 3.1415926);
mysql> insert into db1.t6 values(35000.88 , 35000.88);
mysql> insert into db1.t6 values(8888,9999);			   
	
		休息 到 11:20
		
小数的组成  总位数
整数.小数
188.88        5


           
float(总位数,小数位的位数)	
	                  999.99
                      xxx.xx
create table db1.t7( pay  float(5,2) );
mysql> insert into db1.t7 values (88.23);
mysql> insert into db1.t7 values (88.56);
mysql> insert into db1.t7 values (22);

mysql> insert into db1.t7 values (1088);
ERROR 1264 (22003): Out of range value for column 'pay' at row 1

mysql> insert into db1.t7 values (-999.99);
mysql> insert into db1.t7 values (1000);	
	
		  日期时间类型
			  年   year   YYYY  2021   
			  日期 date   YYYYMMSS   20210413
			  时间 time   HHMMSS 175048
			  
			  日期时间  datetime或timestamp
						 YYYYMMDDHHMMSS
						 
		  枚举类型：表头的值，必须在列举的范围内选择
				enum 单选：列举的值里只能选择1个
		        set  多选：列举的值里能选择1个或多个
########日期类型的使用##############
create table  db1.t2(
csnf  year,  sksj  time ,  birthday  date  , party datetime  );

desc  db1.t2;

insert into  db1.t2  values( 2021 , 090000 , 20211120 , 20210501103000);
		
select  * from  db1.t2;

####时间函数的使用##################
MySQL服务软件安装之后提供的命令 格式  名(), 获取系统时间的相关函数
可以使用函数获取到的数据给日期时间类型的表头赋值

时间函数的使用
mysql> select curtime(); 时间 
mysql> select date();    日期 
mysql> select now();        日期时间
mysql> select hour(now());  日期+时间
mysql> select time(now());  时间 
mysql> select day(now());   天（几号） 
mysql> select month(now()); 月
mysql> select year(now());  年 
mysql> select date(now());  日期

使用时间函数赋值
mysql> use  db1;
mysql> insert into t2 values(year(now()) , curtime() , date(now()) , now() );
mysql> select  * from  t2;

year 类型表头的赋值 默认要求4位数值 ，也可以使用2位数赋值，但会自动补全4位，
具体如下：
当使用2位数赋值时：
01~69视为2001~2069
70~99视为1970~1999


 	
datetime和timestamp 区别 
	1 存储范围
	2 赋值方式不同：
	当未给timestamp字段赋值时，自动以当前系统时间赋值，而datetime 值为 NULL (空)
例子

create  table   db1.t3(meetting  datetime ,  party  timestamp );

insert into  db1.t3  values (20210418183000 , 20210501095021);
insert into  db1.t3(meetting)  values (20221120084518);
insert into  db1.t3(party)  values (20231120084518);

select  * from db1.t3;

########枚举类型的使用##############
create database db1;

create table  db1.t1(
 sex  enum("man","woman","no"),  
 loves  set("music","eat","sleep","game","money")
);

desc  db1.t1;

insert into  db1.t1 values ("man","book,eat"); 报错
mysql> insert into  db1.t1 values ("man","sleep,eat"); 正确

select  * from  db1.t1;		
	
	


 

 


#####DBA1_DAY05
一、增量恢复 (学习使用binlog恢复数据)

	1.1  使用日志恢复所有数据
]# mysqlbinlog  /目录/文件名  |  mysql –uroot  -p密码	

HOST50:
mysql> select  count(*)  from db3.user;
mysql> show master status;

]# mysqldump  -uroot -p密码  --flush-logs  db3 user  > /dbbak/user.sql
mysql> show master status;
mysql> insert into db3.user(name,uid)values("bob",5001);多存几条uid不能重复
mysql> show master status;
mysql> select  count(*)  from db3.user;
]# scp /dbbak/user.sql root@192.168.4.51:/opt/
]# scp /mylog/plj.编号  root@192.168.4.51:/opt/

HOST51：
]# mysql -uroot  -p密码   db3 < /opt/user.sql
]# mysqlbinlog  /opt/plj.编号  |  mysql -uroot  -p密码
mysql> select  count(*)  from db3.user;

1.2  使用日志恢复指定的数据
命令格式
]# mysqlbinlog  选项 /目录/文件名  |  mysql –uroot  -p密码	

选项 
***记录命令执行的时间  和 记录命令执行的偏移量 

指定起始时间 --start-datetime="yyyy/mm/dd hh:mm:ss"
指定结束时间 --stop-datetime="yyyy/mm/dd hh:mm:ss"

指定起始偏移量--start-position=偏移量的值
指定结束偏移量--stop-position=偏移量的值

]# mysqlbinlog  /mylog/plj.000001  # 查看文件内容确定偏移量和时间

	修改binlog日志格式
	默认格式是 ROW
	
	vim /etc/my.cnf
	[mysqld]
	binlog_format="mixed"
	:wq
	]# systemctl  restart  mysqld
	

	mysql> show variables like "binlog_format";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | MIXED |
+---------------+-------+
1 row in set (0.00 sec)

mysql> show  master status;

mysql> insert into db3.user(name,uid) values("A",601);
mysql> insert into db3.user(name,uid) values("B",606);
mysql> update db3.user set comment="test user";
mysql> delete from  db3.user where id<=5;
mysql> insert into db3.user(name,uid) values("C",609);	
mysql> insert into db3.user(name,uid) values("D",619);
mysql> select name,uid,comment from  db3.user where uid>=600;

]# mysqlbinlog  /mylog/plj.000003 | grep -i insert	
]# mysqlbinlog  /mylog/plj.000003 | grep -i update	
]# mysqlbinlog  /mylog/plj.000003 | grep -i delete	
]# mysqlbinlog  /mylog/plj.000003 | grep -i select (查的不记)

51主机使用plj.000003文件里记录的命令恢复新存储的数据，操作如下
		[root@host50 ~]# scp /mylog/plj.000003 root@192.168.4.51:/root/



]# mysqlbinlog  --start-position=325  --stop-position=788 /root/plj.000003 |
mysql -uroot -p789...qqqA

***定义的范围一定要包含commit回车，不然不会执行命令。
***可以重复执行日志恢复数据，但是不能与表结构冲突。
***当起始时间和结束时间相同时，要自己扩大结束时间的值
***执行范围到文件的最后1条命令的话 ，不需要写结束位置，因为默认读到文件末尾

]# mysqlbinlog  --start-datetime="2021/05/25 9:49:46"  
--stop-datetime="2021/05/25 9:50:02" /root/plj.000003 |
mysql -uroot -p789...qqqA


]# mysqlbinlog  --start-datetime="2021/05/25 9:50:02" /root/plj.000003 |
mysql -uroot -p789...qqqA


课后思考：写个脚本 shell 或 python 
          功能 批量执行binlog日志文件记录的命令恢复数据
		  
		  思路：
		  使用for循环变量binlog日志的索引文件 ，
		  执行文件里记录的命令，但是需要不遍历最后1个日志文件
		  因为最后一个文件里记录的删除数据delete命令。
    
DBA1_DAY05  数据查询扩展  50  db3.user 
	1.复制表
	   命令格式 create  table 库.表 select 查询 ；
		1.1  只复制表结构
	create  table 库.表 select * from 库.表 where  1 = 2 ；
mysql> create table db4.user4 
select *  from db3.user where 1 = 2  ;	
	
mysql> create table db4.user5 
select name,uid,shell  from db3.user where 1 = 2  ;	
	
		1.2  复制整张表（表结构+数据）
	create  table 库.表 select * from 库.表；		 
			 
creat database  db4;
create  table   db4.user select  * from   db3.user;

select  count(*) from  db4.user ;
			 
mysql> create  table db4.user2 select name,uid from db3.user;
mysql>select  * from  db4.user2;

mysql> create  table db4.user3 
select name,uid from db3.user where uid >= 1000;

工作中不可能使用1张表存储所有业务的数据
		银行都有哪些业务：储蓄业务  贷款业务  理财业务  用户信息 
														大锤 
														
		2 多表查询 
select   库名.表名.列名 , 库名.表名.列名   
from  库名.表名 , 库名.表   where 条件;
	
mysql> select  *  from user2,user3 where user2.uid = user3.uid;
mysql> select  name  from user2,user3 where user2.uid = user3.uid;
mysql> select  user2.name  from user2,user3 where user2.uid = user3.uid;
	
		
		
		3 嵌套查询  把内层的查询结果作为外层的查询条件
select 字段名列表 from  库.表  where  条件判断符号 （select 查询）；		

mysql> select name from db4.user2 where  
name in (select name from db3.user where uid <=5);


mysql> select name,成绩 from 成绩表 where 成绩=90 and 
name in (select name from 信息表 where addess="上海")

把UID 小于uid字段平均值的用户名和uid显示出来。
select name,uid from db3.user where uid < (select avg(uid) from db3.user);


		
		4 连接查询 
			左连接 left join ... on 
			执行结果：
			显示左表的所有记录，右表只显示与条件匹配的记录，比左表少的记录使用null 填充
	select 库名.表名.字段名 from 表名A left  join 表名B on 条件；
	
select db3.student.* , db3.score.* from db3.student left join db3.score 
on db3.student.numbers=db3.score.numbers; 

mysql> select  student.name,score.* from   student left join  score 
on student.numbers = score.numbers; 找没有成绩的学生


	
			右连接 right join .... on 
	        执行结果
			显示右表的所有记录，左表只显示与条件匹配的记录 比右表少的记录使用null 填充
    select 库名.表名.字段名 from 表名z right  join 表名f on 条件；

use db3;
select * from db3.student right join db3.score 
on db3.student.numbers=db3.score.numbers; 找没有信息的学生。
		


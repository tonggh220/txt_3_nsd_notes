#####NoSQL_DAY03 
一Redis主从复制  ：功能：实现数据自动备份

		master角色：客户存储查询数据连接的主机  
         slave角色： 到主服务器拷贝数据到本机

主从结构：
	一主一从
	一主多从
	主从从

相关命令：
	#默认都是master角色
	查看当前主机的角色 info  replication 
	
	命令行配置 好处 马上生效  slaveof  主服务器Ip   服务端口

    永久配置  vim /etc/redis/6379.conf
			  slaveof  主服务器Ip   服务端口
			  masterauth  密码   #如果主服务器有连接密码要指定连接密码

    #反客为主 （临时恢复为master 服务器）
    > slaveof no one 
	
	永久恢复为独立的服务器
	 注释文件中的 slaveof  主服务器Ip   服务端口 然后把服务重启
	 
实验:把52配置为 51 的 slave  
	 52主机做如下配置：
		 #命令行配置
		 > slaveof  192.168.4.51   6379
		
		 #查看角色
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6379
master_link_status:up
 
		 
		 # 永久配置
		 [root@host52 ~]# vim /etc/redis/6379.conf 
	     282 slaveof  192.168.4.51   6379
		 :wq

#在51主机查看复制信息
192.168.4.51:6379> info replication
# Replication
role:master
connected_slaves:1
slave0:ip=192.168.4.52,port=6379,state=online,offset=261,lag=0
		 
实验2 ：一主多从
       把主机53 也配置为 51的slave 通过修改文件配置

[root@host53 ~]# vim /etc/redis/6379.conf 
	     282 slaveof  192.168.4.51   6379
		 :wq
[root@host53 ~]#redis-cli -h 192.168.4.53 shutdown	   
[root@host53 ~]# /etc/init.d/redis_6379 start

实验3 ：主从从结构
		把54 配置为 53的slave 主机
		
		在54主机做如下配置：
				#在命令行指定 且让他永久生效
		>slaveof  192.168.4.53  6379
		>config  rewrite  #把命令保存到文件的最后1行
		
		]#tail -1 /etc/redis/6379.conf

1.2 带验证的主从复制 
（master服务器设置了连接密码 slave主机必须指定连接密码才能同步数据）
   在51主机设置连接密码 （在命令行并让其永久有效）
   192.168.4.51:6379> config set requirepass 123456
   192.168.4.51:6379> auth 123456
   192.168.4.51:6379> config rewrite
   OK
   

  在slave设置连接master主机的密码 （在命令行并让其永久有效）
 [root@host52 ~]# redis-cli  -h 192.168.4.52
192.168.4.52:6379> config get masterauth
1) "masterauth"
2) ""
192.168.4.52:6379> config set masterauth 123456
OK

192.168.4.52:6379> config get masterauth
1) "masterauth"
2) "123456"
192.168.4.52:6379> config rewrite
OK
    
 53主机通过修改配置文件
 393  redis-cli  -h 192.168.4.53  shutdown
 
 ]#vim /etc/redis/6379.conf
 masterauth  123456
 :wq
 ]# /etc/init.d/redis_6379 start
  
]# /etc/init.d/redis_6379 start


1.3 哨兵服务 ： 
服务运行后监视 master 主机，master宕机后 把对应slave 升级为master
	准备redis主从结构 （如果主服务器设置了连接密码 slave也设置连接密码且密码要和master服务器一样）
    主    从    
    51    52 
    配置哨兵服务器57
    具体操作如下：
		1 安装redis 软件 
  503  rpm -q gcc  || yum -y install gcc
  504  tar -zxvf redis-4.0.8.tar.gz 
  505  cd redis-4.0.8/
  506  ls
  507  make && make install
		
	    2 创建并编写哨兵服务的主配置文件
]# vim /etc/sentinel.conf
bind 192.168.4.57 #哨兵服务使用的ip地址
port 26379 #服务端口号
sentinel monitor  plj  192.168.4.51 6379  1  #监视的主服务器是谁
sentinel auth-pass  plj 123456  #指定主服务器的连接密码
:wq		
        3 启动哨兵服务
]#redis-sentinel  /etc/sentinel.conf  (启动信息占用终端显示)

		4 测试配置
			4.1 停止主服务器51 的redis服务 
]# redis-cli  -h 192.168.4.51 -a  123456 shutdown

			4.2 哨兵服务终端 查看监视信息 
				有监视的信息输出
				
			4.3 原先slave角色的主机，角色变为master 
				192.168.4.51：6379> info replicaiton 
				Role:Master
			
			4.4 查看哨兵服务的主配置文件，会自动监视新的主服务器
			    cat /etc/sentinel.conf
				
			4.5 宕机master 启动后，自动配置为 当前master 的slave 
				需要手动指定连接当前master 主机的连接密码
			192.168.4.51:6379> config set masterauth 123456	
            192.168.4.51:6379> config rewirte
			192.168.4.51：6379> info replicaiton
			Role:slave


 三 数据类型 :    
       字符类型数据的管理命令  
set  getrange   strlen   append  setbit   bitcount 
decr   decrby  incr   incrby    incrbyfloat

计算机的进制  G   M    K   byte  bit 
		
					1K的内存空间可以存下多少位
					
					1k = 1024字节   * 8  = 8192   

					8192位 包含多少个 365（存一年的信息 占内存365位）
				  
setbit  使用 二进制数 给变量赋值
192.168.4.50:6350> setbit nb 1 1
(integer) 0
192.168.4.50:6350> setbit nb 2 0
(integer) 0
192.168.4.50:6350> setbit nb 3 0
(integer) 0
192.168.4.50:6350> setbit nb 4 1
(integer) 0
192.168.4.50:6350> setbit nb 5 1
(integer) 0
192.168.4.50:6350> setbit nb 6 1
(integer) 0
192.168.4.50:6350> setbit nb 7 0
(integer) 0
192.168.4.50:6350> setbit nb 8 0
(integer) 0
192.168.4.50:6350> bitcount nb
(integer) 4
 
	   
	   列表类型数据的管理命令  
lpush   llen      lrange   lpop  lindex  lset   rpush     rpop
   
	   hash表类型数据的管理命令
hset  hmset  hgetall hkeys  hvals  hget  hmget  hdel


二持久化:
  redis支持数据的永久存储，在服务运行过程中，会定期的内存了的数据复制到硬盘文件里存储。
  有2种方式
      RDB（默认） 指的是 数据库目录下的dump.rdb 文件
	  对应的配置项 
254:dbfilename dump.rdb 
	
#存盘频率 
219:save 900 1
220:save 300 10
221:save 60 10000
         
	  使用备份的dump.rdb文件恢复数据
192.168.4.50:6350> keys *
1) "teaname"
2) "str"
3) "student"
4) "nb"
5) "y"
6) "z"
7) "x"
192.168.4.50:6350> save
OK
192.168.4.50:6350> exit
[root@host50 ~]# cp /var/lib/redis/6379/dump.rdb 
[root@host50 ~]# ls /opt/
dump.rdb  mysql.bak  mysql.tar.gz
[root@host50 ~]#

> flushall  #数据误删除

[root@host50 ~]# redis-cli -h 192.168.4.50 -p 6350 -a 123456 shutdown
[root@host50 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host50 ~]# rm -rf /var/lib/redis/6379/dump.rdb 
[root@host50 ~]# 
[root@host50 ~]# cp /opt/dump.rdb  /var/lib/redis/6379/
[root@host50 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host50 ~]# 

验证存盘频率实验
[root@host50 ~]# redis-cli -h 192.168.4.50 -p 6350 -a 123456 shutdown
[root@host50 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host50 ~]# rm -rf /var/lib/redis/6379/dump.rdb 
[root@host50 ~]# 
[root@host50 ~]# ls /var/lib/redis/6379/
[root@host50 ~]# 
[root@host50 ~]# vim /etc/redis/6379.conf
save 900 1
#save 300 10
save 120 10
save 60 10000
:wq


> 在存储频率时间内存储数据

[root@host50 ~]# ls /var/lib/redis/6379/ -l
-rw-r--r-- 1 root root 165 6   3 17:18 dump.rdb
[root@host50 ~]#	
  
	  AOF 默认没有启用，记录对数据做写操作命令的文件
	      以追加的方式 记录命令 记录频率是每隔1秒记录1次
appendonly no	  
appendfilename "appendonly.aof"
	  
	  
192.168.4.50:6350> config set  appendonly yes
OK
192.168.4.50:6350> config rewrite
 
[root@host50 ~]# ls /var/lib/redis/6379/
appendonly.aof  dump.rdb
[root@host50 ~]# wc -l /var/lib/redis/6379/appendonly.aof 
82 /var/lib/redis/6379/appendonly.aof

	通过备份的aof文件恢复数据
[root@host50 ~]# cp /var/lib/redis/6379/appendonly.aof /opt/	
	
[root@host50 ~]# scp  /opt/appendonly.aof  192.168.4.51:/root/

 在51主机使用aof文件恢复数据，具体操作如下：
[root@host51 ~]# redis-cli  -h 192.168.4.51 -a 123456 shutdown
[root@host51 ~]# vim /etc/redis/6379.conf 
673 appendonly yes
677 appendfilename "appendonly.aof"
:wq
[root@host51 ~]# cp /root/appendonly.aof /var/lib/redis/6379/
[root@host51 ~]# ls /var/lib/redis/6379/
appendonly.aof  dump.rdb
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]#		
[root@host51 ~]# redis-cli  -h 192.168.4.51 -a 123456 
192.168.4.51:6379> keys *

	与AOF相关的配置
			#aof记录命令的方式             
			    # appendfsync always     时时记录
			      appendfsync everysec    1秒=1000毫秒
                # appendfsync no

		    #对aof文件做瘦身计划
			auto-aof-rewrite-percentage 100  再次对文件做瘦身的比例值
            auto-aof-rewrite-min-size 64mb  首次瘦身的最大值

   修复损坏aof文件
 
 echo “范德萨发卡戴珊解放军拉斯法”  >> /var/lib/redis/6379/appendonly.aof
  794  redis-cli -h 192.168.4.50 -p 6350 -a 123456 shutdown
 
  796  /etc/init.d/redis_6379 start

]# tail  /var/log/redis_6379.log

 19483:M 03 Jun 17:55:34.218 # Bad file format reading the append only file: 
 make a backup of your AOF file, then use ./redis-check-aof --fix <filename>
 
[root@host50 ~]# redis-check-aof --fix /var/lib/redis/6379/appendonly.aof 
0x             1a2: Expected prefix '*', got: 'i'
AOF analyzed: size=463, ok_up_to=418, diff=45
This will shrink the AOF from 463 bytes, with 45 bytes, to 418 bytes
Continue? [y/N]: y
Successfully truncated AOF
[root@host50 ~]#

           

binlog日志介绍：
						数据库服务日志文件的一种，用来记录在服务器上执行的
						对数据做写操作的sql命令。
						默认没有启用。要是有得自己启用才可以
						
						是 搭建MySQL主从结构的必要条件
						启用binlog日志文件后能够实现对数据的自动备份
						可以执行binlog日志文件记录的sql命令恢复数据
			binlog日志管理：
						查看是否启用binlog日志
						mysql> show master status;
						Empty set (0.00 sec)
						
						启用日志文件
		]# vim /etc/my.cnf
			[mysqld]
			server_id=50
			log_bin			
			:wq 
		]# systemctl restart mysqld
mysql> show master status;
+-------------------+----------+--------------+------------------+-------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+-------------------+----------+--------------+------------------+-------------------+
| host50-bin.000001 |      154 |              |                  |                   |
+-------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

mysql>  exit

[root@host50 ~]# ls /var/lib/mysql/host50-bin.*
/var/lib/mysql/host50-bin.000001  /var/lib/mysql/host50-bin.index
[root@host50 ~]# 
[root@host50 ~]# cat /var/lib/mysql/host50-bin.index 
./host50-bin.000001
[root@host50 ~]# 
		
		自定义日志文件存放的目录和日志文件名
	f		]# vim /etc/my.cnf
[mysqld]

server_id=50
log_bin=/mylog/plj	
:wq

		[root@host50 ~]# mkdir /mylog
[root@host50 ~]# chown mysql /mylog
[root@host50 ~]# ls -ld /mylog
drwxr-xr-x 2 mysql root 6    6 16:25 /mylog
[root@host50 ~]# 
[root@host50 ~]# setenforce 0
]# systemctl  restart mysqld
]# mysql -uroot  -p密码
mysql> show master status;
+------------+----------+--------------+------------------+-------------------+
| File       | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------+----------+--------------+------------------+-------------------+
| plj.000001 |      154 |              |                  |                   |
+------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

mysql> exit

]# ls /mylog/plj*
plj.000001  plj.index
		
						查看日志文件内容
						]# mysqlbinlog  /mylog/plj.000001
									
						创建新的日志文件
						#重启数据库服务会无条件创建新的日志文件
						systemctl  restart  mysqld 
						mysql> flush logs;

						#对数据做备份后创建新的日志文件
[root@host50 mylog]# mysqldump -uroot -p123456 --flush-logs  db3 > /db3.sql
						
						删除已有日志文件
						
								使用系统命令删除（不会同步索引文件）
								 rm -rf  /mylog/plj.000007
								 cat  /mylog/plj.index
								 
								使用数据库命令删除（同步索引文件）
								 #删除指定编号之前的所有日志文件
mysql> purge master logs to "plj.000004";
Query OK, 0 rows affected (0.05 sec)

mysql> system ls /mylog
plj.000004  plj.000005	plj.000006  plj.index
mysql> 
mysql> system cat /mylog/plj.index
/mylog/plj.000004
/mylog/plj.000005
/mylog/plj.000006
/mylog/plj.000007
mysql> 																	休息到  17:10  
								 
								 
								 #删除当前所有日志重新创建新日志文件
								mysql> reset master;
Query OK, 0 rows affected, 1 warning (0.09 sec)

mysql> system ls /mylog
plj.000001  plj.index
mysql> system cat /mylog/plj.index
/mylog/plj.000001
mysql> 

								
								 
	
数据的备份与恢复：
			数据备份方式： 物理备份  和 逻辑备份
			
			物理备份和恢复演示
  431  cp -r /var/lib/mysql  /opt/mysql.bak
  433  ls /opt/mysql.bak/
  434  rm -rf /var/lib/mysql

  436  systemctl  stop mysqld

  438  ls /var/lib/mysql  目录没有了 
  439  cp -r /opt/mysql.bak /var/lib/mysql
  440  chown -R mysql:mysql /var/lib/mysql
  441  ls /var/lib/mysql  查看 
  442  systemctl  start mysqld 启动服务
  443  mysql -uroot -p密码
  		
一、 数据的备份与恢复		
			
			数据备份策略：
					完全备份： 备份所有数据 ：可以是1台服务器的所有数据）
											  也可以是服务器上某个库里的所有数据
											  或者是 某个库下 1张表的所有数据
											  
				   只备份新产生数据：
							增量备份：备份上次备份后新产生的数据
							差异备份：备份完全备份后新产生的数据
							
生产环境下 常用备份 策略
	每天对服务器上的数据做1次完全备份    完全备份 
	每天只对服务器上新产生的数据做备份  （完全备份+差异备份   或   完全备份+增量备份）
											  


			
			1  使用mysqldump 对数据做完全备份
					完全备份命令格式
					]# man  mysqldump  查看帮助

					]#  mysqldump  -uroot  -p密码   数据库名  > /目录名/名字.sql
					
					数据库名的表示方式：
						--all-databases  或  -A   备份服务器上的所有数据
						库名              把库下的所有表全都备份
						-B 库名列表       把多个库下的所有表全都备份
						库名 表名         只备份指定的表的所有数据
						
						
			备份的例子
			]# mkdir  /bakdir
			]# mysqldump -uroot -p123qqq...A  --all-databases  > /bakdir/all.sql
			
			]# mysqldump -uroot -p123qqq...A  db3  > /bakdir/db3.sql

			]# mysqldump -uroot -p123qqq...A -B db3 mysql > /bakdir/2DB.sql
			
			]# mysqldump -uroot -p123qqq...A db3 user > /bakdir/db3_user.sql
   
			
			对数据完全恢复的命令格式
			
			]# mysql  -uroot   -p密码  库名   < /目录名/文件名.sql
			
		
			例子  
			mysql>  select  * from db3.user;
			mysql>  drop  table db3.user;
			
			]# mysql -uroot -p123qqq...A  db3  <  /bakdir/db3_user.sql 
			]# mysql -uroot -p123qqq...A  -e 'select * from db3.user'
			
			mysql> drop database db3;
            mysql> drop database mysql;
			[root@host50 ~]# mysql -uroot -p123qqq...A  <  /bakdir/2DB.sql 
 
			[root@host50 ~]# mysql -uroot -p123qqq...A -e 'show databases'
mysql: [Warning] Using a password on the command line interface can be insecure.
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db3                |
| mysql              |
| performance_schema |
| student            |
| sys                |
+--------------------+
[root@host50 ~]# 


			mysql> drop database db3;
			mysql> create database  db3;
			mysql> exit
			
[root@host50 ~]# mysql -uroot -p123qqq...A  db3  < /bakdir/db3.sql			
			
[root@host50 ~]# mysql -uroot -p123qqq...A  -e ' use db3 ; show tables'
mysql: [Warning] Using a password on the command line interface can be insecure.
+---------------+
| Tables_in_db3 |
+---------------+
| gz_tab        |
| user          |
| yg_tab        |
+---------------+
[root@host50 ~]# 



优点：服务软件自带的备份程序，适合备份数据量小的数据，不适合线上服务器备份使用
				  使用mysqldump 的 完全备份文件 恢复数据，只能把数据恢复到备份那一时刻的状态
				  
			缺点：命令执行过程中会锁表（锁在没有被释放之前 ，不允许用户访问表 ）
		 

每天 晚上 18：00  备份服务器上的所有数据
00  18  * * *    mysqldump  -uroot  -p密码    --all-databases  >  /bakdir/`date +%F`_all.sql

		 

			2 使用binlog日志文件恢复数据(启用了binlog 日志就是对数据做时时备份)
					注意：启用binlog日志，就能够实现对数据的时时增量备份，因为日志启用后，会自动记录对数据
					做写操作的sql命令 (insert  update   delete )
						
					   使用日志文件恢复所有数据的命令格式
					   ]#  mysqlbinlog  /目录/日志文件名  |    mysql  -uroot  -p密码 
					
		例子：
mysql> select count(*) from  db3.user;
+----------+
| count(*) |
+----------+
|       28 |
+----------+
1 row in set (0.00 sec)

mysql>exit 
[root@host50 ~]# mysqldump -uroot  -p123qqq...A  --flush-logs  db3 user > /bakdir/db3_user.sql

mysql> show master status;
+------------+----------+--------------+------------------+-------------------+
| File       | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------+----------+--------------+------------------+-------------------+
| plj.000005 |      154 |              |                  |                   |
+------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

mysql> 
mysql> insert into db3.user(name,uid,gid) values("bbb",1,1);  多执行几遍
		

]#cp  /mylog/plj.000005  /opt/

mysql> delete from  db3.user;
MySQL》 select  * from  db3.user;   没有数据了

使用完全文件 和 备份的binlog日志文件恢复数据
]# [root@host50 ~]# mysql -uroot -p123qqq...A   db3  < /bakdir/db3_user.sql
					
[root@host50 ~]# mysqlbinlog  /opt/plj.000005  | mysql -uroot -p123qqq...A

MySQL》 select  * from  db3.user;   有数据了


使用binlog日志恢复部分数据的命令格式
	]#  mysqlbinlog 选项 /目录/日志文件名  |    mysql  -uroot  -p密码
	
	选项：
	#通过偏移量范围读取记录的sql命令
	--start-position=起始偏移量 --stop-position=结束偏移量

例子:
]#mysqlbinlog --start-position=729 --stop-position=1088 /opt/plj.000006  | mysql  -uroot  -p123qqq...A	
	
	#通过时间点范围读取记录的sql命令
	
	--start-datetime=起始时间 --stop-datetime=结束时间

例子:
]#mysqlbinlog --start-position="2021/06/02 10:38:28" --stop-position="2021/06/02 14:38:28"  /opt/plj.000006  | mysql  -uroot  -p123qqq...A	




一  、Redis主从复制：实现数据自动备份的一种存储架构，分为2种角色的数据库服务器
    master(主数据库服务器)  接受客户端访问的服务器
    slave（从数据库服务器） 自动同步主服务器数据的

    主从复制包括：
        一主一从 ： 主从服务器各有1台  （结构存在风险  单点故障）

        一主多从 ： 给1台主服务器配置多个从服务器  （解决从服务器的单点故障问题）

        主从从  ： 给主从结构中的从服务器也配置1台从服务器 （主从从结构+烧饼服务可以解决 主服务器的单点故障问题）

    配置主从复制： 
        配置一主一从存储结构
        需求 把数据库服务器 52 配置为  51 主从服务器
        准备： 在 51 和  52 主机分别运行redis服务

        配置从服务器（默认运行的redis服务器的角色 都master ）

        >info  replication  #查看主从复制信息
        >slaveof  主服务器IP  主服务器端口号    #命令行临时指定为从服务器

        #在52主机的登录状态下执行
        > slaveof   192.168.4.51  6351
        192.168.4.52:6379> info replication
# Replication
role:slave   角色
master_host:192.168.4.51  ip地址
master_port:6351  端口号
master_link_status:up  连接状态


      #在51主机查看复制信息
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351 
192.168.4.51:6351> info replication
# Replication
role:master  角色
connected_slaves:1  有1个从服务器
slave0:ip=192.168.4.52,port=6379,state=online,offset=126,lag=1  从服务器的信息
      
验证：在主服务器存储数据 在从服务器本机也可以查看到同样的数据
192.168.4.51:6351> keys *
(empty list or set)
192.168.4.51:6351> mset x 1  name bob  age 19
OK
192.168.4.51:6351> 

192.168.4.52:6379> keys *
1) "x"
2) "name"
3) "age"
192.168.4.52:6379> 


        修改配置文件永久设置为从服务器（命令行配置临时有效重启服务会失效）
        修改52主机的配置文件，通过重启redis服务测试

        [root@host52 ~]# vim /etc/redis/6379.conf
        282 slaveof 192.168.4.51  6351
        :wq
        [root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown
[root@host52 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up

192.168.4.52:6379> slaveof no one  临时恢复为master服务器,永久恢复需要给配置文件
OK
192.168.4.52:6379> info replication
# Replication
role:master

    带验证的主从复制结构
    主服务器的redis服务有连接密码， 从连接主服务器也要指定连接密码，配置如下：

    给主服务器51 设置连接密码
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  shutdown
    
[root@host51 ~]# vim +501 /etc/redis/6379.conf     
requirepass 666888   设置密码
:wq
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888
192.168.4.51:6351> keys *
1) "x"
192.168.4.51:6351> 

    52主机指定连接密码
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown

282 slaveof 192.168.4.51  6351  主服务器51
289 masterauth 666888 指定连接主服务器的密码
:wq
[root@host52 ~]# /etc/init.d/redis_6379 start
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
192.168.4.52:6379> keys *
1) "y"
2) "x"
192.168.4.52:6379> get y
"99"
192.168.4.52:6379> set i 77  默认是只读权限 不能做写操作
(error) READONLY You can't write against a read only slave.
192.168.4.52:6379>

配置一主多从复制结构
需求把数据库服务器 192.168.4.53 也配置为 192.168.4.51 主机的从服务器

准备：  在192.168.4.53主机 主机运行redis服务 
在 192.168.4.53 主机做如下配置
 redis-cli  -h 192.168.4.53 -p 6379 shutdown  停止服务

修改配置文件（永久配置）
vim /etc/redis/6379.conf
slaveof 192.168.4.51 6351  指定主服务器ip和端口
masterauth 666888  指定主服务器密码
:wq

/etc/init.d/redis_6379 start 启动服务 

redis-cli  -h 192.168.4.53 -p 6379 连接服务查看复制信息

在主数据库服务器查看复制信息
192.168.4.51:6351> info replication
# Replication
role:master
connected_slaves:2
slave0:ip=192.168.4.52,port=6379,state=online,offset=2151,lag=0
slave1:ip=192.168.4.53,port=6379,state=online,offset=2151,lag=0



配置主从从结构 （把一主多从  改变为 主从从结构）
    准备： 
    1 把192.168.4.53 恢复为独立的数据库服务器
    [root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
vim /etc/redis/6379.conf
#slaveof 192.168.4.51 6351  指定主服务器ip和端口
#masterauth 666888  指定主服务器密码
:wq

/etc/init.d/redis_6379 start 启动服务 

redis-cli  -h 192.168.4.53 -p 6379 连接服务查看复制信息
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379
192.168.4.53:6379> info replication
# Replication
role:master

    2 把192.168.4.53 配置为 192.168.4.52 的从服务器 
[root@host53 ~]# vim /etc/redis/6379.conf    
slaveof 192.168.4.52 6379
:wq

重启redis服务
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
[root@host53 ~]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host53 ~]# 

#查看复制信息
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379
192.168.4.53:6379> info replication
# Replication
role:slave  角色
master_host:192.168.4.52  主服务器 IP  
master_port:6379
master_link_status:up  连接状态


在192.168.4.52 主机查看复制信息 （有2种角色的信息）
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
.....
.....
connected_slaves:1  连接自己的从服务器有1台 
slave0:ip=192.168.4.53,port=6379,state=online,offset=3794,lag=1  从服务器的信息 


测试:   在主服务器 192.168.4.51  存储数据   在 52 和 53 主机都可以查看到
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888
 192.168.4.51:6351> mset v1  99 name plj   gender girl 


192.168.4.52:6379> keys *
1) "gender"
2) "name"
3) "y"
4) "school"
5) "v1"
6) "x"
192.168.4.52:6379> 

192.168.4.53:6379> keys *
1) "gender"
2) "school"
3) "x"
4) "v1"
5) "y"
6) "name"
192.168.4.53:6379> 


哨兵服务: 实现redis服务的高可用
哨兵服务运行后，监视redis主从结构中的master 服务器， 发现master服务器宕机后，把对应的slave服务器升级为master服务器。

哨兵服务可以监视一主一从  一主多从  主从从  结构中的主

案例需要 监视主从从结构的中的主数据库服务器 192.168.4.51 发现192.168.4.51 坏掉后把对应的从服务器  192.168.4.52 发现master服务器宕机后，把对应的slave服务器升级为master服务器。
注意,如果主从从结构的master 服务器设置的连接密码 ，那么其他服务器也要设置连接密码并且密码要和主服务器的一样，反之 就都不设置密码。

我们当前主从从结构   中的  51  设置了连接密码 666888  所以 52 和  53  也要实在一样的连接密码

        具体配置如下：
        设置52主机redis服务的连接密码为  666888
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown
[root@host52 ~]# vim +501 /etc/redis/6379.conf
slaveof 192.168.4.51 6351  主服务器Ip he 端口号
masterauth 666888      主服务器连接密码 
requirepass 666888  自己本机redis服务的密码 
:wq
[root@host52 ~]# /etc/init.d/redis_6379 start  
Starting Redis server...
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 -a 666888    连接 
192.168.4.52:6379> info replication  查看复制信息 
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up


        设置53主机redis服务的连接密码为  666888
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
[root@host53 ~]# vim  /etc/redis/6379.conf
slaveof 192.168.4.52 6379  主服务器Ip he 端口号
masterauth 666888      主服务器连接密码 
requirepass 666888  自己本机redis服务的连接密码
:wq
[root@host53 ~]# /etc/init.d/redis_6379 start

[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 -a 666888    连接自己
192.168.4.53:6379> info replication  查看复制信息
# Replication
role:slave
master_host:192.168.4.52
master_port:6379
master_link_status:up

        配置哨兵服务器192.168.4.57 ，具体配置如下：
               1  安装redis服务软件（不需要做初始化配置，因为安装软件的目的是提供哨兵服务）
[root@host57 ~]# rpm -q gcc  ||  yum -y install gcc 
[root@host57 ~]# tar -zxvf redis-4.0.8.tar.gz
[root@host57 ~]# cd redis-4.0.8/
[root@host57 redis-4.0.8]# make && make install

               2  编写哨兵服务主配置文件（需要根据主从复制结构的准备，自己编写）
                   说明有模板文件，可以通过查看模板文件获取配置项
[root@host57 ~]# cd redis-4.0.8/
[root@host57 redis-4.0.8]# ls sentinel.conf 
sentinel.conf
[root@host57 redis-4.0.8]#  vim  sentinel.conf

                    创建主配置文件并编写内容
 [root@host57 ~]# vim /etc/sentinel.conf
bind 192.168.4.57  哨兵服务使用的IP地址
port 26379  哨兵服务的端口号
sentinel monitor  myredis 192.168.4.51 6351  1   监视主数据库服务器51 并定义名称为 myredis   1表示当前有1台哨兵服务器
sentinel auth-pass  myredis 666888   监视51主机时 的连接密码 
：wq
[root@host57 ~]#                    
              
               3  启动哨兵服务
 [root@host57 ~]# nohup  redis-sentinel /etc/sentinel.conf  &   把服务置入后台继续运行
[1] 12688
[root@host57 ~]# nohup: 忽略输入并把输出追加到"nohup.out"

[root@host57 ~]# jobs  查看后台运行的进程
[1]+  运行中               nohup redis-sentinel /etc/sentinel.conf &
[root@host57 ~]# 
              

        测试配置：
              1停止192.168.4.51 主机的的redis服务
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888 shutdown

              2 在51的从服务器 52 主机查看复制信息，发现52的角色变为master
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 -a 666888
192.168.4.52:6379> info replication
# Replication
role:master   角色
connected_slaves:1
slave0:ip=192.168.4.53,port=6379,state=online,offset=47960,lag=1



              3 在52 主机存储新数据 ， 在53主机也可以查看到同样的数据
192.168.4.52:6379> mset student boby
OK
192.168.4.52:6379> mset studenta boby
OK
192.168.4.52:6379> mset studentb boby
OK
192.168.4.52:6379> mset studentc boby
OK
192.168.4.52:6379> 

              4 在57主机查看 当前监视的主服务器是谁（应该是52）
[root@host57 redis-4.0.8]# cat /etc/sentinel.conf 
bind 192.168.4.57
port 26379
sentinel myid ecdc4e52878844529c4b6b04630432fa0e7fc562
sentinel monitor myredis 192.168.4.52 6379 1    监视 主数据库服务器 ip   是  192.168.4.52
# Generated by CONFIG REWRITE
dir "/root"
sentinel auth-pass myredis 666888
sentinel config-epoch myredis 1
sentinel leader-epoch myredis 1
sentinel known-slave myredis 192.168.4.53 6379
sentinel known-slave myredis 192.168.4.51 6351
sentinel current-epoch 1
[root@host57 redis-4.0.8]#     

              5 把51主机的redis服务启动，自动做52的从服务器 并自动同步宕机期间的数据
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# 
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888
192.168.4.51:6351> config set masterauth 666888  设置连接52 密码
OK
192.168.4.51:6351> config rewrite  永久保存
OK
192.168.4.51:6351> info replication 查看复制信息
# Replication
role:slave
master_host:192.168.4.52  主服务器
master_port:6379
master_link_status:up
192.168.4.51:6351> keys student*
1) "studentb"
2) "student"
3) "studentc"
4) "studenta"
192.168.4.51:6351> 

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
二  持久化 ： 数据永久保存
redis服务 数据的手动备份和恢复 （在没有主从自动备份数据的情况下  运维人员 手动对数据做备份和恢复）
Redis服务 实现数据持久化的 2种方式：  RDB  和   AOF

数据持久化 : 就是可以把数据 永久的保存在硬盘里

先介绍RDB的使用 : 指的就是数据库目录 /var/lib/redis/6379 下的 dump.rdb 文件
Redis服务在运行过程中 会根据主配置文件里的定义，定期把内存里的数据复制一份保存到 dump.rdb文件里 

]# vim /etc/redis/6379.conf
#把内存里的数据保存到硬盘1份的存盘频率

save 900 1      # 900秒内且有大于等于1个key发生就执行存放操作
save 300 10      # 300秒内且有大于等于10个key发生就执行存放操作
save 60 10000     # 60秒内且有大于等于10000个key发生就执行存放操作

dbfilename dump.rdb  用来存储数据的文件名

:wq

192.168.4.56:6379> save   #手动执行存盘的命令 马上把内存里数据 把内存里的数据保存到硬盘 



通过拷贝 dump.rdb 文件 实现对  redis 数据的备份 
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379
192.168.4.56:6379> keys *
1) "v999"
2) "name"
3) "age"
4) "x"
5) "y"
6) "z"
7) "v7"
192.168.4.56:6379> save
192.168.4.56:6379> exit
[root@host56 ~]# cp /var/lib/redis/6379/dump.rdb  /opt/dump.rdb.bak
[root@host56 ~]# ls /opt/dump.rdb.bak 
/opt/dump.rdb.bak

模拟数据误删除 ，然后使用备份/opt/dump.rdb.bak文件恢复数据
192.168.4.56:6379> FLUSHALL
OK
192.168.4.56:6379> keys *
(empty list or set)
192.168.4.56:6379> exit


使用备份的文件恢复
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379  shutdown   停止服务
[root@host56 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host56 ~]# cp /opt/dump.rdb.bak /var/lib/redis/6379/dump.rdb  覆盖没有数据的dump.rdb文件
cp：是否覆盖"/var/lib/redis/6379/dump.rdb"？ y
[root@host56 ~]# 
[root@host56 ~]# ls /var/lib/redis/6379/    现在看到的文件是有数据
dump.rdb
[root@host56 ~]# /etc/init.d/redis_6379 start 加载有数据的文件启动服务
Starting Redis server...
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379  连接服务 后可以查看到数据 
192.168.4.56:6379> keys *
1) "z"
2) "v7"
3) "x"
4) "name"
5) "y"
6) "age"
7) "v999"
192.168.4.56:6379>

AOF 为了弥补RDB的不足 ， 而产生了AOF  (Append  Only   File)
记录客户端连接redis服务后，执行的所有写操作命令，是以追加的方式记录命令的
默认没有启用。需要手动启动

#修改配置文件启用aof文件

适合线上服务器启用
192.168.4.56:6379> config set appendonly yes  修改配置文件里的配置项
192.168.4.56:6379> config rewrite   永久保存修改


[root@host56 ~]# ls /var/lib/redis/6379/  数据库目录下多出.aof结尾的文件
appendonly.aof  dump.rdb
[root@host56 ~]# 


通过拷贝 记录 命令的 aof 文件  实现对数据的备份 
]# cp /var/lib/redis/6379/appendonly.aof  /opt/appendonly.aof.bak
[root@host52 ~]# scp  /opt/appendonly.aof   192.168.4.58:/opt/


58使用备份的aof文件恢复数据 （58 主机要事先启用aof）
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6379  
192.168.4.58:6379> keys *
(empty list or set)
192.168.4.58:6379> exit
[root@host58 ~]# 
[root@host58 ~]# 
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6379   shutdown
[root@host58 ~]# cp /opt/appendonly.aof  /var/lib/redis/6379/
cp：是否覆盖"/var/lib/redis/6379/appendonly.aof"？ y  覆盖没有数据的aof文件 
[root@host58 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host58 ~]# 
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6379
192.168.4.58:6379> keys *
 1) "x3"
 2) "student"
 3) "studenta"
 4) "name"
 5) "x1"
 6) "v1"
 7) "studentc"
 8) "x"
 9) "x2"
10) "studentb"
11) "gender"
12) "school"
13) "y"
192.168.4.58:6379>


线下服务器 适合修改配置文件启用aof 
vim /etc/redis/6379.conf
appendonly yes 
:wq
]# redis-cli  -h 192.168.4.58 -p 6379  shutdown
]# /etc/init.d/redis_6379 start




修复损坏的AOF文件 （aof 文件损坏回导致redis服务启动失败）

[root@host58 6379]# redis-check-aof --fix /var/lib/redis/6379/appendonly.aof 
0x             1bc: Expected prefix '*', got: 'a'
AOF analyzed: size=485, ok_up_to=444, diff=41
This will shrink the AOF from 485 bytes, with 41 bytes, to 444 bytes
Continue? [y/N]: y 同意
Successfully truncated AOF
[root@host58 6379]# 


#######################################
Redis数据类型
        type  变量名      # 检查数据类型 ， 不同类型的数据要使用对应的命令做管理

        1  字符类型数据的管理命令
192.168.4.58:6379> set name bob ex 20    设置name 变量的有效期是20秒

192.168.4.58:6379> set age 19 px 20    设置age 变量的有效期是20毫秒


192.168.4.58:6379> set sex boy 
OK
192.168.4.58:6379> set sex girl NX  变量存在不赋值
(nil)
192.168.4.58:6379> set sex girl XX  覆盖赋值
OK

192.168.4.58:6379> set sex no   覆盖赋值并永久存储

 注意：set 命令 存储的变量都是字符类型的 
192.168.4.58:6379> set x 99
OK
192.168.4.58:6379> type x
string
192.168.4.58:6379> 

192.168.4.58:6379> set  tel 18701986622
OK
192.168.4.58:6379> get tel
"18701986622"
192.168.4.58:6379> setrange 变量名 修改的起始位置 改成的什么 

192.168.4.58:6379> setrange tel 3 ***   修改变量的值   
(integer) 11
192.168.4.58:6379> get tel
"187***86622"
192.168.4.58:6379>

192.168.4.58:6379> set hostname www.tedu.cn
OK
192.168.4.58:6379> strlen hostname 统计变量值的个数
(integer) 11
192.168.4.58:6379> 


append 向已有变量里追加数据 若变量不存在 创建变量并复值
192.168.4.58:6379> get name
(nil) 变量不存在
192.168.4.58:6379> appen name pang 创建变量并赋值
(integer) 4
192.168.4.58:6379> get name
"pang"
192.168.4.58:6379> append name pang  变量存在追加数据
(integer) 8
192.168.4.58:6379> get name
"pangpang"
192.168.4.58:6379> 


setbit  让变量存储二进制数 
        二进制数只能是 0 或 1
        使用二进制数目的是节省内存空间
计算机的换算单位
1T = 1024G
1G内存 =  1024M  
1M =  1024K
1K =  1024bytes
1bytes = 8bit
1bit = 0 或 1 

我们是游戏网站，要存储网站每位玩家50年的登录信息  
假定网站现在有10万账号 

先计算一下存储一个玩家50年的登录信息需要多少内存空间
               0~2的32次方
setbit  变量名 第几位  值(0或1)
setbit  yaya  1   1
setbit  yaya  2   1
setbit  yaya  3   0
setbit  yaya  4   0
setbit  yaya  5   0
setbit  yaya  6   1
setbit  yaya  7   0
setbit  yaya  1   1
setbit  yaya  9   0

....
setbit  yaya  365 1
变量名   值 
yaya    11000100......1110  (365位)

[root@host58 6379]# echo  $[365/8] 存储1年的登录信息是 45字节 
45

存储一个人50年的登录信息需要多少字节 
[root@host58 6379]# echo  $[45*45]   2025字节  
2025
[root@host58 6379]# 

2025字节换算成K  是1K的 
[root@host58 6379]# echo  $[2025/1024]  
1
[root@host58 6379]#
得出结果 存储1个注册账号50内年的登录信息大概需要1K 

假定网站现在有10万账号  存储50年的登录信息需要多少G 内存 ？
100000 * 1K  = 100000K 换算成M   100000K/1024K  =  97M 


192.168.4.58:6379> setbit yaya 1 0
(integer) 0
192.168.4.58:6379> setbit yaya 2 0
(integer) 0
192.168.4.58:6379> setbit yaya 3 1
(integer) 0
192.168.4.58:6379> bitcount yaya 统计变量里数字1的个数
(integer) 1
192.168.4.58:6379> setbit yaya 4 1
(integer) 0
192.168.4.58:6379> bitcount yaya
(integer) 2
192.168.4.58:6379> 

decr 变量自减1
decrby 定义变量自减的步长

192.168.4.58:6379> set x 9
OK
192.168.4.58:6379> decr x
(integer) 8
192.168.4.58:6379> decr x
(integer) 7
192.168.4.58:6379> get x
"7"
192.168.4.58:6379> decrby x 3
(integer) 4
192.168.4.58:6379> decrby x 2
(integer) 2
192.168.4.58:6379> get x
"2"
192.168.4.58:6379> 

192.168.4.58:6379> get hostname   get命令获取变量的所有值
"www.tedu.cn"
192.168.4.58:6379> getrange获取变量的部分值
192.168.4.58:6379> get hostname
"www.tedu.cn"
192.168.4.58:6379> GETRANGE hostname 0 2  从前向后获取
"www"
192.168.4.58:6379> 
192.168.4.58:6379> 
192.168.4.58:6379> GETRANGE hostname -3 -1  从后向前获取
".cn"
192.168.4.58:6379> 

incr  自加1
incrby  指定自加步长
192.168.4.58:6379> set y 2
OK
192.168.4.58:6379> incr y
(integer) 3
192.168.4.58:6379> incr y
(integer) 4
192.168.4.58:6379> get y
"4"
192.168.4.58:6379> incrby y 5
(integer) 9
192.168.4.58:6379> incrby y 3
(integer) 12
192.168.4.58:6379> get y
"12"
192.168.4.58:6379>

192.168.4.58:6379> incrby y 3.5  报错
(error) ERR value is not an integer or out of range
192.168.4.58:6379> 
192.168.4.58:6379> incrbyfloat y 3.5  自加值 可以是小数 
"15.5"
192.168.4.58:6379> 
192.168.4.58:6379> mget x y   一起获取多个变量的值
1) "2"
2) "15.5"
192.168.4.58:6379> mset 一起存储多个变量
192.168.4.58:6379> mset v1 99  v2  66  v3  44
OK
192.168.4.58:6379> 

++++++++++++++++++++++++++++++++++++++++++++
对列表类型数据管理命令
    列表 ： 一个变量名 可以存储多个数据
    特点 ： 后进先出

lpush  变量名   值列表

192.168.4.58:6379> lpush  teacher nb  wk  dmy  plj zhzg lx
(integer) 6
192.168.4.58:6379> type  teacher
list   
192.168.4.58:6379> 

192.168.4.58:6379> get teacher  报错
(error) WRONGTYPE Operation against a key holding the wrong kind of value
192.168.4.58:6379> 

查看列表变量里的数据
192.168.4.58:6379> lrange teacher 0 -1
1) "lx"
2) "zhzg"
3) "plj"
4) "dmy"
5) "wk"
6) "nb"
192.168.4.58:6379> 

当变量已经存在时  lpush  是追加数据
192.168.4.58:6379> lpush  teacher xb  ds
(integer) 8
192.168.4.58:6379> lrange teacher 0 -1  后进先出
1) "ds"
2) "xb"
3) "lx"
4) "zhzg"
5) "plj"
6) "dmy"
7) "wk"
8) "nb"
192.168.4.58:6379> 

192.168.4.58:6379> lrange teacher 2  4  输出下标是2到4的元素
1) "lx"
2) "zhzg"
3) "plj"
192.168.4.58:6379> 

192.168.4.58:6379> LINDEX teacher 0  输出下标是0的元素
"ds"
192.168.4.58:6379> LINDEX teacher 4  输出下标是4的元素
"plj"
192.168.4.58:6379> LINDEX teacher -1 输出下标是-1的元素  （倒数第1个元素）
"nb"
192.168.4.58:6379> 

192.168.4.58:6379> llen teacher  统计列表元素的个数
(integer) 8
192.168.4.58:6379> 


192.168.4.58:6379> lpop teacher  删除列表的第1个元素，会输出被删除的元素
"ds"   

192.168.4.58:6379> rpop teacher  删除队尾的元素 会输出被删除的元素
"nb"

192.168.4.58:6379> lpush teacher  A B C     把新数据追加在队头

192.168.4.58:6379> rpush teacher  A1 B1 C1  把新数据追加在队尾 

192.168.4.58:6379> LINDEX teacher 0
"C"
192.168.4.58:6379> lset teacher 0 HAHA  修改下标是0的元素的值 
OK
192.168.4.58:6379> LINDEX teacher 0
"HAHA"
192.168.4.58:6379> 


+++++++++++++++++++++++++++++++++++++++++++++
hash表类型数据的管理命令
    hash表：让一个变量可以存储多列，每列对应一个值， 节省内存存储的空间

书名   嘻嘻嘻
作者   嘤嘤嘤
价格   啧啧啧
版本   v2 
销量   50万

hset  书名   作者   嘤嘤嘤
hset  书名   价格   啧啧啧
hset  书名   版本   v2
hset  书名   销量   50万
type  书名

192.168.4.58:6379> hset site tarena  www.tedu.cn   创建hash表类型变量
(integer) 1
192.168.4.58:6379> type site
hash
192.168.4.58:6379>

92.168.4.58:6379> get site  报错
(error) WRONGTYPE Operation against a key holding the wrong kind of value
192.168.4.58:6379> 
192.168.4.58:6379> HGETALL site  获取hash类型变量的所有信息
1) "tarena"
2) "www.tedu.cn"
192.168.4.58:6379> 

hmset  一起存储多列
192.168.4.58:6379> hmset site  163  www.163.com  jd  www.jd.com   tmall  www.taobao.com 
OK
192.168.4.58:6379> 

获取变量的所有列的名字
192.168.4.58:6379> hkeys site
1) "tarena"
2) "163"
3) "jd"
4) "tmall"

值获取1列的值
192.168.4.58:6379> hget site jd
"www.jd.com"

一起获取多列的值
192.168.4.58:6379> hmget site jd 163 
1) "www.jd.com"
2) "www.163.com"
192.168.4.58:6379> 

一起获取所有列的值
192.168.4.58:6379> HVALS  site
1) "www.tedu.cn"
2) "www.163.com"
3) "www.jd.com"
4) "www.taobao.com"
192.168.4.58:6379>

192.168.4.58:6379> hdel site jd  163
(integer) 2
192.168.4.58:6379> hkeys site
1) "tarena"
2) "tmall"
192.168.4.58:6379> 


redis 的官方网站  www.redis.cn 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
数据库课课程总结
主要学习的是 
        关系型数据库(RDBMS) MySQL服务的使用
        非关系型数据库(NoSQL) Redis服务的使用
都要掌握集群的搭建（MHA集群  redis集群） 目的实现服务打高可用 数据的自动备份
但成本比较高 维护难度也大。

当公司的业务量没有那么大的时候, 可以配置主从实现数据的自动备份+第三方软件实现
一下功能。比如分库分表  读写分离  哨兵服务 

都要掌握数据的备份和恢复  

都要掌握数据类型的管理 （select insert  delete update  list string  hash set ）

都要掌握服务搭建(搭建 mysql服务器  和   Redis 服务器)

都要掌握与网站服务连用怎么配置（lnmp   PHP+Redis）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
08月1 号  换老师  讲新课





















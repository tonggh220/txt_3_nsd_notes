
redis服务 数据的手动备份和恢复 （在没有主从自动备份数据的情况下  运维人员 手动对数据做备份和恢复）
Redis服务 实现数据持久化的 2种方式：  RDB  和   AOF

数据持久化 : 就是可以把数据 永久的保存在硬盘里

先介绍RDB的使用 : 指的就是数据库目录 /var/lib/redis/6379 下的 dump.rdb 文件
Redis服务在运行过程中 会根据主配置文件里的定义，定期把内存里的数据复制一份保存到 dump.rdb文件里 

]# vim /etc/redis/6379.conf
#把内存里的数据保存到硬盘1份的存盘频率

save 900 1      # 900秒内且有大于等于1个key发生就执行存放操作
save 300 10      # 300秒内且有大于等于10个key发生就执行存放操作
save 60 10000     # 60秒内且有大于等于10000个key发生就执行存放操作

dbfilename dump.rdb  用来存储数据的文件名

:wq

192.168.4.56:6379> save   #手动执行存盘的命令 马上把内存里数据 把内存里的数据保存到硬盘 



通过拷贝 dump.rdb 文件 实现对  redis 数据的备份 
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379
192.168.4.56:6379> keys *
1) "v999"
2) "name"
3) "age"
4) "x"
5) "y"
6) "z"
7) "v7"
192.168.4.56:6379> save
192.168.4.56:6379> exit
[root@host56 ~]# cp /var/lib/redis/6379/dump.rdb  /opt/dump.rdb.bak
[root@host56 ~]# ls /opt/dump.rdb.bak 
/opt/dump.rdb.bak

模拟数据误删除 ，然后使用备份/opt/dump.rdb.bak文件恢复数据
192.168.4.56:6379> FLUSHALL
OK
192.168.4.56:6379> keys *
(empty list or set)
192.168.4.56:6379> exit


使用备份的文件恢复
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379  shutdown   停止服务
[root@host56 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host56 ~]# cp /opt/dump.rdb.bak /var/lib/redis/6379/dump.rdb  覆盖没有数据的dump.rdb文件
cp：是否覆盖"/var/lib/redis/6379/dump.rdb"？ y
[root@host56 ~]# 
[root@host56 ~]# ls /var/lib/redis/6379/    现在看到的文件是有数据
dump.rdb
[root@host56 ~]# /etc/init.d/redis_6379 start 加载有数据的文件启动服务
Starting Redis server...
[root@host56 ~]# redis-cli  -h 192.168.4.56 -p 6379  连接服务 后可以查看到数据 
192.168.4.56:6379> keys *
1) "z"
2) "v7"
3) "x"
4) "name"
5) "y"
6) "age"
7) "v999"
192.168.4.56:6379>

AOF 为了弥补RDB的不足 ， 而产生了AOF  (Append  Only   File)
记录客户端连接redis服务后，执行的所有写操作命令，是以追加的方式记录命令的
默认没有启用。需要手动启动

#修改配置文件启用aof文件

适合线上服务器启用
192.168.4.56:6379> config set appendonly yes  修改配置文件里的配置项
192.168.4.56:6379> config rewrite   永久保存修改


[root@host56 ~]# ls /var/lib/redis/6379/  数据库目录下多出.aof结尾的文件
appendonly.aof  dump.rdb
[root@host56 ~]# 


通过拷贝 记录 命令的 aof 文件  实现对数据的备份 
]# cp /var/lib/redis/6379/appendonly.aof  /opt/appendonly.aof.bak

三 、Redis主从复制：实现数据自动备份的一种存储架构，分为2种角色的数据库服务器
    master(主数据库服务器)  接受客户端访问的服务器
    slave（从数据库服务器） 自动同步主服务器数据的

    主从复制包括：
        一主一从 ： 主从服务器各有1台  （结构存在风险  单点故障）

        一主多从 ： 给1台主服务器配置多个从服务器  （解决从服务器的单点故障问题）

        主从从  ： 给主从结构中的从服务器也配置1台从服务器 （主从从结构+烧饼服务可以解决 主服务器的单点故障问题）

    配置主从复制： 
        配置一主一从存储结构
        需求 把数据库服务器 52 配置为  51 主从服务器
        准备： 在 51 和  52 主机分别运行redis服务

        配置从服务器（默认运行的redis服务器的角色 都master ）

        >info  replication  #查看主从复制信息
        >slaveof  主服务器IP  主服务器端口号    #命令行临时指定为从服务器

        #在52主机的登录状态下执行
        > slaveof   192.168.4.51  6351
        192.168.4.52:6379> info replication
# Replication
role:slave   角色
master_host:192.168.4.51  ip地址
master_port:6351  端口号
master_link_status:up  连接状态


      #在51主机查看复制信息
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351 
192.168.4.51:6351> info replication
# Replication
role:master  角色
connected_slaves:1  有1个从服务器
slave0:ip=192.168.4.52,port=6379,state=online,offset=126,lag=1  从服务器的信息
      
验证：在主服务器存储数据 在从服务器本机也可以查看到同样的数据
192.168.4.51:6351> keys *
(empty list or set)
192.168.4.51:6351> mset x 1  name bob  age 19
OK
192.168.4.51:6351> 

192.168.4.52:6379> keys *
1) "x"
2) "name"
3) "age"
192.168.4.52:6379> 


        修改配置文件永久设置为从服务器（命令行配置临时有效重启服务会失效）
        修改52主机的配置文件，通过重启redis服务测试

        [root@host52 ~]# vim /etc/redis/6379.conf
        282 slaveof 192.168.4.51  6351
        :wq
        [root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown
[root@host52 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up

192.168.4.52:6379> slaveof no one  临时恢复为master服务器,永久恢复需要给配置文件
OK
192.168.4.52:6379> info replication
# Replication
role:master

    带验证的主从复制结构
    主服务器的redis服务有连接密码， 从连接主服务器也要指定连接密码，配置如下：

    给主服务器51 设置连接密码
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  shutdown
    
[root@host51 ~]# vim +501 /etc/redis/6379.conf     
requirepass 666888   设置密码
:wq
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888
192.168.4.51:6351> keys *
1) "x"
192.168.4.51:6351> 

    52主机指定连接密码
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown

282 slaveof 192.168.4.51  6351  主服务器51
289 masterauth 666888 指定连接主服务器的密码
:wq
[root@host52 ~]# /etc/init.d/redis_6379 start
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
192.168.4.52:6379> keys *
1) "y"
2) "x"
192.168.4.52:6379> get y
"99"
192.168.4.52:6379> set i 77  默认是只读权限 不能做写操作
(error) READONLY You can't write against a read only slave.
192.168.4.52:6379>

配置一主多从复制结构
需求把数据库服务器 192.168.4.53 也配置为 192.168.4.51 主机的从服务器

准备：  在192.168.4.53主机 主机运行redis服务 
在 192.168.4.53 主机做如下配置
 redis-cli  -h 192.168.4.53 -p 6379 shutdown  停止服务

修改配置文件（永久配置）
vim /etc/redis/6379.conf
slaveof 192.168.4.51 6351  指定主服务器ip和端口
masterauth 666888  指定主服务器密码
:wq

/etc/init.d/redis_6379 start 启动服务 

redis-cli  -h 192.168.4.53 -p 6379 连接服务查看复制信息

在主数据库服务器查看复制信息
192.168.4.51:6351> info replication
# Replication
role:master
connected_slaves:2
slave0:ip=192.168.4.52,port=6379,state=online,offset=2151,lag=0
slave1:ip=192.168.4.53,port=6379,state=online,offset=2151,lag=0



配置主从从结构 （把一主多从  改变为 主从从结构）
    准备： 
    1 把192.168.4.53 恢复为独立的数据库服务器
    [root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
vim /etc/redis/6379.conf
#slaveof 192.168.4.51 6351  指定主服务器ip和端口
#masterauth 666888  指定主服务器密码
:wq

/etc/init.d/redis_6379 start 启动服务 

redis-cli  -h 192.168.4.53 -p 6379 连接服务查看复制信息
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379
192.168.4.53:6379> info replication
# Replication
role:master

    2 把192.168.4.53 配置为 192.168.4.52 的从服务器 
[root@host53 ~]# vim /etc/redis/6379.conf    
slaveof 192.168.4.52 6379
:wq

重启redis服务
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
[root@host53 ~]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@host53 ~]# 

#查看复制信息
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379
192.168.4.53:6379> info replication
# Replication
role:slave  角色
master_host:192.168.4.52  主服务器 IP  
master_port:6379
master_link_status:up  连接状态


在192.168.4.52 主机查看复制信息 （有2种角色的信息）
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379
192.168.4.52:6379> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up
.....
.....
connected_slaves:1  连接自己的从服务器有1台 
slave0:ip=192.168.4.53,port=6379,state=online,offset=3794,lag=1  从服务器的信息 


测试:   在主服务器 192.168.4.51  存储数据   在 52 和 53 主机都可以查看到
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 666888
 192.168.4.51:6351> mset v1  99 name plj   gender girl 


192.168.4.52:6379> keys *
1) "gender"
2) "name"
3) "y"
4) "school"
5) "v1"
6) "x"
192.168.4.52:6379> 

192.168.4.53:6379> keys *
1) "gender"
2) "school"
3) "x"
4) "v1"
5) "y"
6) "name"
192.168.4.53:6379> 


哨兵服务: 实现redis服务的高可用
哨兵服务运行后，监视redis主从结构中的master 服务器， 发现master服务器宕机后，把对应的slave服务器升级为master服务器。

哨兵服务可以监视一主一从  一主多从  主从从  结构中的主

案例需要 监视主从从结构的中的主数据库服务器 192.168.4.51 发现192.168.4.51 坏掉后把对应的从服务器  192.168.4.52 发现master服务器宕机后，把对应的slave服务器升级为master服务器。
注意,如果主从从结构的master 服务器设置的连接密码 ，那么其他服务器也要设置连接密码并且密码要和主服务器的一样，反之 就都不设置密码。

我们当前主从从结构   中的  51  设置了连接密码 666888  所以 52 和  53  也要实在一样的连接密码

        具体配置如下：
        设置52主机redis服务的连接密码为  666888
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 shutdown
[root@host52 ~]# vim +501 /etc/redis/6379.conf
slaveof 192.168.4.51 6351  主服务器Ip he 端口号
masterauth 666888      主服务器连接密码 
requirepass 666888  自己本机redis服务的密码 
:wq
[root@host52 ~]# /etc/init.d/redis_6379 start  
Starting Redis server...
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6379 -a 666888    连接 
192.168.4.52:6379> info replication  查看复制信息 
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up


        设置53主机redis服务的连接密码为  666888
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 shutdown
[root@host53 ~]# vim  /etc/redis/6379.conf
slaveof 192.168.4.52 6379  主服务器Ip he 端口号
masterauth 666888      主服务器连接密码 
requirepass 666888  自己本机redis服务的连接密码
:wq
[root@host53 ~]# /etc/init.d/redis_6379 start

[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379 -a 666888    连接自己
192.168.4.53:6379> info replication  查看复制信息
# Replication
role:slave
master_host:192.168.4.52
master_port:6379
master_link_status:up

        配置哨兵服务器192.168.4.57 ，具体配置如下：
               1  安装redis服务软件（不需要做初始化配置，因为安装软件的目的是提供哨兵服务）
[root@host57 ~]# rpm -q gcc  ||  yum -y install gcc 
[root@host57 ~]# tar -zxvf redis-4.0.8.tar.gz
[root@host57 ~]# cd redis-4.0.8/
[root@host57 redis-4.0.8]# make && make install

               2  编写哨兵服务额主配置文件（需要根据主从复制结构的准备，自己编写）

               
               3  启动哨兵服务

        测试配置


     



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
08月1 号  换老师  讲新课程



















7月11 号 上午 完成 mha 的配置	
7月11 号 下午  Nosql_day01 + day02(redis环境准备)

			   NoSQL  一类数据库服务软件的统称(非关系型数据库)
			   非关系型数据库的特点：不用建表  数据通过key  values方式存储
									 大多数软件是把数据存储在内存里
									 
			  非关系型数据库服务软件有哪些?					 
			  Memcached  Redis(学这个)  MogoDB

			  Redis  实现数据分布式存储的内存存储服务，同时能够实现数据的永久存储
					 也支持主从同步结构 也有集群结构 支持各种数据类型
						
搭建redis服务器 （在主机 192.168.4.51 上运行redis服务）
	具体步骤：
		1 安装软件
[root@host51 ~]# rpm -q gcc
未安装软件包 gcc 
[root@host51 ~]# yum  -y install gcc	
[root@host51 ~]# tar -zxvf redis-4.0.8.tar.gz 
[root@host51 ~]# cd redis-4.0.8
[root@host51 ~]# make
[root@host51 ~]# make install
	
		2 初始化配置
[root@host51 redis-4.0.8]# ./utils/install_server.sh   #执行shell 脚本
Welcome to the redis service installer
This script will help you easily set up a running redis server

Please select the redis port for this instance: [6379] 确认服务使用的端口
Selecting default: 6379
Please select the redis config file name [/etc/redis/6379.conf] 主配置文件
Selected default - /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log]  日志文件
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379] 数据库目录
Selected default - /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server] 服务程序
Selected config: 输出确认的统计信息
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data dir       : /var/lib/redis/6379
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli   客户端连接命令
Is this ok? Then press ENTER to go on or Ctrl-C to abort.
Copied /tmp/6379.conf => /etc/init.d/redis_6379
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!  并设置了开机运行
Starting Redis server...  启动服务 
Installation successful!

              3  查看服务状态
				
[root@host51 redis-4.0.8]# ss -utnlp  | grep 6379  查看服务端口
tcp    LISTEN     0      128    127.0.0.1:6379                  *:*                   users:(("redis-server",pid=10453,fd=6))
[root@host51 redis-4.0.8]# 
		
		
		4 连接服务
[root@host51 ~]# redis-cli 
127.0.0.1:6379> 
 		
		5  存/读数据
127.0.0.1:6379> set school tarena   #存
OK
127.0.0.1:6379> keys *  #查看已经存储变量
1) "school"
127.0.0.1:6379> get school #获取变量值
"tarena"
127.0.0.1:6379> 
		
		6 断开连接
127.0.0.1:6379> exit

管理redis服务 
	停止服务
[root@host51 ~]# /etc/init.d/redis_6379 stop
Stopping ...
Redis stopped
[root@host51 ~]# /etc/init.d/redis_6379 status   #查看服务状态
cat: /var/run/redis_6379.pid: 没有那个文件或目录
Redis is running ()
[root@host51 ~]# 
[root@host51 ~]# /etc/init.d/redis_6379 start  启动服务
Starting Redis server...
[root@host51 ~]# /etc/init.d/redis_6379 status  #再查看状态
Redis is running (10479)
[root@host51 ~]# 
	
	  常用命令的使用（对已经存储的变量做管理）
	  set / get  
	  
	  mset / mget
[root@host51 ~]# redis-cli 
127.0.0.1:6379> keys *
1) "school"
127.0.0.1:6379> 
127.0.0.1:6379> mset  name bob  age 19  gender man
OK
127.0.0.1:6379> keys *
1) "name"
2) "gender"
3) "age"
4) "school"
127.0.0.1:6379> mget name  age  school
1) "bob"
2) "19"
3) "tarena"
127.0.0.1:6379> 
	
127.0.0.1:6379[1]> select 2  切换到2号库里
OK
127.0.0.1:6379[2]> keys *
(empty list or set)
127.0.0.1:6379[2]> mset a  1  b 2  c 3
OK
127.0.0.1:6379[2]> keys *
1) "a"
2) "c"
3) "b"
127.0.0.1:6379[2]>	
127.0.0.1:6379[2]> keys *
1) "a"
2) "c"
3) "b"
127.0.0.1:6379[2]> del a   删除变量a 
(integer) 1
127.0.0.1:6379[2]> keys *
1) "c"
2) "b"
127.0.0.1:6379[2]> 

127.0.0.1:6379[2]> MOVE c 0  把变量c移动到0号库里

127.0.0.1:6379> EXPIRE name 20  设置name变量的过期时间是20秒


127.0.0.1:6379> ttl name 
(integer) -2  #变量已经过期被删除

127.0.0.1:6379> ttl age
(integer) -1   表示变量没有设置过期时间
127.0.0.1:6379>
LNP+Redis (1台提供存储服务)

127.0.0.1:6379> FLUSHDB  清空所在库的所有数据
 
127.0.0.1:6379> FLUSHALL  清空内存里的所有数据


		修改服务使用的ip地址(默认是lo网卡的地址)
		注意修改了服务的ip地址 端口号 和 连接密码 中的任意一项配置后 ，都不能
		使用脚本停止服务，要写还有脚本停止服务需要修改脚本的代码不然就得使用命令
		停止服务
		
[root@host51 ~]# /etc/init.d/redis_6379 stop
[root@host51 ~]# vim /etc/redis/6379.conf		
port 6351  端口号
bind 192.168.4.51  服务使用ip地址
requirepass 123456  服务的连接密码
:wq

[root@host51 ~]# /etc/init.d/redis_6379 start
[root@host51 ~]# ss -utnlp | grep 6351
tcp    LISTEN     0      128    192.168.4.51:6351   *:*    users:(("redis-server",pid=10525,fd=6))
[root@host51 ~]# 
					
			修改配置之后的连接 
[root@host51 ~]# redis-cli -h 192.168.4.51  -p 6351 -a 123456
192.168.4.51:6351> keys *
(empty list or set)
192.168.4.51:6351>exit 

[root@host51 ~]# redis-cli -h 192.168.4.51  -p 6351 -a 123456   shutdown  使用命令停止服务

在脚本里调用停止服务的命令，就可以用脚本停止服务了 
[root@host51 ~]# vim  /etc/init.d/redis_6379
 43     $CLIEXEC -h 192.168.4.51 -p 6351 -a 123456  shutdown
:wq

/etc/init.d/redis_6379  start
/etc/init.d/redis_6379  stop   #可以使用脚本停止服务了 

二  LNP  +  redis服务    
（把网站的数据存储在内存服务器里）

	2.1  部署LNP （192.168.4.58）
			#  安装源码的nginx软件
  486  yum -y install gcc  pcre-devel  zlib-devel
  487  tar -zxvf nginx-1.12.2.tar.gz 
  488  cd nginx-1.12.2/
  489  ./configure 
  492  make 
  493  make install			
[root@host58 nginx-1.12.2]# ls /usr/local/nginx/
conf  html  logs  sbin
			
			#  安装php
[root@host58 ~]# yum -y install  php  php-fpm  php-devel

			#  启动服务
[root@host58 ~]# vim +65 /usr/local/nginx/conf/nginx.conf			
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000; #把访问php网页的请求给本机的9000端口
            fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
            include        fastcgi.conf;
        }
:wq

[root@host58 ~]# /usr/local/nginx/sbin/nginx  
[root@host58 ~]# netstat  -utnlp  | grep  80
tcp        0      0 0.0.0.0:80              0.0.0.0:*   LISTEN      17107/nginx: master
		
[root@host58 ~]# netstat  -utnlp  | grep  9000
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      17055/php-fpm: mast 
[root@host58 ~]# 			
			#  编写php脚本
[root@host58 ~]# vim /usr/local/nginx/html/test.php
<?php
echo  "hello world!!!";
?>
:wq
			
			#  访问网站php脚本
[root@host58 ~]# curl  http://localhost/test.php
hello world!!!


2.2 把数据存储在redis服务器里 ，具体配置如下：
		# 在网站服务器安装连接redis服务的模块
[root@host58 ~]# rpm -q gcc  || yum -y install gcc
gcc-4.8.5-28.el7.x86_64
[root@host58 ~]# 
[root@host58 ~]# tar -zxvf redis-cluster-4.3.0.tgz
[root@host58 ~]# cd redis-4.3.0/
[root@host58 redis-4.3.0]# phpize 
Configuring for:
PHP Api Version:         20100412
Zend Module Api No:      20100525
Zend Extension Api No:   220100525
[root@host58 redis-4.3.0]# 
[root@host58 redis-4.3.0]# ./configure --with-php-config=/usr/bin/php-config
[root@host58 redis-4.3.0]# make
	
[root@host58 redis-4.3.0]# make install
Installing shared extensions:     /usr/lib64/php/modules/  模块的安装位置
[root@host58 redis-4.3.0]# 
[root@host58 redis-4.3.0]# ls /usr/lib64/php/modules/ 查看模块文件redis.so
curl.so  fileinfo.so  json.so  phar.so  redis.so  zip.so
[root@host58 redis-4.3.0]# 

		# 配置php进程调用模块
		
]# vim +728  /etc/php.ini		
extension_dir = "/usr/lib64/php/modules/"  #模块的存放目录
extension = "redis.so"   #模块名
:wq

[root@host58 redis-4.3.0]# systemctl  restart php-fpm
[root@host58 redis-4.3.0]# 
[root@host58 redis-4.3.0]# php  -m   | grep redis   查看支持的模块
redis
[root@host58 redis-4.3.0]#

		# 编写存储数据的php脚本 ，并访问脚本
		
vim  /usr/local/nginx/html/set.php
<?php
$redis = new redis(); //定义连接命令

$redis->connect("192.168.4.51","6351"); #连接redis服务器

$redis->auth("123456"); #连接密码

$redis->set("address","beijing"); #存储数据
$redis->set("mail","plj@tedu.cn");#存储数据

echo  "save ok"; #提示信息
?>   
:wq

~]# curl http://192.168.4.58/set.php
save ok 
		
		# 在redis服务器本机，命令行登录，查看数据（看到php脚本存储的数据为成功）
		
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456
192.168.4.51:6351> keys *
1) "address"
2) "mail"
192.168.4.51:6351> mget address mail
1) "beijing"
2) "plj@tedu.cn"
192.168.4.51:6351> 


搭建redis集群（多台服务器一起提供存储服务）
	集群环境准备(至少需要6台redis服务器) 51  ~ 56 
	51 已经有了 ，但要修改51的配置才可以用51 做集群。 
[root@host51 ~]# /etc/init.d/redis_6379 stop
[root@host51 ~]# vim +501 /etc/redis/6379.conf 
#requirepass 123456
cluster-enabled yes
cluster-config-file nodes-6379.conf	
cluster-node-timeout 5000
:wq
[root@host51 ~]# rm  -rf /var/lib/redis/6379/*
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.51:16351      0.0.0.0:*               LISTEN      10746/redis-server  
tcp        0      0 192.168.4.51:6351       0.0.0.0:*               LISTEN      10746/redis-server  
[root@host51 ~]# 
	
	准备52 到 56具体操作如下  
			1 安装软件
			
		
  355  rpm -q gcc  || yum -y install gcc 
  356  tar -zxvf redis-4.0.8.tar.gz 
  357  cd redis-4.0.8/
  358  make && make install
  	2 初始化配置 
		
  359  ./utils/install_server.sh 
  360  ss -utnlp  | grep  6379
  
			3 停止服务
  362  /etc/init.d/redis_6379 stop
			
			
			4 修改配置文件(改服务使用的ip地址 及启用集群功能)
]# vim /etc/redis/6379.conf 

bind 192.168.4.52
cluster-enabled yes
cluster-config-file nodes-6379.conf	
cluster-node-timeout 5000
:wq
		
			5 启动服务
[root@host52 redis-4.0.8]# /etc/init.d/redis_6379  start
Starting Redis server...

			6 查看服务端口
[root@host52 redis-4.0.8]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.52:6379       0.0.0.0:*               LISTEN      9720/redis-server 1 
tcp        0      0 192.168.4.52:16379      0.0.0.0:*               LISTEN      9720/redis-server 1 
[root@host52 redis-4.0.8]# 					

配置管理主机192.168.4.57 (管理主机用来管理redis集群的)
		在57主机做如下配置：
		#准备ruby脚本运行环境
[root@host57 ~]# rpm -q ruby
未安装软件包 ruby 
[root@host57 ~]# yum -y install ruby
[root@host57 ~]# gem  install  redis-3.2.1.gem 
Successfully installed redis-3.2.1
Parsing documentation for redis-3.2.1
Installing ri documentation for redis-3.2.1
1 gem installed
[root@host57 ~]# 
		
		#创建ruby脚本
  276  rpm -q ruby
  277  yum -y install ruby
  282  gem  install  redis-3.2.1.gem 
  285  tar -zxvf redis-4.0.8.tar.gz 

  287  cd redis-4.0.8/
  292  cp src/redis-trib.rb  /usr/local/sbin/

  294  chmod  +x  /usr/local/sbin/redis-trib.rb 
		
		
		#查看脚本的帮助信息
[root@host57 ~]# redis-trib.rb help
		
		
		#使用脚本创建集群
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6379
192.168.4.53:6379
Adding replica 192.168.4.55:6379 to 192.168.4.51:6351
Adding replica 192.168.4.56:6379 to 192.168.4.52:6379
Adding replica 192.168.4.54:6379 to 192.168.4.53:6379
M: 4916e695e4e42d32fcbfc2bed03cf288b10abf42 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 3cb10727bff948e454051ef4a9e45981f5558d8b 192.168.4.52:6379
   slots:5461-10922 (5462 slots) master
M: eae91de0cfc451d187e31e7e0821710d4e5ad6d3 192.168.4.53:6379
   slots:10923-16383 (5461 slots) master
S: f14c464c18ecec458ef5181054fab389bf8b21ad 192.168.4.54:6379
   replicates eae91de0cfc451d187e31e7e0821710d4e5ad6d3
S: b163dcb7e0dfc61e1ad68583d30fdd6284cea327 192.168.4.55:6379
   replicates 4916e695e4e42d32fcbfc2bed03cf288b10abf42
S: d43e490620cec40be4a01ab9b64f93393ddbb06a 192.168.4.56:6379
   replicates 3cb10727bff948e454051ef4a9e45981f5558d8b
Can I set the above configuration? (type 'yes' to accept): yes  同意
.....
.....
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@host57 ~]# 
		
		#在管理主机查看集群状态
[root@host57 ~]# redis-trib.rb  info 192.168.4.51:6351
192.168.4.51:6351 (4916e695...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.52:6379 (3cb10727...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.53:6379 (eae91de0...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 

      #在管理主机查看集群详细信息
      
[root@host57 ~]# redis-trib.rb  check  192.168.4.53:6379


redis 集群能够实现 数据的自动备份 和数据的分布式存储 、redis服务的高可用 

数据的自动备份 怎么实现的？ 在创建集群的时候 会自动设置主从库关系,从角色的服务器自动同步master角色服务器的数据。

数据的分布式存储 怎么实现的？ 整个集群默认有16384个 hash slots  范围是0 -  16383 ，在创建集群时 会平均的把hash slots
平均的分配给 master 角色的数据库服务器  在存储数据的时候根据集群的算法CRC16 计算结果存储数据

怎么实现redis服务的高可用的? 当集群中的master角色的主机宕机后 对应的slave角色 主机会自动升级为master 并接管他的hash slots 
                            宕机的master 修复后 会自动加入集群 并同步宕机期间的数据 自动做当前master的slave主机

注意： 如果集群中没有slave主机的  master 服务器 宕机里 ，那么整个集群也坏了.





客户端连接集群中的任意一台  redis服务器  都可以 存储和查看数据 
]# redis-cli  -c -h 192.168.4.51 -p 6379 
192.168.4.51:6379> set addr  bj  存储数据
-> Redirected to slot [12790] located at 192.168.4.53:6379
OK
192.168.4.53:6379>  info replication 查看主从信息
192.168.4.53:6379>  get   addr   查看数据

在Redis服务器本机 查看集群新 
[root@host53 ~]# redis-cli  -h 192.168.4.53 -p 6379
192.168.4.53:6379> cluster info
cluster_state:ok   表示在集群里
cluster_known_nodes:6  集群中主机的个数
cluster_size:3  表示主服务器的台数

查看本机角色  
> info replication
role:master
connected_slaves:1
slave0:ip=192.168.4.54,port=6379,state=online,offset=809996,lag=0

查看集群成员信息
> cluster nodes
或 查看  cat  /var/lib/redis/6379/nodes-6379.conf



7月18  redis集群管理  
        一 、向集群中添加新的redis服务器（添加新服务器的情况： 1  扩大内存 存储容量   2 提高服务的可靠性）

             诉求:把ip地址是 192.168.4.58的主机添加到集群里做master角色服务器 来扩大集群存储容量 
             1  准备工作 ： 创建1台新的虚拟机 IP 192.168.4.58     安装redis服务 并启用集群功能  
             2  在管理主机把 58添加到集群里 做master服务器,具体操作如下：
                    2.1 添加主机到集群
 [root@host57 ~]# redis-trib.rb   add-node 192.168.4.58:6379  192.168.4.51:6351     

                    2.2 分配hash slots 

How many slots do you want to move (from 1 to 16384)? 4096   #给新主机分配hash slots 
What is the receiving node ID? e218620d051945e825c753dd25a8f26f94ce1173   #接收hash slosts 的 master 服务器ID 
Source node #1:all    # 在当前所有的master 角色的服务器 获取 4096个 hash slosts
Do you want to proceed with the proposed reshard plan (yes/no)? yes 同意 


                    2.3 查看集群信息
[root@host57 ~]# redis-trib.rb   info 192.168.4.51:6351
192.168.4.51:6351 (4916e695...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.52:6379 (3cb10727...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6379 (e218620d...) -> 2 keys | 4096 slots | 0 slaves.  有hash slots  
192.168.4.54:6379 (f14c464c...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 6 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]#
                    2.4 客户端连接新的主服务器58 可以存储数据和查看数据 
]# redis-cli  -c  -h 192.168.4.58 -p 6379
192.168.4.58:6379> keys *
1) "age"
2) "name"
192.168.4.58:6379> set v1  99
OK
192.168.4.58:6379> keys *
1) "age"
2) "v1"
3) "name"
192.168.4.58:6379> get school
-> Redirected to slot [8455] located at 192.168.4.52:6379
"tarena"
192.168.4.52:6379> exit
[root@host58 redis-4.0.8]# 
           诉求:把ip地址是 192.168.4.59的主机添加到集群里做slave角色服务器 来实现redis服务高可靠性 
                 1  准备工作 ： 创建1台新的虚拟机 IP 192.168.4.59     安装redis服务 并启用集群功能  

                 2 在管理主机做如下操作：
                    说明slave 服务器的数据是在主服务器自动同步的，所以从服务器不需要分配hash slosts  ，只需要把他添加到集群里
                    指定 做那台主服务器的从 就可以了 
                    **** 不指定主服务器添加slave 角色的主机，默认 做从服务器个数最少的 maser的slave 
                    **** 如果所有的master服务器 slave角色主机的台数个数一样 不指定做谁的slave 时 随机选择master 
                    **** 运维管理者 可以在添加的slave 角色主机是，强制指定 做那台 master 的 slave 
                    **** 在特殊情况下 集群会自动分配每个master 主机 slave角色主机的个数 

                   2.1  把新redis服务器添加到集群里 

            [root@host57 ~]# redis-trib.rb add-node --slave 192.168.4.59:6379 192.168.4.51:6351 


                   2.2  查看集群信息 
[root@host57 ~]# redis-trib.rb   info 192.168.4.51:6351
192.168.4.51:6351 (4916e695...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.52:6379 (3cb10727...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.58:6379 (e218620d...) -> 3 keys | 4096 slots | 1 slaves.  # 58 主机有一个salve服务器了  
192.168.4.54:6379 (f14c464c...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 7 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 




############## 把redis服务器从集群中移除##############################
一、 移除slave角色的redis服务器,比较简单 因为slave角色的服务器不占用hash slosts ，在管理主机 执行删除操作即可
    诉求： 把ip 地址 是  192.168.4.56  slave 角色的主机移除集群
    在管理主机执行移除命令
   
    # 查看被移除的slave 服务器的ID 
    [root@host57 ~]# redis-trib.rb  check 192.168.4.51:6351  | grep  192.168.4.56
S: d43e490620cec40be4a01ab9b64f93393ddbb06a 192.168.4.56:6379
[root@host57 ~]# 

执行移除主机的命令
[root@host57 ~]# redis-trib.rb  del-node 192.168.4.51:6351 d43e490620cec40be4a01ab9b64f93393ddbb06a  
>>> Removing node d43e490620cec40be4a01ab9b64f93393ddbb06a from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.  被移除集群主机上的redis会自动停止
[root@host57 ~]#

[root@host57 ~]# redis-trib.rb   info 192.168.4.51:6351
192.168.4.51:6351 (4916e695...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.52:6379 (3cb10727...) -> 2 keys | 4096 slots | 0 slaves.   从服务的台数 变成O 
192.168.4.58:6379 (e218620d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.54:6379 (f14c464c...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 7 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 



二、移除master角色的redis服务器 
    诉求:把没有slave 主机的 master服务器  192.168.4.52移除集群
    2.1 在管理主机释放占用的hash slots 
        #查看52主机占用hash slots 集群中主机的个数
        [root@host57 ~]# redis-trib.rb   check  192.168.4.51:6351 

.....
M: 3cb10727bff948e454051ef4a9e45981f5558d8b 192.168.4.52:6379
   slots:6827-10922 (4096 slots) master   #占4096 
   0 additional replica(s)
......
    
       #通过执行分片操作 释放占用的hash slots 
       [root@host57 ~]# redis-trib.rb   reshard 192.168.4.51:6351 

       How many slots do you want to move (from 1 to 16384)? 4096   #释放hash  slots 的个数
       What is the receiving node ID? 4916e695e4e42d32fcbfc2bed03cf288b10abf42  #接收 释放hash  slots 的个数 master服务器ID
       Source node #1: #释放hash  slots 的个数 master服务器ID
       Source node #2:done  #结束填写ID 
Do you want to proceed with the proposed reshard plan (yes/no)? yes 同意以上配置

      #查看集群信息 
[root@host57 ~]# redis-trib.rb   info 192.168.4.51:6351   
192.168.4.51:6351 (4916e695...) -> 2 keys | 8192 slots | 1 slaves.    #hash slots变多了 
192.168.4.52:6379 (3cb10727...) -> 0 keys | 0 slots | 0 slaves.  #没有hash slots 了
192.168.4.58:6379 (e218620d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.54:6379 (f14c464c...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 7 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 


    2.2 在管理主机执行移除操作
        #查被删除主机的ID
 [root@host57 ~]# redis-trib.rb   check  192.168.4.51:6351 | grep  192.168.4.52
M: 3cb10727bff948e454051ef4a9e45981f5558d8b 192.168.4.52:6379

         #执行删除命令
[root@host57 ~]# redis-trib.rb   del-node  192.168.4.51:6351 3cb10727bff948e454051ef4a9e45981f5558d8b
>>> Removing node 3cb10727bff948e454051ef4a9e45981f5558d8b from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@host57 ~]# 
        #查看集群信息 （没有主机192.168.4.52 了）
[root@host57 ~]# redis-trib.rb   info 192.168.4.51:6351 
192.168.4.51:6351 (4916e695...) -> 2 keys | 8192 slots | 1 slaves.
192.168.4.58:6379 (e218620d...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.54:6379 (f14c464c...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 7 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]#        
       



                   


7月25  nosql_day03

8月1号  上新课程 














创建1台新虚拟机 配置如下：
yum 源
关 selinux  和 firewalld
拷贝软件  mysql-5.7.17.tar
ip 地址  192.168.4.50   
打开第1天的 PPT  及 案例

++++++++++++++++++++++++
第三阶段  系统管理
数据库  关系型数据软件mysql 的使用
               NoSQL 数据库软件 Redis
			   
庞丽静
英语课  数学课  语文课
5   基本课程
5   进阶课程
3   NoSQL
2天 数据库项目

数据库管理员  	DBA  
基础运维              高级运维

培训结构  没有工作经验
DBA1_DAY01

！＠＃￥％……＆×（）


ｃｒｅａｔｅ　　ｔａｂｌｅ　



ｄｅｓｃ　　ｍｙｓｑｌ．ｕｓｅｒ；

1.48

整数
          正数    +17    等效   17
          负数    -12
		  
小数  （带小数点的数）  浮点型  float  或 double
          12.88
			-12.88
1 位数的  范围  0-9
2 位数的  范围  10 - 99 
                                100-999			
		  


11111111111
   整数 .小数 
  18.28             4

xxx.xx

999.99
1088
-999.99
pay    float(5,2)

                      09：00  上课 
					  课前准备  运行50主机的数据库服务 
					  管理员登录 可以看见昨天 练习创建的表 
day01 学习内容回顾：
1 搭建数据库服务器：
					相关概念：什么数据库   数据是什么
					数据库服务软件有哪些？
					mysql 软件介绍
					搭建mysql数据库服务器
								安装软件
								启动服务
								相关参数
								初始配置：使用初始密码登录
													修改密码
													设置密码策略（可选）
2 服务基本使用：
			SQL命令使用规则
			命令分类
			连接mysql服务连接方式
			把数据存储到mysql服务器上的过程？
						1 连接  2  建库  3 建表   
						4 插入记录  5 断开
3  mysql常用数据类型
				字符类型
				数值类型
				枚举类型
				日期时间类型
				         日期时间类型的使用？
						 datetime   timestamp   date    year  time
						 
					      掌握常用的时间函数
						  （mysql 服务自带获取时间的命令）
						  select  curtime() ;    
						  select   curdate ();
						  select  year( now() ) ;
						  select  day(now()) ;
						  select  date(now()) ;
						  select  month(now());
						select  time(now());
						
						  
						  时间函数获取的数据给字段赋值

账号名
注册时间  2020102110000
    
create  table   user (name  char(6) ,password   char(15), 
reg_time   timestamp );


insert into   db1.t9 (name,pasword) values ("tt","123");						  
						  tt   123     2020102110000
						  
datetime 类型和  timestamp类型的赋值的区别？
mysql> create table t10(
    meeting  datetime  ,  party  timestamp
    );

insert into t10(meeting) 
values (20201223223458);

 insert into t10(party) 
values (20190315094516);

						 
DBA1_DAY02
1 表结构
		1.1 约束条件  ： 限制给表头赋值
mysql> create  table  t11(
    name char(10) ,
    class  char(7) default "nsd2007" ,
    age tinyint  unsigned  not null  ,
  likes set("a","b","c","d") not null  default  "a,d"
    );
	
insert into t11(name,age) values ("tom",21);
insert into  t11 values ("john", "nsd2008" ,  27 , "b,c");

mysql> insert into  t11(name,age) values(null,null);
ERROR 1048 (23000): Column 'age' cannot be null

mysql> insert into  t11(name,age) values(null,33);

select  * from   t11  ;

############修改表结构 
mysql> alter  table  db1.t1   添加  
add  age  int , 
add email varchar(30) default "stu@tedu.cn" ;

mysql> alter  table  db1.t1  
add  class  char(7) default "nsd2007" after name;

mysql> alter  table  db1.t1  add  stu_num  int  first ;

mysql> desc  db1.t1 ;

mysql> alter table  db1.t9  drop csnf , drop party ;    删除
mysql>  select  * from  db1.t9;
mysl> desc   db1.t9 ;

mysql> alter table  db1.t9  rename 学生信息表;  修改表名
mysql>  show  tables; 

update   t11   set  name="lucy" where  age=33 ;

alter table  t11  modify  name char(10) not null  default  "" ;  修改类型

mysql> alter table t11 modify 
age tinyint unsigned not null  default 19 ;
		
alter table  t11  
modify age tinyint unsigned not null default 19  after name ;		

alter table t11  
change  name  user char(10) not null  default  "";   修改列名 

alter table t11 change class  banji  varchar(10) not null ;

                         
2 MySQL键值
               普通索引  index  ***
			   唯一索引  unique
			   主         键  primary  key *** 
               外         键  foreign  key   ***
			   全文索引      fulltext 		


创建主键

create table t12(
   name char(10) primary key , class char(7) ) ;

mysql> create table t13( name char(10),class char(7),primary key(name) );

			添加主键 		  
mysql> alter table  t1  add   primary    key (stu_num);					  
					  
					  
update t8  set name="tom" where name is null ;
update t8 set name="john" where name="bob" and likes="game,sleep";					  
alter table  t8 add primary key(name);

复合主键 ：表中2列或2列以上一起做主键
						表中有多条记录时 ，复合主键字段的值不允许同时相同

                    主席   一个人    独裁
                               多个人      众裁

PRI                       PRI 
客户端地址	    服务端口号     访问限制
cip 	                   port                     status 
1.1.1.1             21                         allow 
1.1.1.1             22                         deny 

create   table    t14 ( cip   varchar(15) ,   
port   smallint  , status   enum("allow","deny "), 
primary key(cip ,port ) );

mysql> insert  into   t14  values ("1.1.1.1","21","allow");
Query OK, 1 row affected (0.00 sec)

mysql> insert  into   t14  values ("1.1.1.1","21","deny");
ERROR 1062 (23000): Duplicate entry '1.1.1.1-21' for key 'PRIMARY'
mysql> 
mysql> insert  into   t14  values ("1.1.1.1","22","deny");
Query OK, 1 row affected (0.00 sec)

mysql> 
mysql> insert  into   t14  values ("2.1.1.1","22","deny");
Query OK, 1 row affected (0.00 sec)

mysql> select  * from t14;

删除主键
mysql> alter table  t13 drop primary key ;
mysql> alter table  t14  drop primary key ;


mysql> alter table t14 add primary key(cip,port);  添加复合主键

自增长  插入记录时 让字段通过 自加1的计算结果赋值

x  数值类型  主键 auto_increment 

create  table  t15  ( 
name   char(10) ,  x   int   primary  key     auto_increment);

mysql> select  * from t15;
Empty set (0.00 sec)

mysql> insert into  t15(name) values("tom");
Query OK, 1 row affected (0.01 sec)

mysql> insert into  t15(name) values("lucy");
Query OK, 1 row affected (0.00 sec)

mysql> select  * from t15;



###################################################################################
			日期时间类型的使用？
							类型命令   date  time   year   datetime / timestamp
							时间函数   now()  curtime()  curdate()
							                      year()   day()  date()  month()  time()
DBA1_DAY02 知识点 回顾		
					修改表结构 ：
								约束条件：作用？   包括哪些？ 
								修改表结构： 命令格式？  
															操作命令  add  drop  
															modify  
															change 
															
					mysql 键值（给列加标签）
								键值的种类？
								普通索引 index 的使用？
								主键 primary  key 的使用？
通常把表中唯一标识记录的字段设置为主键[记录编号字段]
	
 id    name   age   class  sex  	
1	     bob    19     nsd2007      boy 
2       tom    21     nsd2007      boy 
3	
4
select  *  from  student  where id >5 ;
  
create table  db1.t16(
id  int  primary  key  auto_increment,
name char(10),  age int ,  class  char(7),
sex  enum("b","g")
 );
 insert into  t16(name,age,class,sex)values("a",19,"nsd2007","g");	
 insert into  t16(name,age,class,sex)values("b",19,"nsd2007","g");
 insert into  t16(name,age,class,sex)values("c",19,"nsd2007","g");	
 
 select  * from  t16;
 select  * from  t16  where   id <= 2 ;
 select  * from  t16  where   id = 2 ;
					外键的使用？
									作用？ 当把表的列设置为外键后，赋值的时候，值
									必须在参考表中指定列的值的范围内选择。
					外键的使用规则？
					创建外键的命令格式？
					
					
	t1  
    name    外键　　－－－－－＞　　ｗ表　　　ｕｓｅｒ　字段
	Ｂｏｂ																						ｊｅｒｒｙ
																											ｊｏｈｎ
																											　ａｌｉｃｅｓ
																											
人事部　
	员工表
	　　
	
   工号 	　　姓名　　　性别　　　部门
	１　　　　王大拿
	
	３　　　　王大锤
	

　工资表
　　
	工号　　　姓名　							工资　
	１　　　　王大拿							５００００
	
	３
创建参考的表
create table  ygtab(yg_id  int  primary key  auto_increment,
name char(10) , sex   enum("m","w") )engine=innodb;

创建有外键的表
create table  	gztab( gz_id   int ,  gz   float(7,2),
foreign  key(gz_id)   references  ygtab(yg_id)
on  update  cascade   on  delete  cascade  )engine=innodb;

mysql> show  create table gztab \G   查看建表命令

mysql> alter table  gztab  drop foreign key gztab_ibfk_1 ;   删除外键
	
添加外键	
mysql> alter table gztab  add foreign key (gz_id) 
references ygtab(yg_id)
on update cascade  on delete cascade ;
	
insert  into  ygtab(name,sex)values("a","w"),("b","m"),("c","w");
select  * from ygtab;

insert  into   gztab  values(1,50000),(3,35000),(2,34500);
select  * from gztab;

insert  into   gztab  values(8,2500); 报错
insert  into  ygtab   values(8，"d","w");
insert  into   gztab  values(8,2500);  存储成功

mysql> update  ygtab set yg_id=16 where name="d";
mysql> select  * from gztab;

mysql> delete from ygtab where  yg_id=16 ;
mysql> select  * from gztab;
	
mysql> insert into gztab values (1,40000), (null , 80000); 不合理

解决不合理 
mysql> delete from gztab where gz_id=1 or gz_id is null ;  删除 
mysql> alter table gztab  add primary key(gz_id);   添加主键 

mysql> insert into gztab values (3,50000);  报错
mysql> insert into gztab values (null,80000);  报错
mysql> insert into gztab values (1,70000);   可以 



############################################################################################

*********DBA1_DAY03***********
数据导入导出
				1.1 检索目录： 导入导出数据是 在指定的目录下查找文件
						查看默认的检索目录   
						                       mysql> show  variables  like  "secure_file_priv";					
						修改检索目录
70  vim /etc/my.cnf						
[mysqld]
secure_file_priv="/myload"
:wq

   71  mkdir /myload
   72  chown  mysql /myload
   73  setenforce 0
   74  systemctl restart mysqld
   
						数据导入命令格式？ load  data 
 load  data  infile   "目录名/文件名"  into   table  库名.表名
fields terminated   by   "分隔符"   lines  terminated  by   "\n" ;

						导入数据的步骤：
								建库 create  database  db3;
								建表 
								create table  db3.user( 
								name     char(50) ,
								password   char(1),
								uid   int ,   gid   int ,  coment  varchar(100),
								homedir    char(80) ,  shell   char(30)
								);						
								拷贝系统文件到检索目录下
mysql> system  cp /etc/passwd  /myload/
mysql> system ls /myload
								导入数据
mysql> load data  infile "/myload/passwd" into table  db3.user
    -> fields  terminated by ":"  lines terminated by "\n" ;
					
								查看数据  select  *  from  db3.user ;											
								添加行号字段 便于对数据做管理
alter  table   db3.user  add   id   int   primary  key  auto_increment first ;
select  *  from  db3.user  where  id <= 3 ;
						
						 数据导出：
									命令格式？
									select 查询命令   into   outfile   "/目录/文件名"；
						
									select 查询命令   into   outfile   "/目录/文件名"  
									fields  terminated by  "列的间隔符号"     
									lines  terminated by     "行的间隔符号" ；

								
mysql> select  *  from db3.user into  outfile  "/myload/a.txt"   ;

							
mysql> select  name,shell  from db3.user where id <= 3   
into  outfile  "/myload/b.txt"    fields  terminated by ":"  ;
						
mysql>  system  ls  /myload/*.txt

管理表记录
				添加    insert  into
 insert into  user 
 values 
 (30, "bob" , "x" , 3003 , 3003  , "test user" ,  "/home/bob" , "/bin/bash") ;				

insert into  user 
 values 
 (40, "bob" , "x" , 3003 , 3003  , "test user" ,  "/home/bob" , "/bin/bash"),
 (41, "bob" , "x" , 3003 , 3003  , "test user" ,  "/home/bob" , "/bin/bash"),
 (48, "bob" , "x" , 3003 , 3003  , "test user" ,  "/home/bob" , "/bin/bash");
 
insert  into   user (name,uid) values ("tom",4004);

insert  into   user (name,password,uid )  values ("toma","x",4004),("tomb","x",4006);

				查看    select 
	
	select   *   from  库.表;      查看每行的所有 列
	
	select    列名    from    库.表	；  查看所有行
	
	select    列名    from    库.表    where    条件 ；

select    name  , uid , shell   , homedir  from   user	;
select    name  , uid , shell   , homedir  from   user  where   shell ="/bin/bash";	
select    *   from   user  where   shell ="/bin/bash";	
	
				休息到  16：15  上课 
				
				修改    update 
	update  库名.表名  set  字段名=值 , 字段名=值 , 字段名=值,…….;
	
	                update  db3.user  set  password="a" , coment="test"   ;
		
    update   库名.表名 
               set 字段名=值,字段名=值,字段名=值   where 条件表达式 ;
               
	mysql> update  user set  password="x" where  id = 1 ;

				
				删除    delete  from
				
				delete from  库.表;    删除所有行  (慎用)
				
				delete from  库.表     where   条件 ;  只删除与条件匹配的行 
				
				
				select  * from  user  where   shell  =  "/bin/bash" ;
				mysql> delete from  user where id >= 30 ;
				
				     
匹配条件   
		基本匹配条件：（适用于 select    update    delete）
		                    数值比较  =   !=   >   >=      <    <=
mysql> select  name , uid , gid  from user where uid = 7;
mysql> select  name , uid , gid  from user where uid = gid ;
mysql> select  *  from user where id <= 7;

							
							字符比较    =   !=
mysql> select name, shell  from user   where  shell  != "/bin/bash";
							
mysql> select name from user where  name = "apache";
Empty set (0.00 sec)

mysql> select name from user where  name = "mysql";
+-------+
| name  |
+-------+
| mysql |
+-------+
							
							范围比较
select name , uid from user where  uid in (2,4,6,8,17);
select name from user where  name in ("sync","bin","root","dn");
select name,shell from user where  shell  not  in  ("/bin/bash","/sbin/nologin");
select  * from user where uid between 1 and 10 ;
     
  
							空   is  null                是空
							非空   is  not  null    不是空
mysql> insert into user(name,uid) values("bob",null) ;
mysql> select id , name ,uid  from  user where  uid  is null ;

mysql> select name , shell from user ；
mysql> select name , shell from user where shell is not null;

							
							逻辑比较 （有多个条件 ）
							逻辑与    and     多个条件必须同时成立
							逻辑或    or        多个条件某个条件成立即可
			
select  *  from   user  where   name="root"   or     uid > 10  or      gid  > 9   
			
select  *  from   user  
where   name="root"   and     uid > 10 and   gid  > 9   ;
	
		
		
		
		高级匹配条件 （适用于   select    update   delete ）
						模糊匹配   like     _    %
						
select  name  from  user where  name like  '%a%' ;				
select  name  from  user where  name like  'a%' ;
select  name  from  user where  name like  '_ _ _ _' ;	
select  name  from  user where  name like  '_ _%_ _' ;
						
						regexp 正则表达式  
						^  $  .  []  |  *
	
select    name   from  	 user  where  name   regexp  '^a';
select    name   from  	 user  where  name   regexp  't$';
select    name   from  	 user  where  name   regexp  '^a|t$';
select    name   from  	 user  where  name   regexp  '^a.*t$';

insert into  user(name)values("99yaya"),("ji7n"),("8y8");
select    name   from  	 user  where  name   regexp  '[0-9]';
mysql> select name from user where  name regexp '^[0-9]';

select    name ,uid   from  	 user  where  uid    regexp  '...';
select    name ,uid   from  	 user  where  uid    regexp  '^...$';
mysql> select name ,uid  from user where uid regexp '^.$'  ;

      
					数学计算（+ - *  /   %）
		select  name , uid  from  db3.user  where   uid  %  2   =  0 ; 
	    select  name , uid  from  db3.user  where   uid  %  2   !=  0 ;	
		mysql> update user  set  uid=uid+1 where id <= 5 ;

alter  table   user  add  age  int  default  21  after  name ;
mysql> select  name , 2020 - age  csnf from user where name="root" ;
                 
				 （    ）提高执行顺序
mysql> select  name , uid , gid ,  (uid+gid)/2  pjz  
from user where  name="bin";
				 			 
				  	 操作查询结果 ：
					         聚集函数 ：mysql 服务自带对数据做统计的命令
mysql> select count(name) from  user;
mysql> select  max(uid)  from  user;
mysql> select  min(uid)  from  user;
mysql> select sum(uid)  from  user;
mysql> select  avg(uid)  from  user;			

select  count(*)  from user; 统计表的总行数
		 
					         排序
mysql> select name,uid from  user where uid >=10 and uid <= 500 
order by uid ;
							 
mysql> select name,uid from  user where uid >=10 and uid <= 500 
order by uid  desc ;
							 
					         分组  group   by   字段名;  
							 
mysql> select shell  from user group by shell ;		查看表中用户使用shell的种类 	
				 
					         限制显示行数 limit 
mysql> select name , uid  , shell from user where  shell="/sbin/nologin";
mysql> select name , uid  , shell from user where  shell="/sbin/nologin" limit  1;
mysql> select name , uid  , shell from user where  shell="/sbin/nologin" limit  3;

mysql> select name , uid  , shell from user where  shell="/sbin/nologin" limit 3 , 3;
								
					     过滤数据  having   条件表达式;
mysql> select  name from user where id > 1 having name="apache" ;
Empty set (0.00 sec)

mysql> select  name from user where id > 1 having name="mysql" ;
mysql> select  name from user where shell = "/sbin/nologin"  having name="root";
						
						 
安装mysql服务图形管理软件之 PHPmyadmin
						图形管理工具有哪些？	
				      
					   
#######DBA1_DAY04
1  用户授权
			1.1 用户授权 :  数据库管理员用户，
                                			在数据库添加用户设置访问权限及连接密码
			         授权命令格式：

grant  访问权限  on  数据库名  to   用户名@"客户端 地址"  
identified by   "密码"  ;
					 
grant  访问权限  on  数据库名  to   用户名@"客户端 地址"  
identified by   "密码"   with  grant    option ;
					 

使用授权用户连接50服务器
50   52   systemctl   stop  firewalld 

host52 ]#   mysql    -h192.168.4.50  -uyaya  -p123qqq...A
mysql> show  database  ;
mysql>  create  database db4;
mysql > 建表   存储记录  查看  删除  修改 
mysql> exit 
host52 ]#

	   
	  
			1.2 授权库mysql库的使用（存储授权信息）

mysql> select  *  from mysql.db where user="yaya" and db="db4" \G						

mysql> update mysql.db set delete_priv="N", drop_priv="N"     
where user="yaya" and db="db4";
	
mysql> flush privileges;
	
mysql> select  *  from mysql.db where user="yaya" and db="db4" \G

   show   grants  for   yaya@"%" ;

			1.3 撤销权限（ 删除权限）    休息到  16：05  
			       命令格式？
	mysql> select  host , user from mysql.user;	
	
	mysql> show grants for mydba@"%" ;
	
    mysql> revoke grant option on *.*  from mydba@"%" ;

     mysql> show grants for mydba@"%" ;
     mysql> revoke all  on *.*  from mydba@"%" ;
     mysql> show grants for mydba@"%" ;
	 
	 mysql> drop user  mydba@"%";


#####root 密码管理（操作系统管理员有 管理权限 ）
			修改本机登录密码
[root@localhost ~]#  mysqladmin -uroot  -p     password     "新密码"
Enter password: 		旧密码	


			恢复本机登录密码（破解数据库root管理本机登录密码）
               root密码忘了怎么办？
1. 停止MySQL服务程序   systemct   stop  mysqld
2. 跳过授权表启动MySQL服务程序
vim /etc/my.cnf
[mysqld]
skip-grant-tables
#validate_password_policy=0
#validate_password_length=6
:wq
systemct   start   mysqld
3. 修改root密码
[root@localhost ~]# mysql
mysql> update mysql.user  set  
authentication_string=password("123qqq...B")  
where  user="root" and host="localhost" ;

mysql> flush privileges;
mysql> exit

4. 以正常方式重启MySQL服务程序
vim /etc/my.cnf
[mysqld]
#skip-grant-tables
validate_password_policy=0
validate_password_length=6
:wq
systemct   restart   mysqld	

使用新密码本机登录
			[root@localhost ~]# mysql    -uroot    -p123qqq...B

            数据备份的相关概念：
					数据备份方式：物理备份/逻辑备份     （备份方式分 ）
												 热备份/冷备份  		（数据库服务的状态分）
					
					数据备份策略：
											完全备份 ： 备份所有数据
									备份新数据：
											增量备份： 备份上次备份后新产生的数据
											差异备份：  备份第1次备份后，所有多出来的新数据
常用备份策略
						完全+差异
						完全+增量
						
				        休息到 17：10  上课 
						
2  完全备份
				物理方式完全备份与恢复
							备份    
							cp   -r  /var/lib/mysql     /mysql.bak
							
							恢复
   92  systemctl  stop mysqld
   94  rm -rf /var/lib/mysql
   95  cp -r /mysql.bak /var/lib/mysql
   98  chown -R mysql:mysql /var/lib/mysql
   99  systemctl  start mysqld
  100  mysql -uroot -p123qqq...B
							
			    逻辑方式完全备份与恢复	
									备份 mysqldump 
							]# mysqldump   -uroot    -p密码    库名  >   /目录名/文件 .sql
[root@localhost ~]# mkdir /mybak
[root@localhost ~]# mysqldump -uroot -p123qqq...B --all-databases > /mybak/all.sql
									
]# mysqldump -uroot -p123qqq...B   db1  > /mybak/db1.sql
								
]# mysqldump -uroot -p123qqq...B   db1  ygtab  > /mybak/db1_ygtab.sql									
									
]# mysqldump -uroot -p123qqq...B   -B db1  db3  > /mybak/twodb.sql
											
[root@localhost ~]# ls   /mybak /*.sql

									
									恢复 mysql 
									mysql   -uroot   -p密码     数据库名   <  /目录名/文件.sql
host50]# scp /mybak/twodb.sql  root@192.168.4.52:/root/									
[root@host52 ~]# mysql -uroot -p123qqq...A  <   /root/twodb.sql
[root@host52 ~]# mysql -uroot -p123qqq...A  -e  'use db1 ; show tables'



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

数据增量备份与恢复
					1  使用mysql服务提供binlog日志文件
							      1.1 掌握binlog日志文件的管理
											1.1.1  binlog日志介绍？
											1.1.2  启用日志文件
											1.1.3  修改日志存放目录的和名字
											1.1.4  手动生成新的日志文件
											1.1.5  删除已有日志文件
											
								  1.2 使用binlog日志文件恢复数据
											1.2.1  查看全部日志内容 ，恢复所有数据
mysqlbinlog  /mylog/plj.000001  |  mysql -uroot  -p密码		
									
									
											1.2.1  查看部分日志内容，恢复指定数据
mysqlbinlog  选项 /mylog/plj.000001  |  mysql -uroot  -p密码									  

host50]#
     reset  master;
     insert  into db3.user(name) values("A"),("B"),("c");
    show  master status;
]# mysqldump  -uroot   -p密码   --flush-logs   db3  user  >  /root/user.sql
show  master status;
insert  into db3.user(name) values("A")
insert  into db3.user(name) values("A1")
insert  into db3.user(name) values("A2")
insert  into db3.user(name) values("A3")

host50]#  scp  /root/user.sql     root@192.168.4.52:/root/
host50]#  scp  /mylog/plj.000002     root@192.168.4.52:/root/

host52]#  mysql  -uroot   -p密码  -e 'drop table  db3.user'
host52]#mysql  -uroot   -p密码  db3  <  /root/user.sql
host52]#myslbinlog  /root/plj.000002   | mysql  -uroot   -p密码 
host52]#  mysql  -uroot   -p密码  -e  ' select  name from  db3.user'



1.2.1  查看部分日志内容，恢复指定数据
mysqlbinlog  选项  /目录名/文件名   |  mysql -uroot  -p密码	
						  
								  
					          选项  
							         通过偏移量的范围查看
							         通过执行命令的时间查看
									 
							日志记录命令格式的管理？
									查看默认格式？
												mysql> show variables like "binlog_format";

									修改记录格式
									]#  vim /etc/my.cnf 
									 [mysqld]
                                     binlog_format="mixed"
									 :wq
									 ]# systemctl  restart  mysqld
									 
									 ]#mysql  -uroot  -p密码  -e   'show variables like  "binlog_format" '
mysql> insert into  db3.user(name) values("w2");
mysql> insert into  db3.user(name) values("w8");
mysql> insert into  db3.user(name) values("w11");
mysql> update  db3.user set password="f" where id <= 5;
mysql> delete from  db3.user where id>=15;

host50 ~]# scp  /mylog/plj.000003   root@192.168.4.52:/opt/	

                          通过偏移量范围恢复数据
							         
[root@host52 ~]# mysqlbinlog --start-position=325  --stop-position=776  /opt/plj.000003 |  
mysql  -uroot -p123qqq...B	

                        通过时间范围恢复数据
[root@host52 ~]# mysqlbinlog --start-datetime="2020/10/26  10:15:43"  
--stop-datetime="2020/10/26  10:16:25"  /opt/plj.000003  |  
mysql  -uroot -p123qqq...B	
		
DBA1_DAY05 

							2  安装软件提供的innobackupex 命令 
								 2.1  安装软件
				
							     2.2 数据完全备份与恢复	
										备份数据 
[root@host50 ~]# innobackupex --user root --password 123qqq...B  /allbak --no-timestamp
[root@host50 ~]# ls   /allbak 

[root@host50 ~]# scp -r /allbak/   root@192.168.4.52:/root/
									
										恢复数据 ，具体步骤如下：  192.168.4.52
													    安装软件 
														停止数据库服务
														清空数据库目录
														准备准备恢复数据										
														拷贝数据
														修改数据库目录的所有者和组用户为mysql
														启动服务
														登录查看数据
   77  systemctl  stop mysqld
   79  rm -rf /var/lib/mysql/*

   83  cat /root/allbak/xtrabackup_checkpoints 
     85  innobackupex  --apply-log  /root/allbak/
   86  cat /root/allbak/xtrabackup_checkpoints 

   89  innobackupex --copy-back /root/allbak/

   93  chown  -R  mysql:mysql /var/lib/mysql
   94  ls -l  /var/lib/mysql
   95  systemctl  start mysqld
   
   96  mysql -uroot -p123qqq...B



   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
							delete  from db3.user ;
							恢复单张表的步骤，如下：
							         删除表空间   （表空间  ？）用来存储表记录的表文件   (表名.ibd) 
							         导出表信息
                                     拷贝表信息文件到数据库目录下
                                     修改表信息文件的所有者及组用户为mysql
							         导入表空间
                                     删除数据库目录下的表信息文件
                                     查看表记录						
mysql> alter table  db3.user discard  tablespace;		
					
[root@host52 ~]# innobackupex  --apply-log --export  /root/allbak/							
[root@host52 ~]# cp /root/allbak/db3/user.{cfg,exp,ibd} /var/lib/mysql/db3/							
[root@host52 ~]# chown -R mysql:mysql /var/lib/mysql/db3/user.*

mysql> alter  table db3.user  import  tablespace;

[root@host52 ~]# rm -rf /var/lib/mysql/db3/user.cfg 
[root@host52 ~]# rm -rf /var/lib/mysql/db3/user.exp

mysql> select  * from db3.user;  


###############################################################

     innobackupex 增量备份  192.168.4.50
		增量备份： 备份上次备份后，新产生的数据
		增量备份命令格式？  见PPT  
		
		
	每个周一都做完全备份
	每个周的 周二到周日 都做增量备份
	
周一    	完全备份   
[root@host50 ~]# innobackupex --user root --password 123qqq...B  /fullbak --no-timestamp

insert  into   db3.user(name) values ("a");存储新数据 

周二       增量备份   
[root@host50 ~]# innobackupex --user root --password 123qqq...B    --incremental  /new1dir
--incremental-basedir=/fullbak   --no-timestamp 


insert  into   db3.user(name) values ("b ");存储新数据

周三      增量备份   
[root@host50 ~]# innobackupex --user root --password 123qqq...B
--incremental   /new2dir   --incremental-basedir=/new1dir    --no-timestamp


[root@host50 ~]# scp  -r /fullbak/  root@192.168.4.52:/opt/
[root@host50 ~]# scp  -r /new1dir/  root@192.168.4.52:/opt/
[root@host50 ~]# scp  -r /new2dir/  root@192.168.4.52:/opt/	
		
		innobackupex 增量 恢复 192.168.4.52
		
		
		命令格式 
		
		 #  innobackupex   --apply-log   --redo-only  目录名    //准备恢复数据
         #  innobackupex   --apply-log   --redo-only  目录名   --incremental-dir=目录名 #合并数据
         #  innobackupex    --copy-back   目录名     //拷贝数据

恢复步骤如下：
				停止数据库服务
				清空数据库目录
				准备恢复数据
				合并数据
				拷贝数据
				修改所有者和组用户为 mysql 
				启动服务
				查看数据


systemctl stop mysqld
rm  -rf /var/lib/mysql/*		
innobackupex --apply-log  --redo-only /opt/fullbak/
innobackupex --apply-log  --redo-only /opt/fullbak/ --incremental-dir=/opt/new1dir
innobackupex --apply-log  --redo-only /opt/fullbak/ --incremental-dir=/opt/new2dir	
innobackupex --copy-back  /opt/fullbak/
chown -R mysql:mysql /var/lib/mysql
systemctl start  mysqld
	
   

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》

++++++DBA2_DAY01 环境准备 					
		一、mysql 主从同步结构
				1.1  mysql 主从同步结构
				1.2 mysql 主从同步工作过程
			    1.3  配置 mysql 主从同步
						1.3.1 配置主数据库服务器  192.168.4.51
									   1  启用binlog 
									   2 用户授权
									   mysql> grant  replication slave on *.*  to repluser@"%" identified by "123qqq...A";
										3 查看日志
										show  master  status ;

						1.3.2 配置从 数据库服务器  192.168.4.52
									 1 指定server_id 
									2 指定主服务器信息  （使用管理员root 登录配置）
	mysql> change master to  master_host="192.168.4.51" , master_user="repluser" ,
    master_password="123qqq...A" ,  master_log_file="master51.000001" ,
    master_log_pos=441 ;
		
	mysql> start slave ;
	mysql> show  slave  status \G
	        Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
			
			
	
把 从服务器 恢复为  独立的数据库服务器
	[root@host52 ~]# cd /var/lib/mysql
    [root@host52 mysql]# ls master.info 
master.info
[root@host52 mysql]# ls relay-log.info 
relay-log.info
[root@host52 mysql]# ls host52-relay-bin.*
host52-relay-bin.000001  host52-relay-bin.000002  host52-relay-bin.index
[root@host52 mysql]# 
[root@host52 mysql]# rm -rf master.info  relay-log.info  host52-relay-bin.* 
[root@host52 mysql]# systemctl  restart   mysqld

[root@host52 mysql]# mysql   -uroot   -p 密码 
mysql> show slave status \G
Empty set (0.01 sec)



								1.3.3  测试配置
												1  在主数据库服务器添加用户，给客户端连接使用
[root@host51 ~]# mysql -uroot -p123qqq...A -e 
'grant all on gamedb.* to yaya@"%" identified by "123qqq...A" '
												
												2  客户端连接主服务器，存储数据
[root@host50 ~]# mysql -h192.168.4.51 -uyaya -p123qqq...A
mysql> show databases;
mysql> show grants;
mysql> create database gamedb; create table gamedb.a(id int);
mysql> insert into  gamedb.a values(110);
mysql> select  * from gamedb.a;
												
												3   在从服务器本机可以查看到和主服务器一样的数据
[root@host52 ~]# mysql -uroot  -p密码  -e  'select * from gamedb.a'
												
												
			
			1.4  主从同步配置排错
							slave_IO_running:  connecting 或 NO 
							
															报错原因： 网络连接问题 
															                    change master  to   指定的主服务器信息不对
															
							Last_IO_Error:  IO线程报错误信息	
							
                            如果是 change master  to   指定的主服务器信息不对 的解决办法
							 stop   slave ;
							           用 change master  to  重新 指定的主服务器信息 
							 start  slave；
                             show  slave   status  \G	


                         Slave_SQL_Running: NoSQL
												报错原因： 从服务器本机的数据比主服务器少 导致
												Last_SQL_Error:  查看sql线程的报错的信息
												
												解决办法：
												stop  slave; 
												      使其有和主服务器上一样的数据
												start  slave ;
												show  slave   status  \G


ERROR 1794 (HY000): Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQ

ERROR 1794 (HY000): Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQ


	
	stop  slave; 
	   drop  database   gamedb; 
	start slave ;
    show  slave status \G




Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.

[root@host52 mysql]# cat auto.cnf 
[auto]
server-uuid=553cd3b5-183e-11eb-9704-000c29e10928
[root@host52 mysql]# 
[root@host52 mysql]# systemctl  restart  mysqld





二、主从同步模式		
						2.1 主从同步结构 模式
											一主一从
											一主多从
											     主从从
											互为主从（主主结构）
 mysql -uroot -p123qqq...A -e 'show  processlist'
											
											
						2.2  主从同步复制 模式
									（从服务器和主数据库服务器数据同步时的工作方式）
						         2.2.1 主从同步复制 模式介绍？
								 2.2.2 配置半同步复制模式
								 
											 查看数据库服务是否允许安装模块
mysql> show  variables  like  "have_dynamic_loading";
											 
											 安装模块
install  plugin  rpl_semi_sync_slave   SONAME  "semisync_slave.so";  安装slave模块
install  plugin  rpl_semi_sync_master   SONAME  "semisync_master.so";安装master模块
		
											 查看已经安装的模块
										 
 select  PLUGIN_NAME,PLUGIN_STATUS  from information_schema.PLUGINS;											 
 
 select  PLUGIN_NAME,PLUGIN_STATUS from information_schema.PLUGINS
 where plugin_name like "%semi%";											 
											 
											 启用模块
set  global rpl_semi_sync_slave_enabled=1;		 启用 slave 模块
set  global rpl_semi_sync_slave_enabled=1;        启用master模块

											查看模块是否启用
 show  variables  like  "rpl_semi_sync_%_enabled";
															
											 
											 永久配置 
vim /etc/my.cnf
[mysqld]
plugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"

rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
							 
###########DBA2_DAY02
mysql主从同步数据存储结构部署 
          1 相关概念
		  2  部署数据读写分离结构
				2.1  搭建mysql一主一从结构
				2.2  配置 读写分离服务器192.168.4.57 
						 1  安装软件
						 2  修改主配置文件 
						 3  配置数据库服务器
						 4  启动maxscale服务，并查看服务信息（端口号 ）
			    2.3  测试配置
						 1  在57本机连接管理服务，查看监控状态
[root@host57 ~]# maxadmin  -uadmin -pmariadb -P4016
MaxScale> list servers
Servers.
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  | Connections | Status              
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.51    |  3306 |           0 | Master, Running
server2            | 192.168.4.52    |  3306 |           0 | Slave, Running
-------------------+-----------------+-------+-------------+--------------------
MaxScale> exit    
[root@host57 ~]# 						 
						 
						 
						 2 测试读写分离的配置
										2.1 客户端50连接57主机可以存取数据
														2.1.1 在主服务器添加用户，给客户端连接使用
mysql> create database bbsdb;

mysql> create table bbsdb.user(name char(10));

mysql> grant select , insert  on bbsdb.* to  plj@"%" 
identified by "123qqq...A";

														2.1.2 客户端50连接57 访问数据库服务
[root@host50 ~]# mysql -h192.168.4.57 -P4006 -uplj -p123qqq...A
mysql> select  * from bbsdb.user;
mysql> insert into bbsdb.user values("bob"),（"tom"）;
mysql> select  * from bbsdb.user;
mysql>exit 
												
														
										 验证读写分离功能
										             在从服务器本机向表里添加1行数据
[root@host52 ~]# mysql -uroot -p123qqq...B -e 'insert into bbsdb.user values("xxhh")'
[root@host52 ~]# mysql -uroot -p123qqq...B -e 'select  * from bbsdb.user'
+------+
| name |
+------+
| bob  |
| tom  |
| xxhh |
+------+
[root@host52 ~]#													 
													 主服务器不会同步从服务器添加的数据
[root@host51 ~]# mysql -uroot -p123qqq...A  -e 'select * from bbsdb.user'

+------+
| name |
+------+
| bob  |
| tom  |
+------+
[root@host51 ~]# 

													 在客户端50连接57 访问数据库服务，测试 
[root@host50 ~]# mysql -h192.168.4.57 -P4006 -uplj -p123qqq...A 
-e  'select  * from bbsdb.user'

[root@host50 ~]# mysql -h192.168.4.57 -P4006 -uplj -p123qqq...A 
-e 'insert into bbsdb.user values("dcmm")'




							排错方法 ： 查看日志 找报错信息
							出错的原因：
							                 maxscale.cnf文件定义要和 实际环境一致
											所有主机的防火墙服务没关
											保证主从同步状态
											
											保证主从数据库服务器 有 maxscale.cnf文件定义的连接用户，
											并有对应的访问权限

二、mysql多实例服务 
		2.1 相关概念 （具体ppt ）
		2.2 配置mysql 多实例服务
				 2.2.1  安装软件
				 2.2.2 创建并编辑主配置文件
				 vim  /etc/my.cnf
				 [mysqld_multi]
				 mysqld=/usr/local/mysql/bin/mysqld_safe
				 mysqladmin=/usr/local/mysql/bin/mysqladmin
				 user=root 
	
				 [mysqld1]   
				 datadir=/dir1
				 port=3307
				 log-error=/dir1/mysqld1.err 
				 pid-file=/dir1/mysqld1.pid 
				 socket=/dir1/mysqld1.sock
				 
				 [mysqld2]
				datadir=/dir2
				port=3308
				log-error=/dir2/mysqld2.error
				pid-file=/dir2/mysqld2.pid
				 socket=/dir2/mysqld2.sock
				 
				启动实例服务 

				mysqld_multi start   1    #启动名称 叫 [mysqld1]
				ss  -utnlp  | grep 3307
				
                mysqld_multi start   2    #启动名称 叫 [mysqld2]
				ss  -utnlp  | grep 3308

               本机连接实例1服务
			   mysql -uroot -p'b>2uH4jDrhh%' -S /dir1/mysqld1.sock 
			   mysql> alter   user   root@"localhost"  identified  by  "123456";
			   mysql> exit
	
			   使用修改的密码登录
			   mysql -uroot -p123456 -S /dir1/mysqld1.sock
			   mysql>
			   
			   本机连接实例2服务
			   mysql -uroot -p'b>2uH4jDrhhxxx' -S /dir2/mysqld2.sock 
			   mysql> alter   user   root@"localhost"  identified  by  "123456";
			   mysql> exit

			   使用修改的密码登录
			   mysql -uroot -p123456 -S /dir2/mysqld2.sock
			   mysql>
			   
			停止实例服务 
[root@host58 ~]# ss -utnlp  | grep mysqld
tcp    LISTEN     0      80       :::3307                 :::*                   users:(("mysqld",pid=68594,fd=16))
tcp    LISTEN     0      80       :::3308                 :::*                   users:(("mysqld",pid=85143,fd=20))
tcp    LISTEN     0      80       :::3309                 :::*                   users:(("mysqld",pid=96063,fd=20))
[root@host58 ~]# 
[root@host58 ~]# mysqld_multi --user=root --password=123456 stop 1
[root@host58 ~]# mysqld_multi --user=root --password=123456 stop 2
[root@host58 ~]# 
[root@host58 ~]# ss -utnlp  | grep mysqld
tcp    LISTEN     0      80       :::3309                 :::*                   users:(("mysqld",pid=96063,fd=20))
[root@host58 ~]# 

							统一排错时间： 步骤
											关闭selinux 
											检查 /etc/my.cnf文件 写对了吗 
											杀进程  killall -9 mysqld
											删除数据库目录  rm  -rf   /目录名 
							                执行启动实例的命令  mysqld_multi  start   数字


##############################################################

##########################################
			DBA2_DAY03   数据分布式存储 服务架构的部署	MyCat 							

			分布式存储：把数据存储在不同的服务器里
			分布式存储架构适用于  数据大量并发写入的环境需求。
	
一、相关概念 ： 见	PPT 
二、配置mycat服务器
         2.1 安装软件
		 2.2  安装文件说明
		 2.3 修改56的配置文件  /usr/local/mycat/conf
				 定义客户端连接时使用的用户名和密码 及 看到的库名
				     server.xml   使用默认配置即可
				 
				 
				 定义把那些表的数据分布式存储
<mycat:schema xmlns:mycat="http://io.mycat/">
				<schema>    定义数据分布式存储的表
				                 <table                />             表名
								<table> …… </table> 
				</schema> 
				
				<dataNode 选项=值,…… />   定义数据库服务器的主机名
				
				<datahost 选项=值,…>……</datahost>  数据库服务器的Ip地址
				
</mycat:schema>
			 
			
			 
		2.4  配置数据库服务器 53 /54/ 55 		 
					运行MySQL数据库服务
					
					创建存储数据的库
					mysql> create database db1;    53主机
                    mysql> create database db2;    54 主机
                    mysql> create database db3;    55 主机
					
					创建连接用户 pljadmin (3台分别添加)
                    grant  all  on  *.*  to    pljadmin@"%" identified by "123qqq...A";
			
      2.5  启动mycat服务
			   32  /usr/local/mycat/bin/mycat start
              33  ls /usr/local/mycat/logs/
              34  cat /usr/local/mycat/logs/mycat.pid 
              35  ss -utnlp  | grep  8066
 
    2.6  在50主机连接 56
             [root@host50 ~]# mysql -h192.168.4.56  -P8066 -uroot  -p123456
             show  databases;
              use   TESTDB;
              show  tables;
              exit;


 
    2.6  在50主机连接 56
             [root@host50 ~]# mysql -h192.168.4.56  -P8066 -uroot  -p123456
             show  databases;
              use   TESTDB;
              show  tables;
              exit;
			  
			  
	排错思路 ：
					1  检查schema.xml 文件 （拷贝其他同学的配置文件启动服务）
					
					2
					加大虚拟机内存 到 1G
					修改主机hostname   host56
					
					3
					重启56虚拟机的操作系统 
					
					4
					查看日志文件   vim  wrapper.log 
  
	
cp  schema.xml    /opt/
rm -rf /usr/local/mycat
tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
mv  mycat  /usr/local/

rm  -rf /usr/local/mycat/conf/schema.xml
cp /opt/schema.xml  /usr/local/mycat/conf
				休息到 15：05 
				
				测试mycat 服务（建表存储数据）
							要根据建表使用的分片规则建表
							 查看表的分片字段名
							 定义分片自动值
							 建表 
							 mysql> use  TESTDB;
mysql> create table employee(
   sharding_id  int ,
   ID int primary key auto_increment,
   name  char(10) , age  tinyint
   );
mysql> insert into employee(sharding_id,name,age)
    -> values
    -> (10000,"a",19),(10000,"a1",17),(10020,"b",31),(10010,"b1",34);

[root@host53 ~]# mysql -uroot -p123qqq...A -e ' select  * from db1.employee'

+-------------+----+------+------+
| sharding_id | ID | name | age  |
+-------------+----+------+------+
|       10000 |  1 | a    |   19                   |
|       10000 |  2 | a1   |   17                  |
+-------------+----+------+------+
[root@host53 ~]# 


######################################################

求模法 mod-long 根据分片字段值与设定的数字求模结果存储数据
	 				 
mysql> use TESTDB;
Database changed
mysql> 
mysql> create table hotnews(
    -> id int  ,   title  char(10) , comment varchar(30), work char(5)
    -> );

mysql> insert into hotnews(id,title,comment,work)
    -> values
    -> (7,"X","xxx","x1"),(7,"y","yyy","y1"),(11,"z","zzz","z1"),(9,"i","iii","i1");
         
	
[root@host53 ~]# mysql -uroot -p123qqq...A -e ' select  * from db1.hotnews'
+------+-------+---------+------+
| id   | title | comment | work |
+------+-------+---------+------+
|    9 | i     | iii     | i1   |
+------+-------+---------+------+
[root@host53 ~]# 
		
		
						添加新库
							]# server.xml
 <user name="root">
               
                <property name="schemas">TESTDB,GAMEDB</property>
</user >							
							
							
	<user name="user">
               
                <property name="schemas">TESTDB,GAMEDB</property>
</user >							
					:wq

					
						添加新表 
				]# vim schema.xml 
<mycat:schema xmlns:mycat="http://io.mycat/">
        
        <schema name="GAMEDB" checkSQLschema="false" sqlMaxLimit="100">
                <table name="user" dataNode="dn1,dn2,dn3" type="global" />                               <table name="tea"  dataNode="dn1,dn2,dn3" rule="mod-long" />                    </schema>
				 <table name="tea"  dataNode="dn1,dn2,dn3" rule="mod-long" />                    </schema>
		</schema>
														
</mycat:schema>						
							重启mycat
[root@host56 conf]# /usr/local/mycat/bin/mycat stop
[root@host56 conf]# /usr/local/mycat/bin/mycat start
[root@host56 conf]# ss -utnlp  | grep  8066
						
							客户端连接 56 查看新库新表
[root@host50 ~]# mysql -h192.168.4.56  -P8066 -uroot  -p123456
mysql> show  databases;
mysql> SHOW TABLES;							
							

							根据表使用的分片规则建表
mysql> use GAMEDB;
mysql> create table tea(id int , name char(10),class  char(10),sex enum("b","g"));
							
							存储数据
insert into  tea (id ,name,class,sex)
values
(9,"a","a","g"),(9,"b","b","g"),(10,"c","c","b"),(10,"c","c","b"),(11,"d","d","b"),
(11,"e","e","b");
							
							在数据库服务器查看数据
[root@host53 ~]# mysql -uroot -p123qqq...A -e ' select  * from db1.tea'

+------+------+-------+------+
| id   | name | class | sex  |
+------+------+-------+------+
|    9 | a    | a     | g    |
|    9 | b    | b     | g    |
+------+------+-------+------+
[root@host53 ~]#							



mysql> create table user (name char(1));
mysql> insert into user(name) values("a"),("b"),("c");

[root@host53 ~]# mysql -uroot -p123qqq...A -e ' select  * from db1.user'

| name |
+------+
| a    |
| b    |
| c    |
+------+
[root@host53 ~]#


#####################################################################################
###########################################
			DBA2_DAY04   MHA  软件 搭建MYSQL服务高可用集群
			集群知识回顾？
			什么集群？多台服务器一起提供相同的服务 
			集群的类型？ 
						LB   负载均衡集群：多台服务平均分摊客户端的访问
						HA   高可用集群：    主备结构，主服务器宕机了，备用主机自动接替主
						服务器集群提供服务，接替过程对客户端是透明的。
			常用的集群服务软件？LVS   HAPROXY   keepalived    nginx 
学习任务如下：
一、相关概念
二、集群拓扑
三、集群环境准备
四、配置管理主机
          4.1  安装软件 mha_manager
		  4.2  创建并编辑主配置文件（****）
		  
		  4.3   创建故障切换脚本，并指定vip地址
		  ]# cd mha; 
		  ]# cp master_ip_failover  /etc/mha/
		  ]# chmod  +x master_ip_failover 
		  
          ]# vim +35 /etc/mha/master_ip_failover 
my $vip = '192.168.4.100/24';  # Virtual IP 
my $key = "1";
my $ssh_start_vip = "/sbin/ifconfig ens33:$key $vip";
my $ssh_stop_vip = "/sbin/ifconfig ens33:$key down";
		:wq
		
		4.4  把vip地址 手动 配置在当前的主数据库服务器上
]# which  ifconfig  ||  yum  -y   install  net-tools 
[root@host51 mha]# ifconfig   ens33:1  192.168.4.100
[root@host51 mha]# 
[root@host51 mha]# ifconfig ens33:1
				 
五、配置数据库服务器		51/52/53
			5.1 添加监控用户
mysql> grant all on  *.*  to  root@"%" identified by "123qqq...A";
			
			5.2 安装软件 
  ]# cd mha/
  ]# yum -y install mha4mysql-node-0.56-0.el6.noarch.rpm
			
			5.3 优化配置 
			       ]# vim /etc/my.cnf
				   [mysqld]
			       relay_log_purge=0                  禁止自动删除中继日志文件
				   
				   启用半同步复制

plugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"

rpl_semi_sync_master_enabled=1
rpl_semi_sync_slave_enabled=1
				   
		         在 52 和 53 主机启用binlog日志
				  
				  log_bin=master52   #52 主机的日志名
				  
				  log_bin=master53   #53主机的日志名
				  
				  在 52 和 53 主机添加从服务器同步数据的连接用户repluser
				   grant  replication slave  on  *.* to  repluser@"%"  identified by "123qqq...A";
			  
			     重启3台主机的数据库服务（重启顺序　　５１　　　５２　　５３　）
				 ｓｙｓｔｅｍｃｔｌ　　　ｒｅｓｔａｒｔ　　ｍｙｓｑｌｄ　
				 
				 查看 52 和 53  slave进程的运行状态
				 ｓｈｏｗ　　ｓｌａｖｅ　　ｓｔａｔｕｓ　＼Ｇ
				 
				 休息到　　１６：１５　
				 
			
六、测试配置（在５７主机测试）
[root@host57 ~]# masterha_check_ssh  --conf=/etc/mha/app1.cnf
[info] All SSH connection tests passed successfully

[root@host57 ~]# masterha_check_repl 　 --conf=/etc/mha/app1.cnf
MySQL Replication Health is OK.


七、启动管理服务
[root@host57 ~]# masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover 
Fri Oct 30 13:12:03 2020 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Fri Oct 30 13:12:03 2020 - [info] Reading application default configuration from /etc/mha/app1.cnf..
Fri Oct 30 13:12:03 2020 - [info] Reading server configuration from /etc/mha/app1.cnf..


[root@host57 ~]# masterha_check_status  --conf=/etc/mha/app1.cnf 
app1 (pid:36560) is running(0:PING_OK), master:192.168.4.51
[root@host57 ~]# 

八、测试高可用
			8.1  在主服务器51 做用户授权 见PPT 
			8.2 客户端连接vip地址访问数据库服务，存取数据
			8.3 测试高可用  具体步骤见PPT
		

九、把宕机的数据库服务器再添加到集群里  具体步骤见ppt 



###########################################
#####################
DBA2_DAY05
			一  PXC集群（使用PXC软件配置MYSQL 高可用集群）（85%操作）
　　　　１．１　使用MHA软件配置		MYSQL 高可用集群	 回顾 ？
					存储数据的mysql服务器必须是ｍｙｓｑｌ主从同步结构
					必须可以ｓｓｈ免密登录
					
					必须有ＶＩＰ地址
					需要人为的把故障的数据库服务器添加到集群里
					
					每次管理服务监视当前的主数据库宕机后，管理服务都会自动关闭，要
				　想让管理服务继续监控当前的主服务器，要人为的启动管理服务。
				
			　　　１.2ｐｘｃ软件介绍及特点　
			　		  1.3  安装软件
						  1.4  修改配置文件 
						            1.4.1  修改  mysqld.cnf	
									1.4.2  修改wsrep.cnf
						  1.5 在任意1台服务器上做初始化集群（71）
								 启动服务
								 初始化密码登录
								  修改root 登录密码
								  添加 sstuser用户
						   1.6 启动另外2台主机的数据库服务
						          systemctl  start  mysql
						          管理员登录(管理员root的密码和71 一样)
						    1.7  可以在所有数据库服务器查看机器状态
							       show  status  like  "%wsrep%";
								   
统一排错步骤：
						检查3台主机的firewalld  和 selinux 是不是都关闭了 
						检查 3台主机的配置文件 mysqld.cnf  　ｗsrep.cnf 修改对了吗
						清空3台主机的数据库目录  rm  -rf  /var/lib/mysql/*
						
			[	rm -rf /etc/percona-xtradb-cluster.conf.d/mysqld_safe.cnf	]	
						
						重新在71 主机执行 初始化集群的操作：
						          启动服务
								  初始化密码登录
								  修改root 登录密码
								  添加 sstuser用户
					    启动另外2台主机的数据库服务
						          systemctl  start  mysql
						
                        查看 71 主机的/var/log/mysqld.log



###########################################################################

                     					

连接池：mysql 服务器接收到客户端的连接请求后，连接池
检查 是否有硬件资源分配给mysql进程使用 ，检查链接用户是否存在								  

mysql管理工具：安装服务软件后提供的命令	
								  
SQL	接口 ： 把命令传递给MYSQL服务处理

分析器： 检测命令的格式和对数据的访问权限


分析器：优化执行的sql 命令

查询缓存 ：划分数据库服务器的物理内存给mysql服务使用
                       存储曾经查找过的数据。

存储引擎 ： 对表做处理的处理器 

文件系统 ： 硬盘					   
					
					常用存储引擎的特点：
							myisam特点:
							
							innodb特点 :
										 
					事务： 连接服务  <  ---------- > 断开连接					 
						
                     事务日志文件： ls /var/lib/mysql/
					 ib_logfile0     ib_logfile1
					 
					事务回滚： 把操作回复到出错之前的状态

ATM 取款   汇款
					1 插卡 输入密码  登录成功 
					查看余额  10w 
					
					2 点转账按钮
					            对方卡号
								对方姓名
								转帐金额
								                  按确定             -
												 结果 成功  钱 ----->对方卡 
												 结果 失败 (汇款的钱 还会回到自己的卡里 ）
				 事务的特点： ACID 
				 
				 建表如何决定表使用哪种存储引擎(innodb  /myisam)
查询访问多的表适合使用myisam存储引擎，节省系统硬件资源。
存储访问多的表适合使用innodb存储引擎，并发访问量大。


锁：解决表的并发访问冲突问题								  


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
##########################		
NoSQL_day01     （192.168.4.50     192.168.4.51）

一  搭建Redis服务器
		1.1  相关概念
				数据库服务软件的分类：
							关系型数据库服务软件   RDBMS
							                     代表性软件： mysql   sql-server   oracle   db2
												 特点：数据存储在硬盘里， 必须先创建数据的表
												               表和表之间可以联动操作
															   
							非关系型数据库服务软件  NoSQL
												代表性软件： Redis   MongoDB    memcached	
												 特点：数据在内存里（部分软件也支持数据永久存储的硬盘）
															  不需要先创建表结构，数据通常是以 key和values形式
															  存储
	
	  1.2 搭建redis服务器
				1.2.1 安装软件
				1.2.2 初始化配置
				1.2.3 本机连接服务存取数据
	  
	 1.3 服务基本管理
	 1.4 常用命令的使用
	 1.5 配置管理  /etc/redis/6379.conf
	  

	  
                守护进程：服务启动后，服务的进程一直在内存里活着等待客户来访问		
                常驻部队
				
				非守护进程： 服务启动后，一段时间内没有接收客户端的访问，服务就休眠，
				等有客户端访问时，第三方服务会唤醒自己提供服务。
				机动部队
				
内存清除策略：存储数据时，内存空间不足的话，如何删除
                               内存里已经存储数据的方法。				
				
	
LRU：最近最少使用 （allkeys-lru   /  volatile-lru ）

LFU：最少使用（allkeys-lfu  / volatile-lfu ）

random ：随机 （volatile-random / allkeys-random ）
	
volatile-ttl	: 删除快要过期的变量 						
							
noeviction  不删除变量							
							
二  LNMP+redis
      2.1   LNMP环境的搭建  50 
	  2.2   搭建新的redis服务器51 ， 给 50的网站服务使用，提供内存存储空间
	 2.3 配置支持redis
			安装提供模块软件包  php-redis-2.2.4.tar.gz
			修改php 配置文件，加载模块
			查看模块
			编写php测试脚本
[root@host50 ~]# cat /usr/local/nginx/html/redis.php
<?php
$redis = new redis();
$redis->connect("192.168.4.51","6351");
$redis->auth("654321");
$redis->set("linux","redhat");
echo $redis->get("linux");   
?>
[root@host50 ~]# 			
			
			客户端访问php脚本
            在redis服务器本机查看数据   




            ############################################################
            一、 搭建redis集群
		   1.1 为什么要搭建集群存储数据：实现数据的分布式存储、数据的自动备份
																		 redis服务的高可用
		   1.2 准备6台redis服务器
		   
		   1.3 在6台redis服务器上分别启用集群功能  （到 09:34 ）
		   
		   1.4  配置管理主机 57 （负责管理集群的主机） 
		  
		    1.5 创建集群 （在管理主机57执行创建集群的命令）
[root@host57 ~]# redis-trib.rb create --replicas 1  
192.168.4.51:6351 192.168.4.52:6352 192.168.4.53:6353 
192.168.4.54:6354 192.168.4.55:6355 192.168.4.56:6356

>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 9cb0136b0bc984bac836e7a7c2002959b5d06ba2 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 48658bd333f3dfe18de78c91915f47e5258bc1f1 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 576d12178a9619e966f31b9d19f8323869cd7152 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: a026cfdd7ed52338bbb3709ac0f2155d6b94f2f8 192.168.4.54:6354
   replicates 576d12178a9619e966f31b9d19f8323869cd7152
S: ff19aac0ffffed1cc4bcae6fd2dc2018bd6738f8 192.168.4.55:6355
   replicates 9cb0136b0bc984bac836e7a7c2002959b5d06ba2
S: a422b0f9bb262785d47671e53bacefaf6608caf9 192.168.4.56:6356
   replicates 48658bd333f3dfe18de78c91915f47e5258bc1f1
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join..
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 9cb0136b0bc984bac836e7a7c2002959b5d06ba2 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
M: 576d12178a9619e966f31b9d19f8323869cd7152 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: a026cfdd7ed52338bbb3709ac0f2155d6b94f2f8 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 576d12178a9619e966f31b9d19f8323869cd7152
S: a422b0f9bb262785d47671e53bacefaf6608caf9 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 48658bd333f3dfe18de78c91915f47e5258bc1f1
S: ff19aac0ffffed1cc4bcae6fd2dc2018bd6738f8 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 9cb0136b0bc984bac836e7a7c2002959b5d06ba2
M: 48658bd333f3dfe18de78c91915f47e5258bc1f1 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@host57 ~]# 

[root@host57 ~]# redis-trib.rb  info 192.168.4.56:6356
[root@host57 ~]# redis-trib.rb  check 192.168.4.56:6356

		  在任意1台redis服务器本机查看机器信息

[root@host51 6379]# redis-cli  -h 192.168.4.51 -p 6351
>cluster  info
>cluste nodes
	  
[root@host51 6379]# cat /var/lib/redis/6379/nodes-6379.conf
	   
	   
			1.6 客户端连接集群中的任意1台服务器存取数据（数据是分布式存储）
]#redis-cli -c -h 192.168.4.56 -p 6356
> set   x  9
> set  y   7
> exit   
]# redis-cli -c -h 192.168.4.54 -p 6354
> keys *
> set  z  22
> get   x
> info  replication

[root@host57 ~]# redis-trib.rb  info 192.168.4.56:6356

			1.7  测试集群的高可用功能
  
PROJECT1_DAY04 
案例1：部署Git版本控制系统 (使用 192.168.2.21  或 192.168.2.31 做git服务器都可以)
	   使用192.168.2.21 做git服务器
	   步骤一：部署SSH协议的版本控制服务器
	   192.168.2.21的配置
			1 安装提供服务的软件 git  
			2 创建工作目录
			3 在工作目录下创建软件仓库
			
	   
	   客户端访问192.168.2.11（登陆web1服务器克隆git仓库，上传网站代码到git服务器。）
		 进到工作目录cd  /var/
		 1 定义上传数据的方式
		 2 定义个人信息（邮箱 和 名字）
		 3 克隆git 服务的版本库的本地 并进入空版本库下 cd  /var/wordpress/
		 4 把本机网页文件拷贝到版本库目录
		 5 添加->提交->上传->密码 
		
	   步骤二：部署Git协议的版本控制服务器
	   (客户端和git服务之间通信使用的是git协议)
		配置git服务器端配置（192.168.2.21）
			1 安装git-daemon软件
			2 修改配置文件(使用默认配置即可)，启动Git服务
		
		
		配置客户端配置（192.168.2.11）
			在web2执行clone等同于是把代码又备份了一份。
			1 进入工作目录 cd  /var/
			2 克隆版本库到本机
	
	步骤三：部署HTTP协议的版本控制服务器 
		（客户端访问git服务器使用http://协议）
		1 配置git服务器 192.168.2.21
		    安装软件包 httpd   gitweb
		    修改配置文件 vim /etc/gitweb.conf
			启动网站服务 httpd
			
		2 配置客户端 （找个有浏览器的客户端访问）
		打开浏览器 输入访问的网址 http://192.168.2.21/git
		
	   
	   
案例2：优化Web服务器 （在192.168.2.11/12/13 在任意1台服务器做优化设置都可以）
1 自定义网站404错误页面
]# vim nginx.conf
error_page  404              /err.html;  去掉注释 修改文件名
:wq

]# /usr/local/nginx/sbin/nginx -s  reload 


[root@localhost ~]# vim  /usr/local/nginx/html/err.html  编写定义的文件
please wait ...  try agine.....
:wq

客户端访问 网站上没有的网页 (2.11的网页目录下 没有b.html文件)
[root@localhost ~]# curl http://192.168.2.11/b.html
please wait ...  try agine.....
[root@localhost ~]# 

2 升级nginx版本，开启status模块 和加密模块
	（在不停止nginx服务的情况下升级nginx软件版本和启用新的功能模块）
	  1  查看当前服务的版本 和 安装配置项
	  2  解压高版本的源码软件并进入源目录
	  3  配置(配置 加载原有的配置项)
	  4  编译
	  5  把低版本的启动命令改名
	  6  把源码目录下objs里的高版本软件提供的启动命令拷贝了 系统安装目录下
	  7  执行平滑升级命令
	  8  查看软件版本
	  
	  9  验证启用的功能模块(状态模块)
	  vim nginx.conf
	   server {

        location /status {  #定义访问模块的目录
                stub_status on;   启用状态模块
			#不限制客户端访问
                #allow 192.168.4.0/24;
                #deny all;
        }
 :wq
 ]# /usr/local/nginx/sbin/nginx -s reload  重启服务
 
[root@localhost nginx-1.17.6]# curl  http://192.168.2.11/status   #查看状态信息
Active connections: 1 
server accepts handled requests
 12 12 12 
Reading: 0 Writing: 1 Waiting: 0 
[root@localhost nginx-1.17.6]# 


步骤三：编写日志切割脚本 （用周期性计划任务+脚本）								    
		(nginx服务日志文件存放的目录安装目录下logs  和日志的类型 错误日志和访问日志)
[root@localhost nginx]# cd /usr/local/nginx/logs/
[root@localhost logs]# ls
access.log  error.log  nginx.pid

访问日志： 记录客户端访问nginx服务的信息	  
错误日志   记录nginx服务的报错信息   
进程pid号文件   存放nginx进程的pid号

[root@localhost logs]# cat /usr/local/nginx/logbak.sh
#!/bin/bash
date=`date +%F`
logpath=/usr/local/nginx/logs
mv $logpath/access.log $logpath/access-$date.log
mv $logpath/error.log $logpath/error-$date.log
kill -USR1 $(cat $logpath/nginx.pid)  # 只创建新的日志文件 不重启服务
[root@localhost logs]# 
[root@localhost logs]# chmod  +x /usr/local/nginx/logbak.sh 

[root@localhost logs]# crontab  -e
03 03  * * 5  /usr/local/nginx/logbak.sh
:wq

步骤四：对页面进行压缩处理
]# vim  nginx.conf

http {
.....
gzip on;                            //开启压缩
gzip_min_length 1000;                //小文件不压缩
gzip_comp_level 4;                //压缩比率
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                    //对特定文件压缩，类型参考mime.types	



	
如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。	

        open_file_cache          max=2000  inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
//文件句柄的有效时间是60秒，60秒后过期
//只有访问次数超过5次会被缓存
} 
  
[root@localhost logs]# /usr/local/nginx/sbin/nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@localhost logs]#


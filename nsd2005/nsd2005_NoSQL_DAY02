1 部署redis集群 
	2.1 配置管理主机192.168.4.57
	         部署脚本运行环境 （使用ruby脚本管理集群）
		rpm -q ruby || yum -y  install ruby
		gem install redis-3.2.1.gem
	         创建ruby脚本
  148  tar -zxvf redis-4.0.8.tar.gz 
  149  cd redis-4.0.8
  151  ls src/*.rb
  152  echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
  153  mkdir /root/bin
  154  cp src/redis-trib.rb /root/bin/
  155  chmod  +x /root/bin/redis-trib.rb 
[root@host57 etc]# redis-trib.rb help
	
		准备创建集群的6台redis服务器

	在主机51到56 安装redis-4.0.8.tar.gz软件并做初始化配置
	修改51-56 redis 使用的端口号和ip (不需要设置密码，具体要求看ppt）		
  
	注意创建集群的主机 不能有数据。

	启用每台redis服务的 集群功能

[root@localhost ~]# vi +815 /etc/redis/6379.conf 
    cluster-enabled  yes        	             		//启用集群功能  
    cluster-config-file  nodes-6379.conf 		//存储集群信息文件
    cluster-node-timeout  5000 			//超时时间(单位毫秒)
:wq

[root@localhost ~]# redis-cli  -h 192.168.4.56 -p 6356 shutdown
[root@localhost ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@localhost ~]# 
[root@localhost ~]# netstat  -utnlp  | grep  redis-server
tcp        0      0 192.168.4.56:16356      0.0.0.0:*               LISTEN      16204/redis-server  
tcp        0      0 192.168.4.56:6356       0.0.0.0:*               LISTEN      16204/redis-server  
[root@localhost ~]# redis-cli  -h 192.168.4.56 -p 6356 
> cluster info
> cluster nodes	

[root@localhost ~]# ls /var/lib/redis/6379/
dump.rdb  nodes-6379.conf
[root@localhost ~]# cat /var/lib/redis/6379/nodes-6379.conf 
492fab7c991c72028956b3e9e8dbad48375c7e5a :0@0 myself,master - 0 0 0 connected
vars currentEpoch 0 lastVoteEpoch 0
[root@localhost ~]#

	在管理主机创建集群（保证  6台Redis服务器没有数据，且都启用了集群功能、关闭selinux 和 firewalld   服务没有连接密码）
	
	[root@host57 ~]# redis-trib.rb   create --replicas 1   192.168.4.51:6351  192.168.4.52:6352 192.168.4.53:6353  192.168.4.54:6354 192.168.4.55:6355 192.168.4.56:6356
	输入 yes
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@localhost ~]#  

在管理主机查看集群的统计信息
[root@host57 ~]# redis-trib.rb  info 192.168.4.52:6352
192.168.4.52:6352 (32d38c4d...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.51:6351 (ea7f699d...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.53:6353 (a84f1b55...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@localhost ~]# 

	在管理主机查看集群的详细信息
[root@host57 ~]# redis-trib.rb  check 192.168.4.52:6352

                客户端访问集群中的任意1台redis服务存取数据。
[root@host50 ~]# redis-cli  -c  -h 192.168.4.53 -p 6353
192.168.4.53:6353> keys *
(empty list or set)
192.168.4.53:6353> set name bob
-> Redirected to slot [5798] located at 192.168.4.52:6352
OK
192.168.4.52:6352> keys *
1) "name"
192.168.4.52:6352> set age 19
-> Redirected to slot [741] located at 192.168.4.51:6351
OK
192.168.4.51:6351> keys *
1) "age"
192.168.4.51:6351> get name
-> Redirected to slot [5798] located at 192.168.4.52:6352
"bob"
192.168.4.52:6352>

统一排错步骤：  
	1 检查如下配置： 
	   6台Redis服务器没有数据，且都启用了集群功能、关闭selinux 和 firewalld  服务

	2 清除当前主机的集群信息：（6台集群都执行）
	  方法1 
	     停止redis服务
	     rm  -rf  /var/lib/redis/6379/*
                      启动redis服务
	 方法2
	连接服务后，执行 cluster   reset
		  执行  flushall

	3 再 在 管理主机执行创建集群的命令


		集群存储数据的工作过程

2 管理集群   
	准备2台新的虚拟机  安装Redis软件并做初始化配置（其他不需要配置）
	向集群添加新的redis服务器
		添加master角色服务器 
休息到 17:00 上课
		添加slave 角色服务器（192.168.4.58） 步骤如下：
			1、 192.168.4.58运行redis服务并启用集群功能
			2、在管理主机把58添加到集群里做55的从数据库服务器
~]# redis-trib.rb add-node --slave 192.168.4.58:6358  192.168.4.52:6352

[root@localhost ~]# redis-trib.rb  info 192.168.4.52:6352
[root@localhost ~]# redis-trib.rb  check  192.168.4.52:6352		        
[root@host50 ~]# redis-cli  -c  -h 192.168.4.58 -p 6358
192.168.4.58:6358> keys *

		移除slave 角色服务器（因为slave 角色的服务占用hash槽，可以直接在管理主机执行删除操作即可）
            把从服务器56 移除集群
		~]# redis-trib.rb  check 192.168.4.52:6352  查看要删除主机的id 
S: 492fab7c991c72028956b3e9e8dbad48375c7e5a 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 32d38c4dfae2f5a0eb5192386ac5d3282dbca134

执行删除命令

[root@host57  ~]# redis-trib.rb  del-node 192.168.4.55:6355  492fab7c991c72028956b3e9e8dbad48375c7e5a

>>> Removing node 492fab7c991c72028956b3e9e8dbad48375c7e5a from cluster 192.168.4.55:6355
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@localhost ~]# 

[root@localhost ~]# redis-trib.rb  info 192.168.4.52:6352192.168.4.52:6352 (32d38c4d...) -> 2 keys | 5462 slots | 0 slaves.
192.168.4.55:6355 (9af0204e...) -> 2 keys | 5461 slots | 1 slaves.
192.168.4.53:6353 (a84f1b55...) -> 2 keys | 5461 slots | 1 slaves.
[OK] 6 keys in 3 masters.
0.00 keys per slot on average.
[root@localhost ~]# 



添加master角色服务器 
		把数据库服务器192.168.4.58 添加到集群里做master服务器
			步骤如下： 
			1 运行Redis服务并启用的集群功能，且内存里没有数据
[root@localhost redis-4.0.8]# netstat -utnlp  | grep redis-server
[root@localhost redis-4.0.8]# rm -rf /var/lib/redis/6379/*
[root@localhost redis-4.0.8]# /etc/init.d/redis_6379 start

			2 在管理主机添加58 到集群 里做主数据库服务器
[root@host57 ~]# redis-trib.rb  add-node 192.168.4.58:6358 192.168.4.52:6352
[root@localhost ~]# redis-trib.rb  info 192.168.4.52:6352
192.168.4.52:6352 (32d38c4d...) -> 2 keys | 5462 slots | 0 slaves.
192.168.4.58:6358 (b93c36f6...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.55:6355 (9af0204e...) -> 2 keys | 5461 slots | 0 slaves.
192.168.4.53:6353 (a84f1b55...) -> 2 keys | 5461 slots | 1 slaves.
[OK] 6 keys in 4 masters.
0.00 keys per slot on average.
[root@localhost ~]# 


			给58主机分配hash槽，步骤如下
				重新分片（给新的主服务器分片hash槽）
[root@host57 ~]# redis-trib.rb  reshard 192.168.4.51:6351  			
How many slots do you want to move (from 1 to 16384)? 4096  分片槽的个数
What is the receiving node ID? e081313ec843655d9bc5a17f3bed3de1dccb1d2b 新的主服务器的id
Please enter all the source node IDs.
Source node #1:all   				//从所有主服务器移除slots
Do you want to proceed with the proposed reshard plan (yes/no)? yes  同意

[root@localhost ~]# redis-trib.rb  info 192.168.4.55:6355
192.168.4.55:6355 (9af0204e...) -> 1 keys | 4096 slots | 0 slaves.
192.168.4.58:6358 (b93c36f6...) -> 3 keys | 4096 slots | 0 slaves.
192.168.4.52:6352 (32d38c4d...) -> 2 keys | 4096 slots | 0 slaves.
192.168.4.53:6353 (a84f1b55...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 7 keys in 4 masters.
0.00 keys per slot on average.
[root@localhost ~]# 

[root@localhost ~]# redis-trib.rb  check 192.168.4.55:6355
M: b93c36f6b5e51121eb6fef9adc33383a35706bac 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)


   		移除master角色服务器，步骤如下：
			1 释放hash槽
[root@host57 ~]# redis-trib.rb  reshard 192.168.4.55:6355
How many slots do you want to move (from 1 to 16384)? 4096  释放槽的个数
What is the receiving node ID? a84f1b5557acdeaa8b959f56d0d1160b175f8d56
Please enter all the source node IDs.  接收槽的主服务器的id
  Type 'all' to use all the nodes as source nodes for the hash slots.
  Type 'done' once you entered all the source nodes IDs.
Source node #1:b93c36f6b5e51121eb6fef9adc33383a35706bac  移除槽的主服务器的id 
Source node #2:done  #接收id 的填写
Do you want to proceed with the proposed reshard plan (yes/no)? yes 同意配置

[root@localhost ~]# redis-trib.rb  info 192.168.4.55:6355
192.168.4.55:6355 (9af0204e...) -> 1 keys | 4096 slots | 0 slaves.
192.168.4.58:6358 (b93c36f6...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.52:6352 (32d38c4d...) -> 2 keys | 4096 slots | 0 slaves.
192.168.4.53:6353 (a84f1b55...) -> 4 keys | 8192 slots | 1 slaves.
[OK] 7 keys in 4 masters.
0.00 keys per slot on average.
[root@localhost ~]# 
			2 把master主机移除集群
[root@localhost ~]# redis-trib.rb  del-node 192.168.4.55:6355 b93c36f6b5e51121eb6fef9adc33383a35706bac

>>> Removing node b93c36f6b5e51121eb6fef9adc33383a35706bac from cluster 192.168.4.55:6355
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@localhost ~]# 
[root@localhost ~]# redis-trib.rb  info 192.168.4.55:6355192.168.4.55:6355 (9af0204e...) -> 1 keys | 4096 slots | 0 slaves.
192.168.4.52:6352 (32d38c4d...) -> 2 keys | 4096 slots | 0 slaves.
192.168.4.53:6353 (a84f1b55...) -> 4 keys | 8192 slots | 1 slaves.
[OK] 7 keys in 3 masters.
0.00 keys per slot on average.
[root@localhost ~]# 
			


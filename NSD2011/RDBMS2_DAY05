DBMS2_DAY05
	回顾MHA配置 MySQL高可用集群的，必须做如下配置
	1 必须有VIP 
	2 数据库服务器之间必须是主从结构
	3 必须配置ssh免密登录
	4 数据会有一定丢失
	5 宕机的服务器要人为添加和保证数据一致
	6 管理服务要重新启动，才能监视新的主服务器

一 PXC MySQL高可用集群
	1.1 pxc软件介绍
	1.2 优点

准备3台新的虚拟机 不需要安装任何数据库服务软件
配置Ip  192.168.4.71/72/73  yum源  关firewalld selinux 
分别拷贝软件 PXC 目录

二配置PXC集群 具体操作如下
	2.1 安装软件3台服务器分别安装

]# cd pxc
]#yum -y install libev-4.15-1.el6.rf.x86_64.rpm 
]#yum -y install percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm 
]#yum -y install qpress-1.1-14.11.x86_64.rpm 
]#tar -xvf /var/ftp/pub/pxc/Percona-XtraDB-Cluster-5.7.25-31.35-r463-el7-x86_64-bundle.tar 

]#yum -y install Percona-XtraDB-Cluster-*.rpm

	2.2 修改配置文件,3台服务器分别修改

~]# cd /etc/percona-xtradb-cluster.conf.d/
]# ls
mysqld.cnf 数据库服务配置文件  
mysqld_safe.cnf   数据库服务进程mysqld的配置参数,不要做修改使用默认配置即可  
wsrep.cnf 集群配置文件


	修改71 主机的server_id 
        
        vim  mysqld.cnf
	     server-id=71
        :wq

	修改72 主机的server_id 
        
        vim  mysqld.cnf
	     server-id=72
        :wq

       修改73 主机的server_id 
        
        vim  mysqld.cnf
	     server-id=73
        :wq

    修改71主机的集群配置文件 
      vim  wsrep.cnf 
8 wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.16
    8.4.73
25 wsrep_node_address=192.168.4.71
27 wsrep_cluster_name=pxc-cluster
30 wsrep_node_name=pxc-cluster-node-71
39 wsrep_sst_auth="sstuser:123qqq...A"
:wq

     修改72主机的集群配置文件 
      vim  wsrep.cnf 
8 wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.16
    8.4.73
25 wsrep_node_address=192.168.4.72
27 wsrep_cluster_name=pxc-cluster
30 wsrep_node_name=pxc-cluster-node-72
39 wsrep_sst_auth="sstuser:123qqq...A"
:wq


     修改73主机的集群配置文件 
      vim  wsrep.cnf 
8 wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.16
    8.4.73
25 wsrep_node_address=192.168.4.73
27 wsrep_cluster_name=pxc-cluster
30 wsrep_node_name=pxc-cluster-node-73
39 wsrep_sst_auth="sstuser:123qqq...A"
:wq


	检查3台主机的firewalld 和 selinux 是否关闭

	在任意1台主机 ，做集群初始化操作（统一在71主机操作）
[root@pxc71 ~]# systemctl  start mysql@bootstrap.service
[root@pxc71 ~]# ls /var/lib/mysql
[root@pxc71 ~]# ss -utnlp  | grep 3306
[root@pxc71 ~]# ss -utnlp  | grep 4567
[root@pxc71 ~]# grep -i "password" /var/log/mysqld.log
[root@pxc71 ~]# mysql -uroot -p'5B*ioXLxkosf'
mysql> alter user root@"localhost" identified by "123456";
mysql> exit
[root@pxc71 ~]# mysql -uroot -p123456
mysql> grant all on *.*  to sstuser@"localhost" identified by "123qqq...A";

建库存储数据
mysql>create database db5;
mysql> create table db5.a(id int primary key auto_increment,name char(10));
mysql> insert into db5.a(name) values("A");
mysql> select  * from db5.a;

在另外2台主机，启动数据库服务，会自动同步71主机的数据，做的是首次全量同步

	     统一先启动72主机的数据库服务
[root@pxc72 pxc]# systemctl  start mysql
[root@pxc72 pxc]# ls /var/lib/mysql
[root@pxc72 pxc]# ss -utnlp  | grep 4567
[root@pxc72 pxc]# ss -utnlp  | grep 3306
		连接服务并存取数据
[root@pxc72 pxc]#mysql  -uroot -p123456
mysql> select * from db5.a;
mysql> insert into db5.a(name) values("B");
	
		启动73主机的数据库服务
[root@pxc73 ~]# systemctl  start mysql
[root@pxc73 ~]# ls /var/lib/mysql
[root@pxc73 pxc]# ss -utnlp  | grep 4567
[root@pxc73 pxc]# ss -utnlp  | grep 3306
连接服务并存取数据
[root@pxc73 pxc]#mysql  -uroot -p123456
mysql> select * from db5.a;
mysql> insert into db5.a(name)values("C");

		另外2台主机也可以查看到73主机存储的新数据
[root@pxc72 pxc]# mysql -uroot -p123456 -e 'select  * from db5.a'

[root@pxc71 pxc]# mysql -uroot -p123456 -e 'select  * from db5.a'



71 初始化失败， 按如下步骤解决
		1 检查 mysqld.cnf 和  wsrep.cnf的修改
		2 rm -rf /var/lib/mysql/*
		3 检查 firewalld   selinux 是否关闭
		4 再次执行初始化

        71 初始化成功， 但72 和 73 启动服务失败，按如下步骤解决
		1 检查 firewalld   selinux 是否关闭
		2 检查 72 和 73  mysqld.cnf 和  wsrep.cnf的修改
		3 分别 在 72 和 72 执行rm -rf /var/lib/mysql/*
		4 分别 在 72 和 72 执行启动服务 

]# yum -y  install  psmisc
        ]# pstree -p  查看mysql服务父进程 pid  并将其kill 
	
     测试PXC集群 (至少要保证有1台是工作着)
[root@pxc71 ~]# systemctl  stop mysql@bootstrap.service

     连接服务查看集群状态  
     mysql -uroot -p123456 
     > show status like  "%wsrep%";
     mysql> insert into db5.a(name)values("D");

[root@pxc71 ~]# systemctl  start mysql
[root@pxc71 ~]# mysql -uroot -p123456 -e  'select  * from db5.a'

[root@pxc72 pxc]# mysql -uroot -p123456 -e 'grant all on *.*  to plj@"%" identified by "123456"'

[root@pxc73 ~]# mysql -uroot -p123456 -e 'select user from mysql.user'
      
[root@mysql50 ~]# mysql -h192.168.4.71 -uplj -p123456   
mysql> insert into db5.a(name)values("AAA");
mysql> exit

[root@mysql50 ~]# mysql -h192.168.4.72 -uplj -p123456 -e 'select * from db5.a'


二mysql存储引擎  在 192.168.4.50 主机做实验
  是MySQL服务软件的组件之一，是表处理器。对表中的数据做访问时，
想如何对表里的数据做处理，由表使用的存储引擎决定。

  MySQL服务的功能组件：
	1 管理工具 安装数据库服务软件后提供的命令
	2 连接池   验证用户连接和系统硬件资源
	3 sql接口  负责把命令传递给mysqld进程处理
	4 分析器  检查命令的语法格式 和 用户的访问权限
	5 优化器  对命令做优化再执行
	6 查询缓存 占用系统的物理内存空间，存储曾经查找过的数据
		   默认情况MySQL服务的查询缓存没有开启
	7 存储引擎 支持多种存储引擎，有各自的存储方式和功能
	8 文件系统 (硬盘)

  查看数据库服务支持的存储引擎
mysql> show  engines；
  
   建表时指定表使用的存储引擎
mysql> create table  gamedb.a(name char(10));使用默认的存储引擎
 mysql> create table gamedb.b(name char(10))engine=memory;
 mysql> create table gamedb.c(age int)engine=myisam; 

 mysql> show create table gamedb.b \G  查看表使用的存储引擎

 mysql> system ls /var/lib/mysql/gamedb/  查看表对应的文件

  修改使用存储引擎
mysql> alter table gamedb.b engine=myisam;
mysql> system ls /var/lib/mysql/gamedb/b*
  修改数据库服务使用的存储
]# vim /etc/my.cnf
[mysqld]
default-storage-engine="myisam"
:wq
]# systemctl  restart mysqld

mysql> create table gamedb.D(user char(1));
mysql> show create table gamedb.D \G



工作常用存储引擎的特点
	myisam存储引擎特点
		支持表级锁
		不支持事务、事务回滚、外键
		每个表有3个文件 表名.frm  表名.MYI  表名.MYD
				表结构    索引信息  表的数据
			       desc 表名  show index select 

	innodb存储引擎特点
		支持行级锁定
		支持事务、事务回滚、外键
		每个表有2个文件 表名.frm     表名.ibd
				desc 表名   show index select

	事务日志文件 记录对innodb存储引擎的表执行的sql命令
ibdata1
ib_logfile0
ib_logfile1

建表时如何决定表使用哪种存储引擎合适？

专业术语：
	加锁的目的： 解决并发访问，写冲突问题。

pc1  			   myisam
		update db3.user set name="tom" where id =1;
	  mysql  同1个库 同一个表 同一个表 做的修改不一样
		update  db3.user set name="jim" where id >=2;
pc2 

	锁粒度：加锁的范围
	    行级锁: 仅仅对被访问的行分别加锁，其他行不加锁
	    表级锁: 只要是对表访问，无论访问的是表的1行还是多行，都会给整张表加锁。

	锁类型？
	    读锁（共享锁）：对表做select访问，MySQL服务会给表加读锁，加读锁后，只允许再连接执行查询访问。

	    写锁（排它锁或互斥锁）：对表做insert delete update 访问,mysql服务会给表加写锁。加了写锁后，再连接的连接读写访问都不可以。
mysql> show status like "table_lock_waited"; 查看锁状态
		
           	   
	    
	事务？ 连接服务器后  执行各自sql操作 断开连接 这个过程被称为事务。

	事务回滚? 把错误的操作恢复到操作错误之前的状态
	事务日志？ ib_logfile0 ib_logfile1 ibdata1
	事务特性？ ACID


tty1 
mysql> set autocommit=off; 
mysql> show variables like "autocommit";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

tty2
mysql> show variables like "autocommit";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | ON    |
+---------------+-------+
1 row in set (0.01 sec)


tty1
mysql> create database db5;
mysql> create table db5.a(id int)engine=innodb;
mysql> desc db5.a;


tty2
mysql> desc db5.a;


tty1
   mysql> insert into db5.a values(1);
   mysql> select  * from db5.a;

tty2
    mysql> select  * from db5.a;  看不到数据

tty1
    mysql> commit ；

tty2
    mysql> select  * from db5.a;  看到数据了

tty1
    mysql> delete from  db5.a;
    mysql> select  * from db5.a;

tty2
    mysql> select  * from db5.a;  看到数据了

tty1 
   mysql> commit; 提交
   mysql> select  * from db5.a;

tty2
   mysql> select  * from db5.a;  看不到数据了

!!!!!!!!!!!!!!!!!!!!!
tty1
    mysql> insert into db5.a values(88);
    mysql> commit;
    mysql> select  * from db5.a;

tty2
   mysql> select  * from db5.a;

tty1
   mysql> insert into db5.a values(99);
   mysql> update db5.a set id=1010;
   mysql> delete from db5.a;

tty2
  mysql> select  * from db5.a;  依然看到的是88 的记录

tty1
  mysql> rollback;
  mysql> mysql> select  * from db5.a;然看到的是88 的记录

tty2
  mysql> select  * from db5.a;  依然看到的是88 的记录



  建表时如何确定表使用哪种存储引擎比较合适？
查询数据select操作多的表适合使用myisam存储引擎，好处 是节省系统的硬件资源。

存储数据insert/delete/update操作多的表适合使用innodb存储引擎，好处并发访问量大



NOsql_day03

1主从复制 （功能类似于MySQL服务的主从同步结构）
	Redis提供存储数据的服务结构，分为主/从 2种角色
	主服务器 接收客户端访问
	从服务器 与主服务器保持数据一致
        支持的服务结构有：一主一从  一主多从 主从从

命令行配置命令（临时配置）
 >slaveof  主服务器Ip   端口号
 
永久配置（永久配置）
]#vim /etc/redis/6379.conf
 slaveof  主服务器Ip   端口号
:wq

 
 > info  replication  查看服务器的角色
 >  slaveof no one 反客为主(临时恢复为 主数据库服务器)
 
*****每台redis服务器默认都是主（master）角色*****
配置一主一从   51 master  52 slave
	具体操作如下：
           51和52 主机都要运行redis服务，并且firewalld 、selinux 关闭
	   在51主机存储并查看数据
	      51> mset x 1 y 2 z 4 j  3
           在52主机指定主服务器的信息
                > slaveof 192.168.4.51 6351
	   在2台主机分别查看复制信息
192.168.4.52:6352> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up

192.168.4.51:6351> info replication
# Replication
role:master
connected_slaves:1
slave0:ip=192.168.4.52,port=6352,state=online,offset=84,lag=1


配置一主多从 诉求：Redis服务器53 也配置为51的slave 服务器 
	     在53主机做如下配置：
		1 要运行redis服务，并且firewalld 、selinux 关闭

		2 在53主机指定主服务器
		> slaveof  192.168.4.51 6351
		> keys *

3 在51 查看复制信息
192.168.4.51:6351> info replication 
# Replication
role:master
connected_slaves:2
slave0:ip=192.168.4.52,port=6352,state=online,offset=1522,lag=1
slave1:ip=192.168.4.53,port=6353,state=online,offset=1522,lag=1

配置主从从 诉求：把Redis服务器 54 配置为 53的 slave服务器。
	   在54主机做如下配置：
		1  要运行redis服务，并且firewalld 、selinux 关闭	
		2  永久配置
		   vim /etc/redis/6379.conf
			    bind  192.168.4.54
			    port  6379
		        282 slaveof  192.168.4.51 6351
		   :wq
		   ]#redis-cli -h 192.168.4.54 -p 6379 shutdown
		   ]#/etc/init.d/redis_6379 start
		   ]#redis-cli -h 192.168.4.54 -p 6379
		   > info  replication

1.2 主从复制的工作过程？（理解 和背诵）

     1.3 配置带验证的主从复制(主设置了连接密码)
	具体配置如下
		1 主服务器设置连接密码
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351
192.168.4.51:6351> config set requirepass 123456
OK
192.168.4.51:6351> auth 123456
192.168.4.51:6351> config rewrite  永久生效

		2 从服务器指定连接密码
vim /etc/redis/6379.conf
282 slaveof  192.168.4.51 6351
289 masterauth  123456
:wq
]# redis-cli -h 192.168.4.52 -p 6352  shutdown
]# /etc/init.d/restart start 
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6352 shutdown
vim  /etc/redis/6379.conf		
282 slaveof 192.168.4.51 6351
289 masterauth 123456
:wq
[root@host52 ~]# /etc/init.d/redis_6379 start
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6352 
192.168.4.52:6352> info replication
# Replication
role:slave
master_host:192.168.4.51
master_port:6351
master_link_status:up


192.168.4.51:6351> info replication  在51主机查看复制信息
# Replication
role:master
connected_slaves:1
slave0:ip=192.168.4.52,port=6352,state=online,offset=6802,lag=0



	1.4 哨兵服务：
	    哨兵服务的功能：服务运行后，监视配置文件中指定的主数据库服务器，发现主服务器监视不到时，把对应的从 升级为主数据库服务器。
         
           诉求：57主机的哨兵服务运行后 ，监视 51 和 52 中的主数据库服务器 51 。
		
***如果主从结构中的主服务器设置了连接密码，也要设置一样的连接密码***
 
     配置从服务器52的连接密码和51一样
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p 6352 
192.168.4.52:6352> config get requirepass 查看
1) "requirepass"
2) ""
192.168.4.52:6352> config set requirepass 123456 设置
192.168.4.52:6352> auth 123456  输入密码
192.168.4.52:6352> config rewrite  报错
192.168.4.52:6352> exit
[root@host52 ~]# tail -1 /etc/redis/6379.conf       
     在57主机配置哨兵服务，具体操作如下：
	1  安装源码redis软件
   61  yum -y install gcc
   62  tar -zxvf /var/ftp/pub/redis-4.0.8.tar.gz 
   63  cd redis-4.0.8/
   64  make && make install  
	
	2 创建并编辑主配置文件 
	  vim /etc/sentinel.conf
bind 192.168.4.57
port 26379
sentinel monitor   myserver  192.168.4.51 6351  1
sentinel auth-pass myserver  123456    
:wq

        3 启动哨兵服务
***关闭所有主机的防火墙和seLinux***
	]# redis-sentinel /etc/sentinel.conf 


	4 测试
	   4.1  停止51主机的redis服务 
[root@host51 ~]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456 shutdown

	   4.2 查看52主机的角色
192.168.4.52:6352> info replication
# Replication
role:master
connected_slaves:0

	   4.3 哨兵服务会自动监视新的主服务器52
	]# cat /etc/sentinel.conf 
.....
sentinel monitor myserver 192.168.4.52 6352 1
sentinel known-slave myserver 192.168.4.51 6351
###########################################################################################################

持久化 把数据永久保存，实现方式有2种
	1 RDB  指定的就是数据库目录下的 dump.rdb 文件
]#grep -i "dbfilename" /etc/redis/6379.conf
dbfilename dump.rdb

]# ls /var/lib/redis/6379/
dump.rdb

从内存保存数据到硬盘的频率
save  900  1
save  300  10
save  60   10000

使用备份的dump.rdb文件恢复数据
  备份文件
	> keys *
	> save
	> exit
]# cp  /var/lib/redis/6379/dump.rdb  /root/  备份
]# ls /root/*.rdb
   恢复数据
	> keys *
	> flushall
        > exit
[root@host50 ~]# redis-cli -h 192.168.4.50 -p端口 shutdown
[root@host50 ~]# cp /root/dump.rdb  /var/lib/redis/6379/
cp：是否覆盖"/var/lib/redis/6379/dump.rdb"？ y

[root@host50 ~]# /etc/init.d/redis_6379 start
[root@host50 ~]# redis-cli -h 192.168.4.50 -p端口
> keys *  可以看到数据

其他也可以使用50的备份文件恢复数据，具体操作如下：
[root@host50 ~]# scp /root/*.rdb  root@192.168.4.51:/opt/

[root@host51 ~]# 做如下操作
]# redis-cli -h 192.168.4.50 -p端口 shutdown
]# cp /opt/dump.rdb  /var/lib/redis/6379/
cp：是否覆盖"/var/lib/redis/6379/dump.rdb"？ y  覆盖

]# /etc/init.d/redis_6379 start
]# redis-cli -h 192.168.4.51 -p端口
> keys *  可以看到数据	

验证存盘频率：设置存盘间隔为120秒且10个key改变数据自动存盘
[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6379   shutdown
[root@host50 ~]# rm -rf  /var/lib/redis/6379/dump.rdb
[root@host50 ~]# vim /etc/redis/6379.conf 
save 900 1
#save 300 10
save 120 10
save 60 10000
:wq
[root@host50 ~]# /etc/init.d/redis_6379 start
[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6379 
> 在2分钟内存储 》= 10个变量
> exit
[root@host50 ~]# ls  /var/lib/redis/6379/dump.rdb

RDB的优缺点？


	2 AOF Append  Only  File（类似于mysql服务的binlog日志文件）

启用线上服务器的Aof 文件
> config  set  appendonly  yes    	//启用
> config  rewrite 
> mset  v1  2  v2 88  v3 5   
> keys *

使用备份的aof文件恢复数据
]# ls   /var/lib/redis/6379/
]# wc -l  /var/lib/redis/6379/appendonly.aof
]# cp  /var/lib/redis/6379/appendonly.aof  /root/
]# ls /root/*.aof

51主机使用AOF文件恢复数据

[root@host50 6379]# scp /root/appendonly.aof  root@192.168.4.51:/var/lib/redis/6379/

]# redis-cli -h 192.168.4.51 -p 6351 -a 123456 shutdown
192.168.4.51~]# vim /etc/redis/6379.conf
appendonly yes
:wq
]#/etc/init.d/redis_6379 start
]#redis-cli -h 192.168.4.51 -p 6351 -a 123456 
> keys *

与aof文件相关的配置项  6379.conf
 
       AOF文件记录写操作的方式?
# appendfsync always    set name bob --->.aof   name=bob--> .rdb 
appendfsync everysec set name bob --->.aof   name=bob--> .rdb
# appendfsync no   set name bob --->.aof  使用存储频率保存到.rdb

      日志重写（合并雷同的命令）
       auto-aof-rewrite-min-size 64mb 触发首次合并	
       auto-aof-rewrite-percentage 100 触发再次合并	

     修复AOF文件
redis-cli  -h 192.168.4.50 -p端口 shutdown
     vim  appendonly.aof
	dfajlfaj;fa
     :wq
 /etc/init.d/redis_6379 start
 ss  -utnlp  | grep  redis-server
 tail /var/log/redis_6379.log 

    ]#redis-check-aof --fix /var/lib/redis/6379/appendonly.aof
      按y
    rm -rf /var/run/redis_6379.pid 

  /etc/init.d/redis_6379 start
  redis-cli  -h 192.168.4.50 -p端口

  aof 的优缺点 ？
 
 工作 中 aof（记录数据对应命令） 和  rdb（存储命令对应的数据） 同时启用



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

三 数据类型
3数据类型 （命令的使用）
	type 变量名    //数据的类型
	3.1 对字符类型数据管理的命令
set 命令 
 
> set y 8  ex 20  过期时间20秒
> set z 11 px 20  过期时间20秒
> set k 3         永不过期

192.168.4.53:6353> set name 99 xx 覆盖赋值，反之不存储变量
192.168.4.53:6353> set name 99 nx 避免重复赋值
> keys *
> get name 

setrange 命令  修改  
192.168.4.53:6353> get tel
"123DEF"

192.168.4.53:6353> SETRANGE tel 0 ABCw
(integer) 6

192.168.4.53:6353> get tel
"ABCwEF"

strlen 命令
> get name
"panglijing"

> strlen name
(integer) 10
  

append 命令  追加
192.168.4.53:6353> get name
"panglijing"
192.168.4.53:6353> APPEND name TARENA
(integer) 16
192.168.4.53:6353> get name
"panglijingTARENA"



  
decr 自减1   
192.168.4.53:6353> set x 11
192.168.4.53:6353> decr x
192.168.4.53:6353> decr x
192.168.4.53:6353> get x

decrby 自定义自减的数字  
192.168.4.53:6353> get x
"9"
192.168.4.53:6353> decrby x 5
(integer) 4
192.168.4.53:6353> decrby x 2
(integer) 2
192.168.4.53:6353> get x
"2"
192.168.4.53:6353>


incr 自加1
 192.168.4.53:6353> set y 3
192.168.4.53:6353> incr y
192.168.4.53:6353> incr y
192.168.4.53:6353> get y
192.168.4.53:6353> 
incrby 自定义自加的数字 
192.168.4.53:6353> get y
192.168.4.53:6353> INCRBY y 7
192.168.4.53:6353> incrby y 10
192.168.4.53:6353> get y
192.168.4.53:6353>
incrbyfloat 可以自己小数
192.168.4.53:6353> get y
192.168.4.53:6353> INCRBYFLOAT y 1.5
192.168.4.53:6353> INCRBYFLOAT y 0.5
192.168.4.53:6353> get y
192.168.4.53:6353>


setbit 位存储 （使用二进制数给变量赋值）节省内存存储空间
	二进制 0 或 1

setbit 变量名  第几位  值   

 1年 365 天     有1M的内存存储空间 能存下牛犇几年的登录信息
 
 setbit nb  1 1
 setbit nb  2 0               
 setbit nb  3 0        
 。。。。
 setbit nb 365 1
 
nb=10011100101........1  (1年365位)

计算机的换算进制
位0|1    字节    1K   1M  1G

8位=1byte    365/8=45字节  （1年占45字节存储）
1024字节=1K  1024/45=22 (1K 存储 22年的登录信息)
1024K=1M     1024*22=22528 （1M可以存储22528年的登录信息）
1024M=1G      1G内存可以存储多少年    

bitcount  统计二进制数里1的个数
192.168.4.52:6352> bitcount nb


	3.2 对列表类型list 数据管理的命令
            列表类型list  使用一个变量名 存储多个值，一个字符队列 ，数据先进后出

lpush  存储数据
lrange 输出数据
llen   查看数据值个数
192.168.4.52:6352> EXISTS tea
192.168.4.52:6352> lpush tea A B C D E 
192.168.4.52:6352> EXISTS tea
192.168.4.52:6352> keys *
192.168.4.52:6352> type tea  查看类型
list
192.168.4.52:6352> lrange tea 0 -1
192.168.4.52:6352> lpush tea I J K
192.168.4.52:6352> lrange tea 0 -1
192.168.4.52:6352> llen tea
(integer) 8


lpop
rpop
> lpop tea  删除列表中的第1个值
> lrange tea 0  -1
> rpop tea  删除列表中的末尾的个值
> lrange tea 0  -1

lpush
rpush
> lpush  tea   W F  插入在列表头部
> lrange tea 0  -1
> rpush tea J K   追加在列表末尾
> lrange tea 0  -1

lrange 输出连续范围内的值
192.168.4.52:6352> lrange tea 0  -1
192.168.4.52:6352> lrange tea -2  -1
192.168.4.52:6352> lrange tea 0 1
192.168.4.52:6352> lrange tea 2 4

lindex  把列表中指定的某1个值输出

192.168.4.52:6352> LINDEX tea 0
192.168.4.52:6352> LINDEX tea -1
192.168.4.52:6352> LINDEX tea 2

lset   修改列表的值
192.168.4.52:6352> lrange tea 0 -1

192.168.4.52:6352> Lset tea 0 tarena
192.168.4.52:6352> Lset tea -2 school

192.168.4.52:6352> lrange tea 0 -1     

       休息到 17:25 
 
	3.3 对hash表类型数据管理的命令
	    一个变量 可以存储多个列 每列对应一个值
hset  一次存储1列
> hset site tarena  www.tedu.cn
> hset site baidu www.baidu.com
> keys *
> type site
hmset 一起存储多列 hmset site jd www.jd.com  163 www.163.com

hkeys 显示列名  192.168.4.52:6352> hkeys site
hvals 显示值   192.168.4.52:6352> hvals site

hgetall 显示列名+值 192.168.4.52:6352> hgetall site

hget  仅显示指定列的值 192.168.4.52:6352> hget site jd 
                       192.168.4.52:6352> hget site 163
hmget 一起显示多列的值hmget site jd 163 tarena 
hdel 删除列
192.168.4.52:6352> hdel site jd
192.168.4.52:6352> hdel site 163 baidu
192.168.4.52:6352> hkeys site

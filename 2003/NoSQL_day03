	1 配置Redis主从服务 
		主数据库服务器： 被客户端访问的服务器
		从数据库服务器： 自动到主服务器通同步数据
		结构模式：
			一主一从
			一主多从
			  主从从

		涉及到命令 
			> info replication #查看复制信息
			> slaveof 主服务器IP  端口号  #指定主服务器
			> slaveof no one    #临时恢复为主服务器

		配置文件里配置项
		]# vim /etc/redis/6379.conf
			slaveof 主服务器IP  端口号
		:wq

		
		主从同步工作过程？


		思考题：redis 能不能配置主主结构


		带验证的主从同步配置（主服务器有连接密码）
		  给主服务器设置连接密码
			]# redis-cli  -h ip地址 -p 端口 shutdown
			]#  vim +501 /etc/redis/6379.conf
				requirepass 123456  连接密码
			  :wq
			]# /etc/init.d/redis_6379 start

		 从数据库服务器指定主的连接密码
			
			]# redis-cli  -h ip地址 -p 端口 shutdown
			]#  vim  /etc/redis/6379.conf
				masterauth 主机服务器密码
			  :wq
			]# /etc/init.d/redis_6379 start
		
	2 哨兵服务 （监视主从同步结构中的主服务器，当发现主服务器宕机，会自动把对应的slave服务器设置为master服务器）

			2.1 配置带验证的主从从结构

		    			2.2 配置哨兵服务器192.168.4.56
				1  安装源码的redis软件
					]# yum -y  install gcc
					]# tar -zxvf  redis-4.0.8.tar.gz
					]# cd redis-4.0.8
					]# make  
					]# make install

				2  创建并编辑哨兵服务的主配置文件
					]# vim  /etc/sentinel.conf
				bind 192.168.4.56
				sentinel monitor  redisserver  192.168.4.51 6351  1
				sentinel auth-pass redisserver 123456
					:wq

				3  启动哨兵服务
	[root@host56 ~]# redis-sentinel /etc/sentinel.conf #启动信息输出到当前终端显示
			
				4  查看服务状态
1469:X 08 Jul 22:27:49.196 # +monitor master redisserver 192.168.4.51 6351 quorum 1
1469:X 08 Jul 22:27:49.208 * +slave slave 192.168.4.53:6353 192.168.4.53 6353 @ redisserver 192.168.4.51 6351
				5 测试配置
					把主服务器的redis服务停止

]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456 shutdown

					在对应的slave服务器查看复制信息（发现从服务器的角色自动变成了master）

192.168.4.53:6353> info replication
# Replication
role:master
192.168.4.53:6353> mset x1 8  x2 aa x3 bb x4  cc

				6 把宕机的master主机的redis服务启动，会自动做当前主服务器的slave 

]# /etc/init.d/redis_6379 start
]# redis-cli -h 192.168.4.51 -p 6351 -a 123456
192.168.4.51:6351> config set masterauth 123456  #命令行指定主服务器的密码
OK
192.168.4.51:6351> config rewrite #把命令行的设置保存到文件里
OK
192.168.4.51:6351> keys *

				7 哨兵服务会自动监视当前的master服务器。
[root@host56 ~]# cat /etc/sentinel.conf 
......
sentinel monitor redisserver 192.168.4.53 6353 1
......


	3 数据持久化  （重点 难点）
		支持数据永久存储（redis服务，是先把数据存储到内存里，然后在服务运行过程中，定期将内存里的数据 保存到硬盘）

		数据持久化的方式： 
			1  RDB(默认) 指定就是数据库目录下的 dump.rdb文件
			   RDB介绍
			   相关的配置项
			   使用rdb文件恢复数据
                                  把dump.rdb文件拷贝的其他的存储设备 就是数据备份
				  加载备份的dump.rdb文件启动redis服务就是数据恢复

[roothost55 6379]#备份数据		
[roothost55 6379]# cp /var/lib/redis/6379/dump.rdb /opt/
[roothost55 6379]# scp /opt/dump.rdb  root@192.168.4.58

				  
                     [roothost58 ~ ]# 恢复数据
				停止redis服务
				清空数据库目录  
				拷贝备份的dump.rdb 到数据库目录下
				启动redis服务
				访问服务查看数据

                 验证存盘频率实验
				]# redis-cli  -h 192.168.4.55  -p 6355   shutdown

]# vim /etc/redis/6379.conf
save 900 1
save 120 10
save 60 10000
:wq
	
[root@localhost 6379]# ls
dump.rdb
[root@localhost 6379]# rm -rf /var/lib/redis/6379/dump.rdb 
[root@localhost 6379]# 
[root@localhost 6379]# ls /var/lib/redis/6379/
[root@localhost 6379]# 	

[root@localhost 6379]# /etc/init.d/redis_6379  start
Starting Redis server...
[root@localhost 6379]#		
		测试方法：
			访问服务在在存盘时间内有对应个数的变量产生 会创建dump.rdb文件保存数据			
		
		RDB的优点与缺点？


        2  AOF（也是实现数据永久存储的方式，默认没有开启）
			       AOF介绍？

			       启用aof文件
[root@host55 6379]# redis-cli  -h 192.168.4.55  -p 6355 
192.168.4.55:6355> config set appendonly yes
OK
192.168.4.55:6355> config rewrite
OK
192.168.4.55:6355> exit
[root@localhost 6379]# pwd
/var/lib/redis/6379
[root@localhost 6379]# ls
appendonly.aof  dump.rdb
[root@localhost 6379]# cat appendonly.aof 
			       

			使用备份的aof恢复数据
host55 ~]# scp  /var/lib/redis/6379/appendonly.aof  root@192.168.4.58:/opt/


[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6379 shutdown
[root@host58 ~]# rm -rf /var/lib/redis/6379/*
[root@host58 ~]# cp /opt/appendonly.aof  /var/lib/redis/6379/
[root@host58 ~]# ls /var/lib/redis/6379/
appendonly.aof
[root@host58 ~]# 
[root@host58 ~]# vim /etc/redis/6379.conf
appendonly yes
appendfilename "appendonly.aof"
:wq
[root@host58 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6379 
192.168.4.58:6379> keys *

#################DAY02 之 Redis集群 （分布式存储高可用集群）
	1 创建集群
		1.1 集群环境准备
			准备6台redis服务器（51-56），运行其他主机Redis服务，不需要设置连接密码，且要清空内存（在没有创建成集群之前内存里不允许数据）

			准备1台机器做管理主机57
			准备1台做客户端50

		1.2 创建集群
			1.2.1 配置管理主机  57
				1.2.1.1 部署ruby脚本运行环境
[root@mgm57 ~]# yum -y install ruby
[root@mgm57 ~]# gem install upload/redis-3.2.1.gem 
Successfully installed redis-3.2.1
Parsing documentation for redis-3.2.1
Installing ri documentation for redis-3.2.1
1 gem installed
[root@mgm57 ~]# 

				1.2.1.2 创建ruby脚本
[root@mgm57 ~]# tar -zxvf upload/redis-4.0.8.tar.gz
[root@mgm57 ~]# ls
anaconda-ks.cfg  redis-4.0.8  upload
[root@mgm57 ~]# 
[root@mgm57 ~]# cd redis-4.0.8/
[root@mgm57 redis-4.0.8]# 
[root@mgm57 redis-4.0.8]# ls src/*.rb
src/redis-trib.rb
[root@mgm57 redis-4.0.8]# echo  $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
[root@mgm57 redis-4.0.8]# 
[root@mgm57 redis-4.0.8]# ls /root/bin
ls: cannot access /root/bin: No such file or directory
[root@mgm57 redis-4.0.8]# 
[root@mgm57 redis-4.0.8]# mkdir /root/bin
[root@mgm57 redis-4.0.8]# 
[root@mgm57 redis-4.0.8]# cp  src/redis-trib.rb /root/bin/
[root@mgm57 redis-4.0.8]# 
[root@mgm57 redis-4.0.8]# ls /root/bin/
redis-trib.rb
[root@mgm57 redis-4.0.8]# chmod +x  /root/bin/redis-trib.rb 
[root@mgm57 redis-4.0.8]#


				1.2.1.3 查看脚本的帮助信息
[root@mgm57 ~]# redis-trib.rb help
Usage: redis-trib <command> <options> <arguments ...>

  create          host1:port1 ... hostN:portN
                  --replicas <arg>
  check           host:port
  info            host:port
  fix             host:port
                  --timeout <arg>
  reshard         host:port
                  --from <arg>
                  --to <arg>
                  --slots <arg>
                  --yes
                  --timeout <arg>
                  --pipeline <arg>
  rebalance       host:port
                  --weight <arg>
                  --auto-weights
                  --use-empty-masters
                  --timeout <arg>
                  --simulate
                  --pipeline <arg>
                  --threshold <arg>
  add-node        new_host:new_port existing_host:existing_port
                  --slave
                  --master-id <arg>
  del-node        host:port node_id
  set-timeout     host:port milliseconds
  call            host:port command arg arg .. arg
  import          host:port
                  --from <arg>
                  --copy
                  --replace
  help            (show this help)

For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.
[root@mgm57 ~]# 


			1.2.2 配置redis服务器 (51-56)
				1.2.2.1 查看是否启用集群功能(以51为例)
[root@host51 ~]# redis-cli  -h 192.168.4.51  -p 6351
192.168.4.51:6351> cluster info
ERR This instance has cluster support disabled  # 没有启用
192.168.4.51:6351> 
192.168.4.51:6351> exit
[root@host51 ~]# 
[root@host51 ~]# redis-cli  -h 192.168.4.51  -p 6351 shutdown
[root@host51 ~]# vim /etc/redis/6379.conf
815 cluster-enabled yes
823 cluster-config-file nodes-6379.conf
829 cluster-node-timeout 5000
:wq
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# 
[root@host51 ~]# netstat -utnlp  | grep  redis-server
tcp        0      0 192.168.4.51:16351      0.0.0.0:*               LISTEN      14734/redis-server  
tcp        0      0 192.168.4.51:6351       0.0.0.0:*               LISTEN      14734/redis-server  
[root@host51 ~]#

[root@host51 ~]# redis-cli  -h 192.168.4.51  -p 6351 
192.168.4.51:6351> cluster info
cluster_state:fail
cluster_slots_assigned:0
cluster_slots_ok:0
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:1
cluster_size:0
cluster_current_epoch:0
cluster_my_epoch:0
cluster_stats_messages_sent:0
cluster_stats_messages_received:0
192.168.4.51:6351> 
192.168.4.51:6351> exit
[root@host51 ~]# 
[root@host51 ~]# ls /var/lib/redis/6379/
dump.rdb  nodes-6379.conf
[root@host51 ~]# cat /var/lib/redis/6379/nodes-6379.conf 
9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 :0@0 myself,master - 0 0 0 connected
vars currentEpoch 0 lastVoteEpoch 0
[root@host51 ~]#
[root@host51 ~]# setenforce 0
[root@host51 ~]# systemctl  stop firewalld

			1.2.3 创建集群 57
[root@mgm57 ~]# redis-trib.rb  create --replicas 1  192.168.4.51:6351 192.168.4.52:6352 192.168.4.53:6353 192.168.4.54:6354 192.168.4.55:6355 192.168.4.56:6356 
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354
   replicates bbece6d690946a6d17996139ac54f36369964784
S: b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355
   replicates 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79
S: 4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356
   replicates b3f4d8421ffd93c61ae4b0f310cf7196fe873e80
Can I set the above configuration? (type 'yes' to accept): yes 同意

>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354
   slots: (0 slots) slave
   replicates bbece6d690946a6d17996139ac54f36369964784
S: 4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356
   slots: (0 slots) slave
   replicates b3f4d8421ffd93c61ae4b0f310cf7196fe873e80
S: b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79
M: b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]# 

			1.2.4 查看集群信息
				在管理主机57 查看集群信息
[root@mgm57 ~]# redis-trib.rb  info 192.168.4.52:6352  #统计信息
192.168.4.52:6352 (b3f4d842...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (bbece6d6...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.51:6351 (9830748d...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 

[root@mgm57 ~]# redis-trib.rb  check 192.168.4.52:6352 #查看详细
>>> Performing Cluster Check (using node 192.168.4.52:6352)
M: b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79
S: a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354
   slots: (0 slots) slave
   replicates bbece6d690946a6d17996139ac54f36369964784
S: 4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356
   slots: (0 slots) slave
   replicates b3f4d8421ffd93c61ae4b0f310cf7196fe873e80
M: 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mgm57 ~]#


			        在任意1台redis服务本机查看集群信息（已52为例）
[root@host52 ~]# cat /var/lib/redis/6379/nodes-6379.conf 
b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352@16352 myself,master - 0 1594119195000 2 connected 5461-10922
bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353@16353 master - 1594119201687 1594119195074 3 connected 10923-16383
b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355@16355 slave 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 1594119201687 1594119194068 5 connected
a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354@16354 slave bbece6d690946a6d17996139ac54f36369964784 1594119201687 1594119194674 4 connected
4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356@16356 slave b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 1594119201687 1594119195000 6 connected
9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351@16351 master - 1594119201687 1594119195580 1 connected 0-5460
vars currentEpoch 6 lastVoteEpoch 0
[root@host52 ~]# 				
[root@host52 ~]# redis-cli -h 192.168.4.52 -p 6352
192.168.4.52:6352> cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:2
cluster_stats_messages_ping_sent:729
cluster_stats_messages_pong_sent:687
cluster_stats_messages_meet_sent:4
cluster_stats_messages_sent:1420
cluster_stats_messages_ping_received:686
cluster_stats_messages_pong_received:733
cluster_stats_messages_meet_received:1
cluster_stats_messages_received:1420
192.168.4.52:6352> 
192.168.4.52:6352> cluster nodes
b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352@16352 myself,master - 0 1594119676000 2 connected 5461-10922
bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353@16353 master - 0 1594119675918 3 connected 10923-16383
b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355@16355 slave 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 0 1594119675000 5 connected
a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354@16354 slave bbece6d690946a6d17996139ac54f36369964784 0 1594119674506 4 connected
4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356@16356 slave b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 0 1594119676526 6 connected
9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351@16351 master - 0 1594119675514 1 connected 0-5460
192.168.4.52:6352> exit



重新创建集群的方法：
	停止redis服务
	清空数据库目录 rm -rf /var/lib/redis/6379/*
        启动服务
	执行创建集群的命令

    			1.2.5 访问集群，存取数据
[root@host50 ~]# redis-cli -c -h 192.168.4.52 -p 6352
192.168.4.52:6352> keys *
(empty list or set)
192.168.4.52:6352> set x 1
-> Redirected to slot [16287] located at 192.168.4.53:6353
OK
192.168.4.53:6353> keys *
1) "x"
192.168.4.53:6353> set y 2
OK
192.168.4.53:6353> keys *
1) "y"
2) "x"
192.168.4.53:6353> set z 3
-> Redirected to slot [8157] located at 192.168.4.52:6352
OK
192.168.4.52:6352> keys *
1) "z"
192.168.4.52:6352> get x
-> Redirected to slot [16287] located at 192.168.4.53:6353
"1"
192.168.4.53:6353> exit
[root@host50 ~]#
 
		从服务器会自动同步主服务器的数据
[root@host50 ~]# redis-cli -c -h 192.168.4.54 -p 6354

192.168.4.54:6354> info replication
# Replication
role:slave
master_host:192.168.4.53
master_port:6353
master_link_status:up
.....
.....
192.168.4.54:6354> keys *
1) "y"
2) "x"

			测试Redis集群的高可用功能
			停止任意主服务器的redis服务，对应的从会自动升级为主
[root@host51 ~]# redis-cli  -h 192.168.4.51  -p 6351  shutdown
[root@host51 ~]# netstat  -utnlp  | grep redis-server

[root@mgm57 ~]# redis-trib.rb  info 192.168.4.52:6352
192.168.4.52:6352 (b3f4d842...) -> 1 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (bbece6d6...) -> 2 keys | 5461 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 0 keys | 5461 slots | 0 slaves.
[OK] 3 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#
[root@host50 ~]# redis-cli -c -h 192.168.4.55 -p 6355
192.168.4.55:6355> keys *
(empty list or set)
192.168.4.55:6355> set i 9
-> Redirected to slot [15759] located at 192.168.4.53:6353
OK
192.168.4.53:6353> set j 8
-> Redirected to slot [3564] located at 192.168.4.55:6355
OK
192.168.4.55:6355> set k 7
-> Redirected to slot [7629] located at 192.168.4.52:6352
OK
192.168.4.52:6352> exit
[root@host50 ~]# 

			当原master启动后 会自动配置为当前master的slave
[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.51:16351      0.0.0.0:*               LISTEN      14795/redis-server  
tcp        0      0 192.168.4.51:6351       0.0.0.0:*               LISTEN      14795/redis-server  
[root@host51 ~]#

[root@host51 ~]# redis-cli  -h 192.168.4.51  -p 6351
192.168.4.51:6351> info replication
# Replication
role:slave
master_host:192.168.4.55
master_port:6355
master_link_status:up
。。。。
192.168.4.51:6351> keys *
1) "j"
192.168.4.51:6351> 

                			1.2.6 集群的工作过程 （难点、重点）
				
				

	2 管理集群
		2.1 向集群添加新的redis服务器
			添加master角色的服务器（192.168.4.58）
				1 配置Redis服务器
					运行redis服务并启用了集群配置
					
				2 配置管理主机 57
					2.1 向集群添加master角色服务器
[root@mgm57 ~]# redis-trib.rb add-node  192.168.4.58:6379 192.168.4.54:6354
>>> Adding node 192.168.4.58:6379 to cluster 192.168.4.54:6354
>>> Performing Cluster Check (using node 192.168.4.54:6354)
M: a1a2b3db19b967c2da3a0e9c58292747a2dfef61 192.168.4.54:6354
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
M: b948d8efcb168c6018a014a2c2f40c9d09ff17c6 192.168.4.55:6355
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 4337da5f3fc35d942dd1044a0ff521b352f853ac 192.168.4.56:6356
   slots: (0 slots) slave
   replicates b3f4d8421ffd93c61ae4b0f310cf7196fe873e80
S: 9830748d562c8f2cbe5d80667ec5bc4a4ca91c79 192.168.4.51:6351
   slots: (0 slots) slave
   replicates b948d8efcb168c6018a014a2c2f40c9d09ff17c6
S: bbece6d690946a6d17996139ac54f36369964784 192.168.4.53:6353
   slots: (0 slots) slave
   replicates a1a2b3db19b967c2da3a0e9c58292747a2dfef61
M: b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Send CLUSTER MEET to node 192.168.4.58:6379 to make it join the cluster.
[OK] New node added correctly.
[root@mgm57 ~]# 
[root@mgm57 ~]# redis-trib.rb info 192.168.4.54:6354
192.168.4.54:6354 (a1a2b3db...) -> 4 keys | 5461 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 2 keys | 5461 slots | 1 slaves.
192.168.4.58:6379 (14e88d20...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.52:6352 (b3f4d842...) -> 2 keys | 5462 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#
					2.2 给新的master分配hash slots
[root@mgm57 ~]# redis-trib.rb reshard 192.168.4.54:6354

How many slots do you want to move (from 1 to 16384)? 4096
What is the receiving node ID? 14e88d207534d53e02acbf2252ca97a2644f2e40
Source node #1:all   
Do you want to proceed with the proposed reshard plan (yes/no)? yes

[root@mgm57 ~]# redis-trib.rb info 192.168.4.54:6354
192.168.4.54:6354 (a1a2b3db...) -> 3 keys | 4096 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.58:6379 (14e88d20...) -> 2 keys | 4096 slots | 0 slaves.
192.168.4.52:6352 (b3f4d842...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#

[root@mgm57 ~]# redis-trib.rb check 192.168.4.54:6354

M: 14e88d207534d53e02acbf2252ca97a2644f2e40 192.168.4.58:6379
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)

#######################################################################################3

		2.2 把服务器从集群移除
			移除slave角色的服务器（直接移除即可，因为不占用hash slots）
[root@mgm57 ~]# redis-trib.rb check 192.168.4.51:6351  #查看主机ID 

[root@mgm57 ~]# redis-trib.rb del-node 192.168.4.51:6351
 bbece6d690946a6d17996139ac54f36369964784
>>> Removing node bbece6d690946a6d17996139ac54f36369964784 from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@mgm57 ~]# 

[root@mgm57 ~]# redis-trib.rb info 192.168.4.54:6354
192.168.4.54:6354 (a1a2b3db...) -> 3 keys | 4096 slots | 0 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.59:6379 (0653e3fc...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (b3f4d842...) -> 2 keys | 4096 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]#	
				  
			  移除master角色的服务器
				1 释放占用的hash slots
[root@mgm57 ~]# redis-trib.rb reshard 192.168.4.54:6354
How many slots do you want to move (from 1 to 16384)? 4096  释放槽的个数
What is the receiving node ID? b3f4d8421ffd93c61ae4b0f310cf7196fe873e80 接收槽，mster主机的id 

Source node #1:b3f4d8421ffd93c61ae4b0f310cf7196fe873e88 释放槽master服务器的id 
Source node #2:done 结束id值的填写
Do you want to proceed with the proposed reshard plan (yes/no)? yes 同意

[root@mgm57 ~]# redis-trib.rb info 192.168.4.54:6354
192.168.4.54:6354 (a1a2b3db...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.59:6379 (0653e3fc...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (b3f4d842...) -> 5 keys | 8192 slots | 1 slaves.
[OK] 8 keys in 4 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 
				2 移除master主机
[root@mgm57 ~]# redis-trib.rb  del-node 192.168.4.52:6352 a1a2b3db19b967c2da3a0e9c58292747a2dfef61
>>> Removing node a1a2b3db19b967c2da3a0e9c58292747a2dfef61 from cluster 192.168.4.52:6352
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@mgm57 ~]# 
				
[root@mgm57 ~]# redis-trib.rb info 192.168.4.52:6352
192.168.4.52:6352 (b3f4d842...) -> 5 keys | 8192 slots | 1 slaves.
192.168.4.59:6379 (0653e3fc...) -> 2 keys | 4096 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 8 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 

			重新平均分配hash slots , 使其存储数据的机会平均
[root@mgm57 ~]# redis-trib.rb rebalance  192.168.4.52:6352

[root@mgm57 ~]# redis-trib.rb info 192.168.4.52:6352
192.168.4.52:6352 (b3f4d842...) -> 3 keys | 5461 slots | 1 slaves.
192.168.4.59:6379 (0653e3fc...) -> 4 keys | 5462 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 5461 slots | 1 slaves.
[OK] 8 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 


####################################################
		2.3 把移除redis服务器再次添加到集群里
			1 启动redis服务
[root@host53 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host53 ~]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.53:16353      0.0.0.0:*               LISTEN      11908/redis-server  
tcp        0      0 192.168.4.53:6353       0.0.0.0:*               LISTEN      11908/redis-server  
[root@host53 ~]# 
		
			2 还原设置
[root@host53 ~]# redis-cli -h 192.168.4.53 -p 6353
192.168.4.53:6353> cluster reset
OK
192.168.4.53:6353> flushall 
192.168.4.53:6353> save
192.168.4.53:6353> exit


			3 添加主机到集群	
[root@mgm57 ~]# redis-trib.rb info 192.168.4.52:6352
192.168.4.52:6352 (b3f4d842...) -> 3 keys | 5461 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.58:6379 (14e88d20...) -> 4 keys | 5462 slots | 1 slaves.
[OK] 8 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 
[root@mgm57 ~]# redis-trib.rb check 192.168.4.52:6352	
[root@mgm57 ~]# redis-trib.rb add-node --slave --master-id 14e88d207534d53e02acbf2252ca97a2644f2e40  192.168.4.53:6353  192.168.4.51:6351

[root@mgm57 ~]# redis-trib.rb info 192.168.4.52:6352
192.168.4.52:6352 (b3f4d842...) -> 3 keys | 5461 slots | 1 slaves.
192.168.4.55:6355 (b948d8ef...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.58:6379 (14e88d20...) -> 4 keys | 5462 slots | 2 slaves.
[OK] 8 keys in 3 masters.
0.00 keys per slot on average.
[root@mgm57 ~]# 

	


		把集群中主机还原为独立数据库服务器：
			停止redis服务
			清空数据库目录
			把配置文件中的集群功能注释(IP 和端口 不用修改)
			启动redis服务

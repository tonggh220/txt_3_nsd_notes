1 数据读写分离
	1.1 相关概念？
		1 什么是数据读写分离
			把客户访问数据的查询和写入数据请求分别给不同的数据库服务器处理。

			把查询数据的请求给从数据库服务器处理
			把存储数据的请求给主数据库服务器处理

		2 为什么要使用数据读写分离
			减轻主数据库服务器的并访问压力

		3 如何实现数据的读写分离
			通过程序实现（写代码实现）
			搭建服务实现（使用软件部署服务）

		3 实现数据读写分离服务的软件（MySQL 中间件）
                    mysql-proxy \  mycat \ maxscale

		4 配置数据读写分离服务结构
			4.1 拓扑结构
			4.2 具体配置如下
				4.2.1  MySQL一主一从结构
					配置主服务器51
					配置从服务器52
                4.2.2 部署MySQL代理服务器192.168.4.57
			    具体步骤如下：
					1 安装软件

[root@host57 ~]# rpm -ivh  maxscale-2.1.2-1.rhel.7.x86_64.rpm 

					 2 修改主配置文件
服务运行后线程的数量 [maxscale]
定义数据库服务器Ip地址 [server1] 和 [server2]
定义监控数据库服务器主机列表 [MySQL Monitor]
定义读写分离服务[Read-Write Service]
定义管理服务 [MaxAdmin Service]
定义读写分离服务使用的端口[Read-Write Listener]
定义管理服务使用的端口[MaxAdmin Listener]


[root@host57 ~]# vim /etc/maxscale.cnf

[maxscale]
threads=auto


[server1]
type=server
address=192.168.4.51
port=3306
protocol=MySQLBackend

[server2]
type=server
address=192.168.4.52
port=3306
protocol=MySQLBackend

[MySQL Monitor]
type=monitor
module=mysqlmon
servers=server1,server2
user=mya
passwd=123qqq...A
monitor_interval=10000



[Read-Write Service]
type=service
router=readwritesplit
servers=server1,server2
user=myb
passwd=123qqq...A
max_slave_connections=100%


[MaxAdmin Service]
type=service
router=cli

[Read-Write Listener]
type=listener
service=Read-Write Service
protocol=MySQLClient
port=4006

[MaxAdmin Listener]
type=listener
service=MaxAdmin Service
protocol=maxscaled
socket=default
port=4016
:wq

3 配置数据库服务器51 和 52

授权监控用户mya
授权路由用户myb

[root@host51 ~]# mysql -uroot -p666qqq...B -e 'grant replication slave,replication client on *.* to mya@"%"  identified by  "123qqq...A"'


[root@host51 ~]# mysql -uroot -p666qqq...B -e 'grant select on mysql.* to myb@"%"  identified by  "123qqq...A"'

[root@host52 ~]# mysql -uroot -p666qqq...B -e 'select user from mysql.user where user in ("mya","myb")'
mysql: [Warning] Using a password on the command line interface can be insecure.
+------+
| user |
+------+
| mya  |
| myb  |
+------+
[root@host52 ~]# 

					 4  启动读写分离服务
[root@host57 ~]# maxscale  -f /etc/maxscale.cnf
[root@host57 ~]# netstat  -utnlp  | grep maxscale
tcp6       0      0 :::4006                 :::*                    LISTEN      1729/maxscale       
tcp6       0      0 :::4016                 :::*                    LISTEN      1729/maxscale       
[root@host57 ~]# 

停止服务的命令  [root@host57 ~]# killall -9 maxscale

					 5  查看监控信息 
[root@host57 ~]# maxadmin -uadmin -pmariadb -P4016
MaxScale> list servers
Servers.
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  | Connections | Status              
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.51    |  3306 |           0 | Master, Running
server2            | 192.168.4.52    |  3306 |           0 | Slave, Running
-------------------+-----------------+-------+-------------+--------------------
MaxScale> 
MaxScale> exit
[root@host57 ~]# 


					 6  统一排错时间
[root@host57 ~]# ls /var/log/maxscale/
maxscale.log


			4.2.3 测试配置：客户端连接代理服务57访问
数据
				1 在主数据库服务器添加授权用户，给客户端连接使用

[root@host51 ~]# mysql -uroot -p666qqq...B -e 'grant select,insert on db3.* to yaya1088@"%" identified by "123qqq...A"'

			2 在从服务器查看是否同步授权用户yaya1088
[root@host52 ~]# mysql -uroot -p666qqq...B -e 'select user from mysql.user where user="yaya1088"'
mysql: [Warning] Using a password on the command line interface can be insecure.
+----------+
| user     |
+----------+
| yaya1088 |
+----------+
[root@host52 ~]# 

			3 客户端连接57主机 访问数据
                    
[root@host50 ~]# mysql -h192.168.4.57 -P4006 -uyaya1088 -p123qqq...A
mysql> show grants;

mysql> insert into db3.user(name,uid,gid)values("YYY",666,888);
Query OK, 1 row affected (0.12 sec)

mysql> select name,uid,gid from db3.user where name="yyy";
+------+------+------+
| name | uid  | gid  |
+------+------+------+
| YYY  |  666 |  888 |
+------+------+------+
1 row in set (0.00 sec)

mysql>



		测试57 主机的读写分离功能
host51~]# mysql  -uroot -p密码
mysql> create database gamedb;
mysql> create table gamedb.t1(id int);
mysql> grant select,insert on gamedb.* to yaya1066@"%" identified by "123qqq...A";


host52~]# mysql  -uroot -p密码
mysql> insert into gamedb.t1 values(52);
mysql> select  * from gamedb.t1;

host50~]# mysql -h192.168.4.57 -P4006 -uyaya1066 -p123qqq...A
mysql> select  * from gamedb.t1; #查看有52的记录
mysql> insert into gamedb.t1 values(51);
mysql> select  * from gamedb.t1; # 查看到2条记录


2 MySQL多实例
	2.1 什么是多实例？
		在1台服务器上运行多个mysql服务


	2.2 为什么要使用多实例？

	2.3 配置多实例: 192.168.4.57
		1 安装源码软件
[root@host57 ~]# rpm -q libaio
libaio-0.3.109-13.el7.x86_64
[root@host57 ~]# 
[root@host57 ~]# id mysql
id: mysql: no such user
[root@host57 ~]# 
[root@host57 ~]# useradd mysql
[root@host57 ~]#
[root@host57 ~]# tar -zxvf /var/ftp/upload/mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
[root@host57 ~]# ls
anaconda-ks.cfg  mysql-5.7.20-linux-glibc2.12-x86_64
[root@host57 ~]# 
[root@host57 ~]# ls
anaconda-ks.cfg  mysql-5.7.20-linux-glibc2.12-x86_64
[root@host57 ~]# 
[root@host57 ~]# mv mysql-5.7.20-linux-glibc2.12-x86_64 /usr/local/mysql
[root@host57 ~]# 
[root@host57 ~]# ls /usr/local/mysql/
bin  COPYING  docs  include  lib  man  README  share  support-files
[root@host57 ~]# 
[root@host57 ~]# ls /usr/local/mysql/bin/
innochecksum       mysqlcheck                  mysql_embedded             mysql_tzinfo_to_sql
lz4_decompress     mysql_client_test_embedded  mysqlimport                mysql_upgrade
myisamchk          mysql_config                mysql_install_db           mysqlxtest
myisam_ftdump      mysql_config_editor         mysql_plugin               perror
myisamlog          mysqld                      mysqlpump                  replace
myisampack         mysqld-debug                mysql_secure_installation  resolveip
my_print_defaults  mysqld_multi                mysqlshow                  resolve_stack_dump
mysql              mysqld_safe                 mysqlslap                  zlib_decompress
mysqladmin         mysqldump                   mysql_ssl_rsa_setup
mysqlbinlog        mysqldumpslow               mysqltest_embedded
[root@host57 ~]# 
[root@host57 ~]# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
[root@host57 ~]# 
[root@host57 ~]# PATH=/usr/local/mysql/bin:$PATH
[root@host57 ~]# echo  $PATH
/usr/local/mysql/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
[root@host57 ~]#
[root@host57 ~]# vim /etc/bashrc 
[root@host57 ~]# tail -1  /etc/bashrc 
export PATH=/usr/local/mysql/bin:$PATH
[root@host57 ~]#

		2 创建并编辑主配置文件
]# rm -rf /etc/my.cnf (如果此文件有的话要删除)

]# vim /etc/my.cnf(创建并打开新文件)

[mysqld_multi]定义多实例服务的运行配置
服务运行时使用程序
修改管理员root用户密码的命令
启动服务的用户

[mysqld1]创建编号为1的多实例服务
数据库目录
端口号
PID文件
日志文件
socket文件

[mysqld2]创建编号为2的多实例服务
数据库目录
端口号
PID文件
日志文件
socket文件
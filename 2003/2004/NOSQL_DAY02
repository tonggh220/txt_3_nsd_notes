	配置集群的目的： 实现数据的分布式存储和 服务的高可用 及数据的自动备份
1 创建集群
	1.1 相关概念
		拓扑结构
		角色规划
	   	工作原理（存储数据 和  读取数据）
		准备集群主机要求见ppt 
	1.2 配置管理主机 192.168.4.57
		准备脚本运行环境
 132  rpm -q ruby
  133  rpm -q rubygems
  134  yum -y  install ruby  rubygems
  137  which gem
  138  gem install  upload/redis-3.2.1.gem 
		
		创建管理集群的ruby脚本
[root@host57 ~]# tar -zxvf upload/redis-4.0.8.tar.gz 
[root@host57 ~]# cd redis-4.0.8/
[root@host57 redis-4.0.8]# ls src/*.rb
src/redis-trib.rb
[root@host57 redis-4.0.8]# echo  $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
[root@host57 redis-4.0.8]# 
[root@host57 redis-4.0.8]# mkdir /root/bin
[root@host57 redis-4.0.8]# cp src/redis-trib.rb  /root/bin
[root@host57 redis-4.0.8]# chmod +x /root/bin/redis-trib.rb 
[root@host57 ~]# redis-trib.rb help # 能查看命令的帮助新成功

1.3 配置redis服务
		1 确保6台redis服务器 都没有存储数据、不要设置连接密码
		
		2 分别启动6台redis服务的集群功能
		    （修改配置文件后重启服务）
]# vim  /etc/redis/6379.conf
    cluster-enabled  yes        	             		//启用集群功能  
    cluster-config-file  nodes-6379.conf 		//存储集群信息文件
    cluster-node-timeout  5000 			//超时时间(单位毫秒)
:wq

1.4 创建集群 192.168.4.57
[root@host57 ~]# redis-trib.rb  create  --replicas 1  192.168.4.51:6351  192.168.4.52:6352  192.168.4.53:6353  192.168.4.54:6354  192.168.4.55:6355 192.168.4.56:6356
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 3f206e30a0743582900f13f91b8299c8a5b2b9f6 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: bab02ec29fc10de304bcd41e5a522b3708bd1389 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 97f79f1c22bd0064e18bacc1d50182de68006231 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: f4907e6ef98a527269f71c7a5b2a22c258183f6b 192.168.4.54:6354
   replicates 97f79f1c22bd0064e18bacc1d50182de68006231
S: 24d3f6d65ca4fd1376a57e27eec2ba5538e7411d 192.168.4.55:6355
   replicates 3f206e30a0743582900f13f91b8299c8a5b2b9f6
S: 066f91db13abedb35d4cfb2ba17d83106b8745ba 192.168.4.56:6356
   replicates bab02ec29fc10de304bcd41e5a522b3708bd1389
Can I set the above configuration? (type 'yes' to accept): yes   同意配置
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 3f206e30a0743582900f13f91b8299c8a5b2b9f6 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
M: 97f79f1c22bd0064e18bacc1d50182de68006231 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: f4907e6ef98a527269f71c7a5b2a22c258183f6b 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 97f79f1c22bd0064e18bacc1d50182de68006231
S: 066f91db13abedb35d4cfb2ba17d83106b8745ba 192.168.4.56:6356
   slots: (0 slots) slave
   replicates bab02ec29fc10de304bcd41e5a522b3708bd1389
S: 24d3f6d65ca4fd1376a57e27eec2ba5538e7411d 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 3f206e30a0743582900f13f91b8299c8a5b2b9f6
M: bab02ec29fc10de304bcd41e5a522b3708bd1389 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.  提示16384个槽分配完毕 这就成功了 
[root@host57 ~]# 

[root@host57 ~]# redis-trib.rb  info  192.168.4.53:6353  #查看集群统计信息
192.168.4.53:6353 (97f79f1c...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.51:6351 (3f206e30...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (bab02ec2...) -> 0 keys | 5462 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
[root@host57 ~]# redis-trib.rb  check  192.168.4.55:6355  #查看集群详细信息

在任意1台 redis服务器本机查看机器信息以 51主机为例查看
[root@host51 ~]# redis-cli  -h  192.168.4.51 -p 6351
192.168.4.51:6351> cluster info
cluster_state:ok
cluster_known_nodes:6
cluster_size:3

192.168.4.51:6351> cluster nodes

[root@host51 ~]# cat /var/lib/redis/6379/nodes-6379.conf 


创建集群失败的终极解决办法（6台服务器都要做如下配置）
	1 关闭 selinux   、 firewalld
	2 检查集群功能是否启用
	3 停止redis服务
	4 删除数据库目录下的所有文件  rm  -rf /var/lib/redis/6379/*
	5 启动redis服务
	6 在管理主机执行创建集群的命令

	1.5 访问集群
		1.5.1 链接集群中任意1台redis服务都可以存储和取数据
[root@host50 ~]# redis-cli   -c  -h 192.168.4.56 -p 6356
192.168.4.56:6356> set a 99
-> Redirected to slot [15495] located at 192.168.4.53:6353
OK
192.168.4.53:6353> keys *
1) "a"
192.168.4.53:6353> set b 101
-> Redirected to slot [3300] located at 192.168.4.51:6351
OK
192.168.4.51:6351> keys *
1) "b"
192.168.4.51:6351> set c 88
-> Redirected to slot [7365] located at 192.168.4.52:6352
OK
192.168.4.52:6352> keys *
1) "c"
192.168.4.52:6352> exit
[root@host50 ~]# redis-cli   -c  -h 192.168.4.51 -p 6351
192.168.4.51:6351> keys *
1) "b"
192.168.4.51:6351> get b
"101"
192.168.4.51:6351> get c
-> Redirected to slot [7365] located at 192.168.4.52:6352
"88"
192.168.4.52:6352> keys *
1) "c"
192.168.4.52:6352> get a
-> Redirected to slot [15495] located at 192.168.4.53:6353
"99"
192.168.4.53:6353> exit
[root@host50 ~]# 

 		1.5.2 redis集群的工作工程（重点 / 难点）
			1  存储数据的工作工程
			2  取数据的工作工程

		
	1.6 测试集群  时间 5分钟到 17：40 
		数据分布式存储
		服务的高可用
		数据的自动备份
		
2 管理集群	
	2.1 向集群添加新的redis服务器
		2.1.1 添加新的master服务器 ，具体步骤如下：192.168.4.59
			1 运行redis服务并启用的集群功能

			2 在管理主机添加新主机到集群里
redis-trib.rb  add-node 新redis服务器的ip:端口  集群中已有机器的IP:端口

]# redis-trib.rb  add-node 192.168.4.59:6359  192.168.4.51:6351
[OK] New node added correctly.
[root@host57 ~]# 

[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.59:6359 (e73bef0a...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.52:6352 (3ec51fea...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 

			3 重新分片 （分配hash slot 给的主服务器）
[root@host57 ~]# redis-trib.rb reshard 192.168.4.51:6351

移出hash槽个数
How many slots do you want to move (from 1 to 16384)? 4096

接收hash槽主机ID  (59主机的id)
What is the receiving node ID? e73bef0a4703b4213796c7b80146617aa4127f43

移出hash槽主机ID
Source node #1:all (从当前所有master角色主机里一起拿出4096)

同意配置
Do you want to proceed with the proposed reshard plan (yes/no)? yes
			4 查看集群信息
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.59:6359 (e73bef0a...) -> 0 keys | 4096 slots | 0 slaves.
192.168.4.52:6352 (3ec51fea...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 0 keys | 4096 slots | 1 slaves.
[OK] 0 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 

[root@host57 ~]# redis-trib.rb check 192.168.4.51:6351
M: e73bef0a4703b4213796c7b80146617aa4127f43 192.168.4.59:6359
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)
			5 访问新的主服务器存取数据
[root@host55 redis-4.0.8]# redis-cli  -c  -h 192.168.4.59 -p 6359
192.168.4.59:6359> keys *
(empty list or set)
192.168.4.59:6359> set x  99
-> Redirected to slot [16287] located at 192.168.4.53:6353
OK
192.168.4.53:6353> set y  98
-> Redirected to slot [12222] located at 192.168.4.59:6359
OK
192.168.4.59:6359> set z  99
-> Redirected to slot [8157] located at 192.168.4.52:6352
OK
192.168.4.52:6352> 


		2.1.2 添加新的slave服务器具体步骤如下：192.168.4.58
			1 运行redis服务并启用的集群功能 
			2 在管理主机添加从服务器到集群里
[root@host57 ~]# redis-trib.rb add-node --slave [--master-id  id值]  新服务器的IP:端口   已有服务器的IP:端口 

[root@host57 ~]# redis-trib.rb add-node --slave 192.168.4.58:6358 192.168.4.51:6351
[OK] New node added correctly.
[root@host57 ~]# 

			查看集群信息
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.59:6359 (e73bef0a...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.52:6352 (3ec51fea...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 3 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]#
[root@host57 ~]# redis-trib.rb check 192.168.4.51:6351
M: e73bef0a4703b4213796c7b80146617aa4127f43 192.168.4.59:6359
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   1 additional replica(s)
S: 2ea25c57f32c4066a2cceaaaf8ef33435e25b4e1 192.168.4.58:6358
   slots: (0 slots) slave
   replicates e73bef0a4703b4213796c7b80146617aa4127f43

			4 连接从服务器58 查看是否同步主服务器的数据
[root@host59 ~]# redis-cli  -c -h 192.168.4.58 -p 6358
192.168.4.58:6358> keys *
1) "y"
192.168.4.58:6358>

	2.2 把redis服务器移除集群
		移除slave角色服务器  把58 主机移除集群
命令格式：
redis-trib.rb  del-node 集群已有主机的IP:端口  被移除主机的ID

		1 查看被移除主机的ID
[root@host57 ~]# redis-trib.rb check 192.168.4.51:6351

S: 2ea25c57f32c4066a2cceaaaf8ef33435e25b4e1 192.168.4.58:6358
   slots: (0 slots) slave
   replicates e73bef0a4703b4213796c7b80146617aa4127f43

		2 移除主机
[root@host57 ~]# redis-trib.rb del-node 192.168.4.51:6351  2ea25c57f32c4066a2cceaaaf8ef33435e25b4e1
>>> Removing node 2ea25c57f32c4066a2cceaaaf8ef33435e25b4e1 from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@host57 ~]# 

[root@host58 ~]# netstat  -utnlp  | grep redis-server
[root@host58 ~]# 
			3 查看集群信息
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 0 keys | 4096 slots | 1 slaves.
192.168.4.59:6359 (e73bef0a...) -> 1 keys | 4096 slots | 0 slaves.
192.168.4.52:6352 (3ec51fea...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 3 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 


	      	移除master角色服务器  192.168.4.59
命令格式：redis-trib.rb  del-node 集群已有主机的IP:端口  被移除主机的ID
		 具体步骤如下：
			1 释放hash槽 （执行重新分片命令）

				移出槽的个数  
How many slots do you want to move (from 1 to 16384)?  4096
				接收槽的主服务器的id
What is the receiving node ID? 855bdc241d1aa912c1af8aa3f781acc54695bb3d
				指定移除槽的主机的id
Source node #1:e73bef0a4703b4213796c7b80146617aa4127f43
Source node #2:done  #结束id的填写

				是否同意配置
 Do you want to proceed with the proposed reshard plan (yes/no)? yes
			#查看集群信息
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 1 keys | 8192 slots | 1 slaves.
192.168.4.59:6359 (e73bef0a...) -> 0 keys | 0 slots | 0 slaves.
192.168.4.52:6352 (3ec51fea...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 3 keys in 4 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
			2 删除主机
[root@host57 ~]# redis-trib.rb check 192.168.4.51:6351
M: e73bef0a4703b4213796c7b80146617aa4127f43 192.168.4.59:6359
   slots: (0 slots) master
   0 additional replica(s)
[root@host57 ~]# redis-trib.rb del-node 192.168.4.51:6351 e73bef0a4703b4213796c7b80146617aa4127f43
>>> Removing node e73bef0a4703b4213796c7b80146617aa4127f43 from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.
[root@host57 ~]#
[root@host59 redis-4.0.8]# netstat  -utnlp  | grep redis-server
[root@host59 redis-4.0.8]# 

			3 查看集群信息
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 1 keys | 8192 slots | 1 slaves.
192.168.4.52:6352 (3ec51fea...) -> 1 keys | 4096 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 1 keys | 4096 slots | 1 slaves.
[OK] 3 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 

			#在管理服务器平均分片主服务器占用的hash槽
[root@host57 ~]# redis-trib.rb rebalance 192.168.4.51:6351			
[root@host57 ~]# redis-trib.rb info 192.168.4.51:6351
192.168.4.51:6351 (855bdc24...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (3ec51fea...) -> 1 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (1bb0ce48...) -> 1 keys | 5461 slots | 1 slaves.
[OK] 3 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
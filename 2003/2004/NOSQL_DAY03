1 redis主从复制 ： 数据自动备份的服务结构，分为2种角色
	主服务器master  客户端存储数据。连接的服务器
	从服务器slave     自动与主服务器保持数据一致
	
	主从复制的结构模式
		一主一从     一主多从     主从从
	
	配置主从复制
		命令行配置 （马上生效 ）
		***redis服务启动后，默认就是主服务器
		slaveof  主服务器IP  端口       #指定主服务器
		info  replication                   #查看复制信息

		修改配置文件 （永久配置）
		vim /etc/redis/6379.con
		slaveof   主服务器IP   端口
		:wq
		重启服务

		练习+休息到 15:15 
例子 把数据库服务器52  配置为 51的从数据库服务器

		配置一主多从
例子 把数据库服务器53  也配置为 51的从数据库服务器   练习5分钟 到  15:28

		配置主从从
例子 把数据库服务器54  也配置为 52的从数据库服务器   练习5分钟 到  15:42



把从服务恢复为 主服务器  （把53恢复为独立的数据库服务器）到15:55
			命令行 （临时恢复） slaveof  no one

			修改配置 （永久恢复）
			vim /etc/redis/6379.con
			   #slaveof   主服务器IP   端口
		                 :wq
		                 重启服务

 配置带验证的主从复制（主数据库服务器有连接密码）
			1 在设置连接密码  （在51主机设置连接密码）
			修改配置文件并重启服务
[root@localhost ~]# vim +501  /etc/redis/6379.conf 
requirepass 123456
:wq

[root@localhost ~]# redis-cli -h 192.168.4.51 -p 6351 shutdown
[root@localhost ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@localhost ~]#

			2 在从指定主服务器的密码
[root@host52 ~]# vim /etc/redis/6379.conf
282 slaveof 192.168.4.51 6351
289 masterauth  123456  # 指定主服务器的连接密码
:wq
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p  6352 shutdown
[root@host52 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host52 ~]# 

2 哨兵服务：
	监视主从同步结构中的主服务器，发现主服务器的redis服务无法连接后，把对应的从服务器升级主服务器

例子   
	设置从服务器的52连接密码
[root@host52 ~]# vim +501 /etc/redis/6379.conf 

requirepass 123456
:wq
[root@host52 ~]# redis-cli  -h 192.168.4.52 -p  6352  shutdown
[root@host52 ~]# /etc/init.d/redis_6379 start


	设置从服务器54 连接52的密码
[root@localhost ~]# vim /etc/redis/6379.conf
slaveof 192.168.4.52 6352
masterauth 123456
:wq
[root@localhost ~]# 
[root@localhost ~]# 
[root@localhost ~]# redis-cli  -h 192.168.4.54 -p 6354  shutdown
[root@localhost ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@localhost ~]# 
[root@localhost ~]# redis-cli  -h 192.168.4.54 -p 6354 
192.168.4.54:6354> info replication
# Replication
role:slave
master_host:192.168.4.52
master_port:6352
master_link_status:up

	配置哨兵服务器192.168.4.57
		安装Redis软件
  167  rpm -q gcc  || yum -y install gcc
rm  -rf  redis-4.0.8
  170  tar -zxvf upload/redis-4.0.8.tar.gz 
  171  cd redis-4.0.8/
  172  make && make install 

		创建主配置文件并编辑
[root@host57 redis-4.0.8]# vim  /etc/sentinel.conf
[root@host57 redis-4.0.8]# cat  /etc/sentinel.conf
bind  192.168.4.57
port 26379
sentinel monitor  redisserver 192.168.4.51 6351  1
sentinel auth-pass  redisserver 123456
:wq

[root@host57 redis-4.0.8]#
		启动哨兵服务
[root@host57 ~]# redis-sentinel  /etc/sentinel.conf 


测试配置
			停止主服务器51的redis服务
[root@localhost ~]# redis-cli -h 192.168.4.51 -p 6351  -a 123456 shutdown


			查看52的复制信息 ，52会成为主服务器
192.168.4.52:6352> info replication
# Replication
role:master
connected_slaves:1
		查看哨兵服务的配置文件，会自动修改监视新的主机数据库52
		cat  /etc/sentinel.conf

			把51主机的Redis服务启动后， 会自动配置为52的从服务器
			需要自己手动设置连接52的密码

        
3 数据持久化 （理论较多）
     实现的方式有2种 ： RDB(默认)   、AOF(默认没有开启)

     3.1 RDB
	RDB介绍：   指定是数据库目录下的  dump.rdb文件
	 redis服务是先把数据存储在内存里，然后在服务运行过程中，会定期把内存里的数据保存到硬盘。	
	相关配置
	dbfilename  "dump.rdb"
	save  900  1
	save 300   10
	save 60     10000

	通过RDB 实现数据的备份与恢复
		备份  拷贝rdb文件
> save
[root@host58 ~]# cp /var/lib/redis/6379/dump.rdb /root/
[root@host58 ~]# ls /root/*.rdb
/root/dump.rdb
[root@host58 ~]#
[root@host58 ~]# scp /root/dump.rdb  root@192.168.4.59:/opt/

		恢复  把备份的rdb文件拷贝到数据库目录下:
		具体步骤如下：
			停止redis服务 ， 并删除本机的rdb文件
			拷贝到备份文件到数据库目录下
			启动redis服务
			登录查看数据
例子
[root@host59 ~]# redis-cli  -h 192.168.4.59  -p 6359  shutdown
[root@host59 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host59 ~]# 
[root@host59 ~]# rm -rf  /var/lib/redis/6379/dump.rdb
[root@host59 ~]# 
[root@host59 ~]# cp  /opt/dump.rdb  /var/lib/redis/6379/
[root@host59 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@host59 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host59 ~]# redis-cli  -h 192.168.4.59  -p 6359 
192.168.4.59:6359> keys *

	RDB的优缺点?

3.2 AOF
	AOF介绍？具体见ppt

	相关配置
appendonly yes
appendfilename "appendonly.aof"


例子  练习5分钟
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6358 
192.168.4.58:6358> config set  appendonly yes
OK
192.168.4.58:6358> config get appendonly
1) "appendonly"
2) "yes"
192.168.4.58:6358> config  rewrite
OK
192.168.4.58:6358> exit
[root@host58 ~]# ls /var/lib/redis/6379/
appendonly.aof  dump.rdb
[root@host58 ~]# wc -l /var/lib/redis/6379/appendonly.aof 
89 /var/lib/redis/6379/appendonly.aof
[root@host58 ~]# 
[root@host58 ~]# redis-cli  -h 192.168.4.58 -p 6358 
192.168.4.58:6358> keys *

	
	通过AOF 实现数据的备份与恢复
		备份 ： 拷贝aof文件
		恢复： 把备份的文件 拷贝到数据库目录下，具体步骤如下
		停止redis服务
		清空数据库目录
		启用aof文件
		拷贝备份的aof文件到数据库目录下
		启动服务
		查看数据
例子
[root@host58 ~]# cp /var/lib/redis/6379/appendonly.aof   /root/
[root@host58 ~]# scp /root/appendonly.aof  root@192.168.4.59:/opt/
[root@host59 ~]# vim /etc/redis/6379.conf
appendonly yes
appendfilename "appendonly.aof"
:wq
[root@host59 ~]# cp /opt/appendonly.aof  /var/lib/redis/6379/
[root@host59 ~]# ls /var/lib/redis/6379/
appendonly.aof
[root@host59 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host59 ~]#
[root@host59 ~]# redis-cli  -h 192.168.4.59  -p 6359  
192.168.4.59:6359> keys *

修复有问题的aof文件
	echo  "aaaaaaaafafaf"  >> /var/lib/redis/6379/appendonly.aof

	[root@redis53 6379]# redis-check-aof  --fix  appendonly.aof 

Continue? [y/N]: y
Successfully truncated AOF
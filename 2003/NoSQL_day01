DAY01 搭建Redis数据库服务器 常用管理命令的使用  配置项说名 部署LNMP+Redis
	概念？
	关系型数据库服务   统称RDBMS     软件
	非关系型数据库服务  统称NoSQL     软件
        Redis软件介绍

	搭建Redis数据库服务器 192.168.4.50
		1 安装软件
			]# rpm -q gcc  ||  yum  -y install gcc 
			]# tar -zxvf upload/redis-4.0.8.tar.gz 
 
   ]# cd redis-4.0.8/
   ]# make 
   ]# make install

		2 初始化配置（初始化配置完成后会自动运行redis服务）
[root@host50 redis-4.0.8]# ./utils/install_server.sh 
Welcome to the redis service installer
This script will help you easily set up a running redis server

Please select the redis port for this instance: [6379] 
Selecting default: 6379
Please select the redis config file name [/etc/redis/6379.conf] 
Selected default - /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log] 
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379] 
Selected default - /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server] 
Selected config:
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data dir       : /var/lib/redis/6379
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli
Is this ok? Then press ENTER to go on or Ctrl-C to abort. 回车
Copied /tmp/6379.conf => /etc/init.d/redis_6379
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server...
Installation successful!
[root@host50 redis-4.0.8]# 

		3 查看服务状态
[root@host50 redis-4.0.8]# netstat  -utnlp | grep 6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      4942/redis-server 1 
[root@host50 redis-4.0.8]#

		4 访问服务（默认只能自己访问自己）
[root@host50 ~]# redis-cli 
127.0.0.1:6379>

		5 查看数据 、存储数据 、读取数据
127.0.0.1:6379> keys *   查看数据 
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> set name plj 存储数据
OK
127.0.0.1:6379> 		
127.0.0.1:6379> keys *   查看数据
1) "name"
127.0.0.1:6379> 
127.0.0.1:6379> get name 读取数据
"plj"
127.0.0.1:6379> 
127.0.0.1:6379> set age 19
OK
127.0.0.1:6379> set class nsd2003
OK
127.0.0.1:6379> keys *   这些数据时存储在内存里
1) "age"
2) "class"
3) "name"
127.0.0.1:6379> exit  断开连接
[root@host50 ~]#
[root@host50 ~]# ls /var/lib/redis/6379/  到存储时间后会自动把内存里的数据保存到数据库目录下


		常用管理命令的使用  
		


127.0.0.1:6379> mset x 1 y 2 z 3
OK
127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379>

127.0.0.1:6379> mget  x y z age
1) "1"
2) "2"
3) "3"
4) "19"
127.0.0.1:6379>
127.0.0.1:6379> get w
(nil)
127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379> mget x y w
1) "1"
2) "2"
3) (nil)
127.0.0.1:6379> 


127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]> select  0
OK
127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379>
127.0.0.1:6379> select 16
(error) ERR DB index is out of range
127.0.0.1:6379> 
127.0.0.1:6379> select 15
OK
127.0.0.1:6379[15]> select 0
OK
127.0.0.1:6379>

127.0.0.1:6379> keys  school
(empty list or set)
127.0.0.1:6379> keys  ?
1) "x"
2) "y"
3) "z"
127.0.0.1:6379> 
127.0.0.1:6379> keys  ???
1) "age"
127.0.0.1:6379> 
127.0.0.1:6379> keys  a??
1) "age"
127.0.0.1:6379> keys  *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379> keys name
1) "name"
127.0.0.1:6379> 

127.0.0.1:6379> EXISTS name
(integer) 1
127.0.0.1:6379> EXISTS nameA
(integer) 0
127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379>

127.0.0.1:6379> keys *
1) "x"
2) "y"
3) "class"
4) "age"
5) "z"
6) "name"
127.0.0.1:6379> ttl x
(integer) -1
127.0.0.1:6379> EXPIRE x 20
(integer) 1
127.0.0.1:6379> ttl x
(integer) 13
127.0.0.1:6379> ttl x
(integer) 9
127.0.0.1:6379> ttl x
(integer) 4
127.0.0.1:6379> ttl x
(integer) -2
127.0.0.1:6379> keys *
1) "y"
2) "class"
3) "age"
4) "z"
5) "name"
127.0.0.1:6379> ttl x
(integer) -2
127.0.0.1:6379>

127.0.0.1:6379> set i 9
OK
127.0.0.1:6379> type i
string
127.0.0.1:6379> mset j 5 k 8
OK
127.0.0.1:6379> type j  k
(error) ERR wrong number of arguments for 'type' command
127.0.0.1:6379> type j  
string
127.0.0.1:6379> type k
string
127.0.0.1:6379> 


127.0.0.1:6379> lpush tea wk nb dmy plj lx zzg
(integer) 6
127.0.0.1:6379> keys *
1) "y"
2) "z"
3) "name"
4) "i"
5) "class"
6) "j"
7) "k"
8) "age"
9) "tea"
127.0.0.1:6379> get tea
(error) WRONGTYPE Operation against a key holding the wrong kind of value
127.0.0.1:6379> 
127.0.0.1:6379> type tea
list
127.0.0.1:6379> LRANGE tea 0 -1
1) "zzg"
2) "lx"
3) "plj"
4) "dmy"
5) "nb"
6) "wk"
127.0.0.1:6379>


127.0.0.1:6379> keys *
1) "y"
2) "z"
3) "name"
4) "i"
5) "class"
6) "j"
7) "k"
8) "age"
9) "tea"
127.0.0.1:6379> move tea 1
(integer) 1
127.0.0.1:6379> keys *
1) "y"
2) "z"
3) "name"
4) "i"
5) "class"
6) "j"
7) "k"
8) "age"
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> keys *
1) "tea"
127.0.0.1:6379[1]> 

127.0.0.1:6379[1]> keys *
1) "tea"
127.0.0.1:6379[1]> del tea
(integer) 1
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> 
127.0.0.1:6379> keys *
1) "y"
2) "z"
3) "name"
4) "i"
5) "class"
6) "j"
7) "k"
8) "age"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> 


127.0.0.1:6379> flushall
OK
127.0.0.1:6379> 

127.0.0.1:6379> keys *
1) "x"
2) "y"
127.0.0.1:6379> save

[root@host50 ~]# redis-cli 
127.0.0.1:6379> 
127.0.0.1:6379> shutdown
not connected> 
not connected> 
not connected> keys *
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected>exit
[root@host50 ~]# netstat  -utnlp  | grep  6379
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 status
cat: /var/run/redis_6379.pid: No such file or directory
Redis is running ()
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 status
Redis is running (4987)
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 stop
Stopping ...
Redis stopped
[root@host50 ~]# /etc/init.d/redis_6379 status
cat: /var/run/redis_6379.pid: No such file or directory
Redis is running ()
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host50 ~]# 

命令总结：
set  mset  get  mget  select  keys   EXISTS  ttl  expire  type  move  del  flushdb
flushall  save  shutdown
##################################################################################
配置文件解析（配置项说明，改变redis服务的运行配置）
		vim /etc/redis/6379.conf
		port 6350
		bind 192.168.4.50
	        :wq
              重启redis服务，重新加载配置文件
		]# /etc/init.d/redis_6379 stop
                ]# /etc/init.d/redis_6379 start

[root@host50 ~]# netstat  -utnlp  | grep 6350
tcp        0      0 192.168.4.50:6350       0.0.0.0:*               LISTEN      5213/redis-server 1 
[root@host50 ~]#

		连接50主机的redis服务
[root@host50 ~]# which redis-cli
[root@host50 ~]# scp /usr/local/bin/redis-cli  root@192.168.4.71:/usr/local/bin/
		
[root@host71 ~]# redis-cli -h 192.168.4.50 -p 6350
192.168.4.50:6350> 
192.168.4.50:6350> keys *
1) "x"
2) "y"
192.168.4.50:6350> set z 101
OK
192.168.4.50:6350> keys *
1) "x"
2) "y"
3) "z"
192.168.4.50:6350> exit
[root@host71 ~]# 


			修改脚本，可以使用脚本停止服务
	
[root@host50 ~]# vim +43 /etc/init.d/redis_6379 
	 $CLIEXEC -h 192.168.4.50  -p 6350 shutdown	
：wq

		或者 不修改脚本使用命令停止
[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350 shutdown


      内存清除策略 LRU  LFU  random  ttl  noeviction


	设置redis服务连接密码

[root@host50 ~]# /etc/init.d/redis_6379  stop
Stopping ...
Redis stopped
[root@host50 ~]# 
[root@host50 ~]# netstat  -utnlp  | grep 6350
[root@host50 ~]# 

[root@host50 ~]# vim +501 /etc/redis/6379.conf
501 requirepass 123456
:wq

[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350 
192.168.4.50:6350> 
192.168.4.50:6350> ping
(error) NOAUTH Authentication required.
192.168.4.50:6350> 
192.168.4.50:6350> keys *
(error) NOAUTH Authentication required.
192.168.4.50:6350> 
192.168.4.50:6350> auth 123456
OK
192.168.4.50:6350> ping
PONG
192.168.4.50:6350> keys *
1) "x"
2) "z"
3) "y"
192.168.4.50:6350> exit
[root@host50 ~]# 

[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350  -a 123456
192.168.4.50:6350> ping
PONG
192.168.4.50:6350> keys *
1) "x"
2) "z"
3) "y"
192.168.4.50:6350>


[root@host71 ~]# redis-cli -h 192.168.4.50 -p 6350 -a 123456
192.168.4.50:6350> keys *
1) "x"
2) "z"
3) "y"
192.168.4.50:6350> exit


	修改脚本添加连接密码，停止服务
[root@host50 ~]# vim  +43 /etc/init.d/redis_6379 
 $CLIEXEC -h 192.168.4.50  -p 6350 -a 123456  shutdown
：wq

[root@host50 ~]# /etc/init.d/redis_6379 stop

	或命令行停止
	[root@host50 ~]# redis-cli  -h 192.168.4.50 -p 6350  -a 123456 shutdown
  




################################################################################3

 		部署LNMP+Redis
			1 部署网站运行平台 lnmp  （192.168.4.71）
                               安装源码的nginx
[root@host71 ~]# rpm -q gcc 
package gcc is not installed
[root@host71 ~]# rpm -q pcre-devel
pcre-devel-8.32-17.el7.x86_64
[root@host71 ~]# 
[root@host71 ~]# rpm -q zlib-devel
zlib-devel-1.2.7-17.el7.x86_64
[root@host71 ~]# 
[root@host71 ~]# yum -y install gcc 
    7  tar -zxvf upload/nginx-1.12.2.tar.gz 
    8  ls
    9  cd nginx-1.12.2/
   10  ./configure 
   11  make 
   12  make  install
[root@host71 nginx-1.12.2]# ls /usr/local/nginx/
conf  html  logs  sbin
[root@host71 nginx-1.12.2]#

			       安装php-fpm  并启动服务
[root@host71 ~]# rpm -q php-fpm
package php-fpm is not installed
[root@host71 ~]# 
[root@host71 ~]# yum -y install  php-fpm

[root@host71 ~]# systemctl  start php-fpm 
[root@host71 ~]# systemctl  enable php-fpm 
Created symlink from /etc/systemd/system/multi-user.target.wants/php-fpm.service to /usr/lib/systemd/system/php-fpm.service.
[root@host71 ~]# 
[root@host71 ~]# netstat  -utnlp  | grep 9000
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      7302/php-fpm: maste 
[root@host71 ~]#

			       启动nginx服务
[root@host71 ~]# vim +65 /usr/local/nginx/conf/nginx.conf
 65         location ~ \.php$ {
 66             root           html;
 67             fastcgi_pass   127.0.0.1:9000;
 68             fastcgi_index  index.php;
 69             include        fastcgi.conf;
 70         }
:wq
[root@host71 ~]# [root@host71 ~]# /usr/local/nginx/sbin/nginx  -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@host71 ~]# 
[root@host71 ~]# /usr/local/nginx/sbin/nginx
[root@host71 ~]# 
[root@host71 ~]# netstat  -utnlp  | grep 80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      7331/nginx: master  
[root@host71 ~]#

			       测试配置
[root@host71 ~]# vim /usr/local/nginx/html/test.php
<?php
$i = 99 ;
echo  $i ;
?>
:wq

命令行测试

[root@host71 ~]# curl  http://localhost/test.php
99

浏览器访问
[root@host71 ~]# systemctl  stop firewalld
[root@host71 ~]# setenforce 0
打开真机的浏览器，在地址栏输入网址 http://192.168.4.71/test.php

					2 搭建redis服务器 192.168.4.50
[root@host50 ~]# netstat  -utnlp  | grep 6350
tcp        0      0 192.168.4.50:6350       0.0.0.0:*               LISTEN      5340/redis-server 1 
[root@host50 ~]# 

			3 配置网站可以连接redis服务器存取数据
				3.1  PHP是否能连接redis服务
				[root@host71 ~]# yum  -y  install php php-devel
				[root@host71 ~]# php -m | grep  -i  redis


				3.2 安装提供redis模块软件包
[root@host71 ~]# rpm -q autoconf
autoconf-2.69-11.el7.noarch
[root@host71 ~]# rpm -q automake
automake-1.13.4-3.el7.noarch
[root@host71 ~]# 
   
[root@host71 ~]# tar -zxvf upload/php-redis-2.2.4.tar.gz 
[root@host71 ~]# cd phpredis-2.2.4/
[root@host71 phpredis-2.2.4]# ls
arrays.markdown  CREDITS           mkdeb.sh         redis_array_impl.c  serialize.list
common.h         debian            package.xml      redis_array_impl.h  tests
config.h         debian.control    php_redis.h      redis.c
config.m4        library.c         README.markdown  redis_session.c
config.w32       library.h         redis_array.c    redis_session.h
COPYING          mkdeb-apache2.sh  redis_array.h    rpm
[root@host71 phpredis-2.2.4]# 
[root@host71 phpredis-2.2.4]# phpize 
Configuring for:
PHP Api Version:         20100412
Zend Module Api No:      20100525
Zend Extension Api No:   220100525
[root@host71 phpredis-2.2.4]# 
[root@host71 phpredis-2.2.4]# ls
acinclude.m4     config.m4       install-sh        package.xml         redis_session.h
aclocal.m4       config.sub      library.c         php_redis.h         rpm
arrays.markdown  configure       library.h         README.markdown     run-tests.php
autom4te.cache   configure.in    ltmain.sh         redis_array.c       serialize.list
build            config.w32      Makefile.global   redis_array.h       tests
common.h         COPYING         missing           redis_array_impl.c
config.guess     CREDITS         mkdeb-apache2.sh  redis_array_impl.h
config.h         debian          mkdeb.sh          redis.c
config.h.in      debian.control  mkinstalldirs     redis_session.c
[root@host71 phpredis-2.2.4]# 
[root@host71 phpredis-2.2.4]# ./configure --with-php-config=/usr/bin/php-config
[root@host71 phpredis-2.2.4]# make
[root@host71 phpredis-2.2.4]# make install
Installing shared extensions:     /usr/lib64/php/modules/
[root@host71 phpredis-2.2.4]# 
[root@host71 phpredis-2.2.4]# ls /usr/lib64/php/modules/
curl.so  fileinfo.so  json.so  phar.so  redis.so  zip.so
[root@host71 phpredis-2.2.4]# 

				3.3 修改/etc/php.ini 加载模块
[root@host71 phpredis-2.2.4]# vim +728 /etc/php.ini 
728 extension_dir = "/usr/lib64/php/modules/"
730 extension = "redis.so"
:wq
[root@host71 phpredis-2.2.4]# systemctl  restart php-fpm
[root@host71 phpredis-2.2.4]# 
[root@host71 phpredis-2.2.4]# php -m  | grep  -i redis
redis
[root@host71 phpredis-2.2.4]# 	
		
DBA2_DAY05
	使用mha软件配置mysql高可用集群，必须做那些配置？
	       提供数据存储服务的主机之间必须是mysql一主多从同步结构
		   必须配置ssh免密登陆
		   必须有VIP地址，客户端连接VIP地址访问mysql服务
		   主数据库服务器宕机后，要手动启动管理服务
		   
		   要人为的将宕机的主服务器添加到集群，并且在添加进集群之前
		   要手动确保与当前的主数据库服务器数据一致
		   
			
	一、PXC集群（使用PXC软件配置mysql高可用集群）
	       1.1 相关概念？
		   1.2  创建PXC集群
					     1   在3台主机分别安装pxc软件
cd  pxc
yum -y install libev-4.15-1.el6.rf.x86_64.rpm  
yum -y install percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm 
yum -y install qpress-1.1-14.11.x86_64.rpm 
tar -xvf Percona-XtraDB-Cluster-5.7.25-31.35-r463-el7-x86_64-bundle.tar 
yum -y install Percona-XtraDB-Cluster-*.rpm

					休息到	10:10 上课
						
						 2   在3台主机分别修改配置文件（重点 ）
						 ]# cd /etc/percona-xtradb-cluster.conf.d/
						 ]# ls
mysqld.cnf   mysqld_safe.cnf   wsrep.cnf

vim mysqld_safe.cnf（无需修改使用默认配置即可）

host71]#  vim  mysqld.cnf
[mysqld]
server_id=71
:wq
host72]#  vim  mysqld.cnf
[mysqld]
server_id=72
:wq
host73]#  vim  mysqld.cnf
[mysqld]
server_id=73
:wq

host71]#  vim  wsrep.cnf
wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.168.4.73  	必须一致		             		//集群成员列表
wsrep_node_address=192.168.4.71  	//本机ip地址
wsrep_cluster_name=pxc-cluster 	//集群名称, 必须一致
wsrep_node_name=pxcnode71		//本机主机名
wsrep_sst_auth="sstuser:123qqq…A"	  //SST数据同步授权用户 必须一致

host72]#  vim  wsrep.cnf
wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.168.4.73  	必须一致		             		//集群成员列表
wsrep_node_address=192.168.4.72  	//本机ip地址
wsrep_cluster_name=pxc-cluster 	//集群名称, 必须一致
wsrep_node_name=pxcnode72		//本机主机名
wsrep_sst_auth="sstuser:123qqq…A"	  //SST数据同步授权用户 必须一致

host73]#  vim  wsrep.cnf
wsrep_cluster_address=gcomm://192.168.4.71,192.168.4.72,192.168.4.73  	必须一致		             		//集群成员列表
wsrep_node_address=192.168.4.73  	//本机ip地址
wsrep_cluster_name=pxc-cluster 	//集群名称, 必须一致
wsrep_node_name=pxcnode73		//本机主机名
wsrep_sst_auth="sstuser:123qqq…A"	  //SST数据同步授权用户 必须一致


						 3   在任意1台主机，执行初始化集群操作
[root@pxc71 ~]# systemctl  start mysql@bootstrap.service  
[root@pxc71 ~]# ls /var/lib/mysql
auto.cnf         gvwstate.dat    mysqld_safe.pid     pxc71-bin.000002
ca-key.pem       ib_buffer_pool  mysql.sock          pxc71-bin.index
ca.pem           ibdata1         mysql.sock.lock     server-cert.pem
client-cert.pem  ib_logfile0     performance_schema  server-key.pem
client-key.pem   ib_logfile1     private_key.pem     sys
galera.cache     ibtmp1          public_key.pem      xb_doublewrite
grastate.dat     mysql           pxc71-bin.000001
[root@pxc71 ~]# 
[root@pxc71 ~]# netstat  -utnlp  | grep  3306
tcp6       0      0 :::3306                 :::*                    LISTEN      92243/mysqld        
[root@pxc71 ~]# 
[root@pxc71 ~]# netstat  -utnlp  | grep  4567
tcp        0      0 0.0.0.0:4567            0.0.0.0:*               LISTEN      92243/mysqld        
[root@pxc71 ~]# 
[root@pxc71 ~]# grep password /var/log/mysqld.log 
2020-09-25T10:46:42.517924Z 1 [Note] A temporary password is generated for root@localhost: JhLOS.S.w3jp
[root@pxc71 ~]# 
[root@pxc71 ~]# mysql -uroot -p'JhLOS.S.w3jp'
mysql> alter  user  root@"localhost" ientified by "123456";
mysql> grant all on *.* to sstuser@"localhost" identified by "123qqq...A";
mysql> exit
Bye
[root@pxc71 ~]# mysql -uroot -p123456
						 
						 
						 4   另外2台主机，执行启动mysql服务的命令
[root@pxc72 ~]# ls /var/lib/mysql
[root@pxc72 ~]# 
[root@pxc72 ~]# systemctl  start mysql
[root@pxc72 ~]# netstat  -utnlp  | grep  3306
tcp6       0      0 :::3306                 :::*                    LISTEN      100602/mysqld       
[root@pxc72 ~]# netstat  -utnlp  | grep  4567
tcp        0      0 0.0.0.0:4567            0.0.0.0:*               LISTEN      100602/mysqld       
[root@pxc72 ~]# 
[root@pxc72 ~]# ls /var/lib/mysql
[root@pxc72 ~]# mysql -uroot -p123456						 
mysql> show databases;
mysql> select user from mysql.user;
+---------------+
| user          |
+---------------+
| mysql.session |
| mysql.sys     |
| root          |
| sstuser       |
+---------------+
4 rows in set (0.00 sec)

[root@pxc73 ~]# ls /var/lib/mysql
[root@pxc73 ~]# 
[root@pxc73 ~]# systemctl  start mysql
[root@pxc73 ~]# netstat  -utnlp  | grep  3306
tcp6       0      0 :::3306                 :::*                    LISTEN      100602/mysqld       
[root@pxc73 ~]# netstat  -utnlp  | grep  4567
tcp        0      0 0.0.0.0:4567            0.0.0.0:*               LISTEN      100602/mysqld       
[root@pxc73 ~]# 
[root@pxc73 ~]# ls /var/lib/mysql
[root@pxc73 ~]# mysql -uroot -p123456						 
mysql> show databases;
mysql> select user from mysql.user;
+---------------+
| user          |
+---------------+
| mysql.session |
| mysql.sys     |
| root          |
| sstuser       |
+---------------+
4 rows in set (0.00 sec)


5   分别在3台主机，本机管理员登陆查看集群状态
						 ]# mysql -uroot -p123456
mysql> show status like "%wsrep%";
wsrep_connected                        | ON						 
wsrep_cluster_status                   | Primary 						 
wsrep_incoming_addresses         | 192.168.4.73:3306,192.168.4.71:3306,192.168.4.72:3306						 

			1.3 测试集群
						  集群中的主机自动同步数据，实现数据一致
						  例如：在72主机添加客户连接集群使用的用户，另外2台主机，执行启动mysql服务的命令
						  也会同时添加相同的用户
[root@pxc73 ~]#mysql -uroot   -p123456			
mysql> grant all on gamedb.* to  admin@"%" identified by "123456";
						  
[root@pxc73 ~]# mysql -uroot -p123456 -e 'select user from mysql.user'
[root@pxc71 ~]# mysql -uroot -p123456 -e 'select user from mysql.user'
						  
						 1 客户端50 连接集群中的任意主机都可以存取数据
mysql -h192.168.4.73 -uadmin -p123456 -e 'create database gamedb'
mysql -h192.168.4.73 -uadmin -p123456 -e 
'create table gamedb.t1(id  int primary key  auto_increment , name char(10),age int)'

mysql -h192.168.4.73 -uadmin -p123456 -e 
'insert into gamedb.t1(name,age)values("bob",19),("tom",20)'

mysql -h192.168.4.73 -uadmin -p123456 -e 'select * from gamedb.t1'

]# mysql -h192.168.4.71 -uadmin -p123456 
-e 'insert into gamedb.t1(name,age)values("bobA",19),("tomA",20)'

]# mysql -h192.168.4.72 -uadmin -p123456 -e 
'select * from gamedb.t1'

						 2  测试高可用:停止任意1台服务器的mysql服务，
						 都不影响另外2台的访问
[root@pxc71 ~]# systemctl  stop mysql@bootstrap.service						 
[root@localhost ~]# mysql -h192.168.4.72 -uadmin -p123456 
-e 'select * from gamedb.t1'

[root@localhost ~]# mysql -h192.168.4.73 -uadmin -p123456 
-e 'insert into gamedb.t1(name,age)values("jerry",19),("jerry3",20)'
								
						 3  测试宕机自动恢复
						     启动71 主机的数据库服务，并查看数据和集群状态
systemctl  start mysql

mysql -uroot -p123456 -e 'select * from gamedb.t1'
mysql -uroot -p123456 -e 'show status like "%wsrep%"'



	二 、mysql存储引擎（偏理论）
	         2.1 存储引擎介绍（什么是存储引擎）
					是mysql服务的功能组件之一，每种存储引擎有各自的功能和
					数据存储方式。是表的处理器。
			 
			 2.2 mysql体系结构（mysql服务的功能组件）
					1 连接池  当数据库服务器接收客户端的连接请求后，连接池程序要
					检查数据库服务有没有空闲mysql程序响应连接，以及检查连接的用户
					与密码 和 服务器的硬件资源
					
					2 管理工具   安装mysql服务软件后提供的命令
					3  SQL接口   把 执行的sql命令 传递给 本机的mysql服务
					
					4  分析器： 检查命令的格式 和执行命令的访问权限 
					
					5 优化器： 执行SQL命令之前，做优化处理 
					
					6 查询缓存 ：使用内存存储客户端曾经查找过的数据
					
					7 存储引擎 ： 对表的数据做不同处理的程序
					
					8 文件系统（硬盘 /var/lib/mysql/） 
			  
			 对mysql服务上的数据做访问时，无非  select   insert 
			 			 2.3 mysql服务处理查询请求的工作过程
			 client -----> mysql server ------>查询缓存 
							<-------------------------
			                          select 
							
							当客户端查找的数据在查询缓存里没有时，MySQL
							服务会访问数据库目录下表查找数据，把找到的数据
							先保存到查询缓存里，再把查询结果返回给客户端
							
			查看数据库服务的查询缓存是否启用？
mysql> show variables like "%cache%";			
 mysql> show variables like "query_cache_type";
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| query_cache_type | OFF   |
+------------------+-------+
1 row in set (0.00 sec)

mysql> 
           			
			 
			 2.4 存储引擎使用
					      查看数据库服务默认使用的存储引擎
						  show  engines ;
						  
						  修改数据库服务默认使用的存储引擎
[root@dbsvr1 ~]# vim  /etc/my.cnf
[mysqld]

default-storage-engine="myisam"

[root@dbsvr1 ~]# systemctl  restart  mysqld

mysql -uroot -p密码 
show  engines；
create table   db3.t21(name char(10));
show  create table   db3.t21 \G



					
						  查看数据库服务器已有表使用的存储引擎
						  
						  show  create  table  库.表  \G
						  show  create table   db3.t21 \G
						  
						  ；
						  建表是指定表使用的存储引擎
mysql> create table db3.t22(name char(10))engine=MEMORY;
         
		                  修改表使用的存储引擎
						   alter  table   库.表 engine=存储引擎
mysql> alter table  db3.t22 engine=myisam;
						  
						   休息到 16:10 上课 
			2.5 常用存储引擎特点介绍
				 2.5.1  myisam存储引擎特点
							 支持表级锁
							 不支持 事务  和 事务回滚
						     使用3个文件存储表数据
							 表名.frm    表结构           desc  表名;
							 表名.MYD    数据             select 
							 表名.MYI    index             show index 
				 2.5.2  innodb 存储引擎特点
							 支持行 级锁
							 支持 事务  和 事务回滚  外键
						     使用2 个文件存储表数据
							 表名.frm    表结构           desc  表名;
							 表名.ibd    数据+index     select  * from 表名;
							                                        show  index from  表名；
																	
							 
				 2.5.3 专业术语
							表级锁   把被访问的表，整张表加锁（即使访问的是表中的某1行
							也会把整张表锁上 ）
							
							行级锁   只把表中被访问的行，分别加锁，没有被访问的行
									     不加锁
							
							加锁的目的是什么？ 避免并发访问的冲突问题
							例如：
						pc1    update  db3.t1  set  name="bob" where  id =1; 
						pc2    update  db3.t1  set  name="tom" where  id =1;
						
							
							什么事务？ 连接服务器后 执行sql命令 断开连接
							
							什么是事务回滚？ 执行的sql命令没有正确完成的时候，
							可以恢复到错误操作之前的状态。
							
							
							mysql 服务会使用事务日志文件，记录对所有innodb
							存储引擎的表的操作。所有可以回滚所有的操作。
							事务日志文件  cd /var/lib/mysql/	
							ibdata1
							ib_logfile1
							ib_logfile0
							
							锁类型：
							     读锁： 对表的数据执行select 访问 加读锁，
											读锁又称共享锁，在上锁期间，再来的访问
											是select 允许访问，
											如果是 insert   delete  update 不可以。
											
							     写锁    对表的数据执行 insert   delete  update访问 
								            加写 锁，在上锁期间，再来的读和写访问都不可以
											
mysql> show  status like  "table_locks_waited";
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| Table_locks_waited | 0     |
+--------------------+-------+
1 row in set (0.00 sec)

mysql> 		
							事务特性（支持事务的表的特点）
							        A   原子性
									C   一致性
									I    隔离性
									D   持久性
									
mysql> show variables  like "autocommit"; 		//查看提交状态
mysql> set autocommit=off;  			  //关闭自动提交
mysql> rollback; 				//数据回滚
mysql> commit;   				//提交数据


思考？
			      2.6 建表时如果决定表使用哪种存储引擎？
	 
	 接收查询访问多的表，适合使用myisam存储引擎 ，节省硬件资源
	 
				   
	 接收写insert /delete /update 访问多的表 ，适合使用inodb存储引擎,
	 并发访问大 
						行级表  只给被访问的行分别加锁 ， 
						不加锁的行是允许其他用户做些操作
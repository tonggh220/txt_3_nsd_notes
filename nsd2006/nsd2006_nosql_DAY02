NoSQL _day02---搭建redis高可用集群
			
			使用1台redis服务存储数据 有什么不足的地方？
			单点故障   处理客户端速度问题    数据备份问题   存储空间
            
			redis可用集群：实现数据的分布式存储，解决服务的单点故障问题
			并能自动完成数据的备份
			
		
			
							   
								
			创建集群，步骤如下：
					1 、配置管理主机192.168.4.57
					             作用对集群做管理（管理6台数据库服务器）
						   
						   1.1 准备脚本的运行环境
						           ]# yum  -y  install  ruby   rubygems 
						   		   ]#gem  isntall    redis-3.2.1.gem
									
						   1.2 创建管理集群的ruby脚本
						   ]# tar -zxvf  redis-4.0.8.tar.gz
						   ]# cd  redis-4.0.8
						   ]# echo  $PATH
						   ]# mkdir /root/bin/
						   ]# cp src/redis-trib.rb /root/bin/
						   ]# chmod +x /root/bin/
						   ]# redis-trib.rb help
						                                          时间10 分钟到  09：48 
					2 、创建集群
						   2.1  准备做集群的6台redis服务器，要求如下
								安装Redis软件，并做初始化配置
							    修改 6台服务使用的ip地址和端口,不需要设置连接密码
							    不要向内存里存储数据
							    启用集群功能
								所有主机firewalld 关闭 
								
							2.2 在管理主机把6台服务创建成集群 57
[root@host57 ~]# systemctl  stop firewalld
[root@host57 ~]# 
[root@host57 ~]# redis-trib.rb    create --replicas 1  
192.168.4.51:6351 192.168.4.52:6352 192.168.4.53:6353 
192.168.4.54:6354 192.168.4.55:6355 192.168.4.56:6356

>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: e5938a5ac0e4ae6d8a5021a851b5d2a86c66049f 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: 061cf09e1047cc879549567cf19a7a0d38dcf42d 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 518e3bde12b5b168de89f129ea8cd29a58b98c0b 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: 879ad247935481fb31e0860b288f17903ba67abf 192.168.4.54:6354
   replicates 518e3bde12b5b168de89f129ea8cd29a58b98c0b
S: 926128f6be16fa318c2229c28e0c9d56fbe27656 192.168.4.55:6355
   replicates e5938a5ac0e4ae6d8a5021a851b5d2a86c66049f
S: 472850cc708ddb35d546ac742d45fd04d09c1de4 192.168.4.56:6356
   replicates 061cf09e1047cc879549567cf19a7a0d38dcf42d
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: e5938a5ac0e4ae6d8a5021a851b5d2a86c66049f 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 879ad247935481fb31e0860b288f17903ba67abf 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 518e3bde12b5b168de89f129ea8cd29a58b98c0b
M: 061cf09e1047cc879549567cf19a7a0d38dcf42d 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: 926128f6be16fa318c2229c28e0c9d56fbe27656 192.168.4.55:6355
   slots: (0 slots) slave
   replicates e5938a5ac0e4ae6d8a5021a851b5d2a86c66049f
S: 472850cc708ddb35d546ac742d45fd04d09c1de4 192.168.4.56:6356
   slots: (0 slots) slave
   replicates 061cf09e1047cc879549567cf19a7a0d38dcf42d
M: 518e3bde12b5b168de89f129ea8cd29a58b98c0b 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@host57 ~]# 
							
								
				    3、查看集群信息
[root@host57 ~]# redis-trib.rb  info 192.168.4.52:6352
192.168.4.52:6352 (061cf09e...) -> 0 keys | 5462 slots | 1 slaves.
192.168.4.53:6353 (518e3bde...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.51:6351 (e5938a5a...) -> 0 keys | 5461 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
					
[root@host57 ~]# redis-trib.rb  check 192.168.4.52:6352
					
				    在数据库本机查看集群信息
[root@host52 ~]# redis-cli -h 192.168.4.52 -p 6352	
192.168.4.52:6352> cluster info
				
cluster_state:ok
cluster_size:3	
cluster_known_nodes:6

192.168.4.52:6352> cluster nodes
192.168.4.52:6352> exit 

[root@host52 ~]# cat /var/lib/redis/6379/nodes-6379.conf	

	
统一的排错方法：
        停止6台主机的redis服务
        rm  -rf /var/lib/redis/6379/*
        启动 6台主机的redis服务
        在 管理主机执行创建集群的命令	

 休息+排错 到  10：42 

 	
					4、 客户端连接集群中的主机存取数据
[root@host50 ~]# redis-cli -c -h 192.168.4.55 -p 6355
192.168.4.55:6355> set name tarena
-> Redirected to slot [5798] located at 192.168.4.52:6352
OK
192.168.4.52:6352> set age 18
-> Redirected to slot [741] located at 192.168.4.51:6351
OK
192.168.4.51:6351> set class nsd2006
-> Redirected to slot [7755] located at 192.168.4.52:6352
OK
192.168.4.52:6352> keys *
1) "name"
2) "class"
192.168.4.52:6352> get age
-> Redirected to slot [741] located at 192.168.4.51:6351
"18"
192.168.4.51:6351> exit
[root@host50 ~]# 
					
					5、测试集群的高可用功能 、数据自动备份功能
					      slave 服务器会自动同步主服务器的数据
				[root@host57 ~]# redis-trib.rb  check 192.168.4.53:6353		  
[root@host50 ~]# redis-cli -c -h 192.168.4.56 -p 6356
192.168.4.56:6356> keys *
1) "class"
2) "name"
192.168.4.56:6356> 		
  
						  master 服务器宕机后，对应的slave 服务器会自动升级为master
						  并接手占用的hash槽
[root@host57 ~]# redis-trib.rb  info 192.168.4.53:6353
						  
[root@host52 ~]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.52:16352      0.0.0.0:*               LISTEN      8456/redis-server 1 
tcp        0      0 192.168.4.52:6352       0.0.0.0:*               LISTEN      8456/redis-server 1 
[root@host52 ~]# \
> 
[root@host52 ~]# redis-cli -h 192.168.4.52 -p 6352 shutdown
[root@host52 ~]# netstat  -utnlp  | grep redis-server
[root@host52 ~]# 						  
						  
[root@host57 ~]# redis-trib.rb  info 192.168.4.53:6353
192.168.4.53:6353 (518e3bde...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.51:6351 (e5938a5a...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (061cf09e...) -> 2 keys | 5462 slots | 1 slaves.
[OK] 4 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
[root@host57 ~]# 
[root@host57 ~]# redis-trib.rb  info 192.168.4.53:6353
192.168.4.53:6353 (518e3bde...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.51:6351 (e5938a5a...) -> 1 keys | 5461 slots | 1 slaves.
192.168.4.56:6356 (472850cc...) -> 2 keys | 5462 slots | 0 slaves.
[OK] 4 keys in 3 masters.
0.00 keys per slot on average.
[root@host57 ~]# 
						  
				6、集群的工作过程（如何实现数据分布式存储的）

 变量名   和   crc16  计算    数字    % 16384    = 余数    
 根据余数 所在主数据库服务器占用槽的范围存储数据
                                  
			14：00  上课 
			
			管理集群：		
					1  向集群里添加新的redis服务器
					    考虑：什么情况下需要向集群里添加新的Redis服务器？
									1  内存空间不足
									2  访问了增量
									
						1.1  添加master 角色的数据库服务器，步骤如下：	
						            1  运行redis服务并启用了集群配置 192.168.4.58
									     IP   192.168.4.58  
										 port  6358
									
					
				     				2  在管理主机添加新服务器到集群里
[root@host57 ~]# redis-trib.rb add-node 192.168.4.58:6358 
192.168.4.53:6353	

[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353
						
									3   分配hash slots 给 新的主数据库服务器
[root@host57 ~]# redis-trib.rb reshard 192.168.4.53:6353	
1  移出hash槽个数             4096
2  接收hash槽主机ID         58 主机的ID
3  移出hash槽主机ID          all 
4  同意配置                         yes 
									
	[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353		
 
 
 [root@host57 ~]# redis-trib.rb check  192.168.4.53:6353	
 M: 68dfc7c05f75f16d6b47fd85483076a80ea96b92 192.168.4.58:6358
   slots:0-1364,5461-6826,10923-12287 (4096 slots) master
   0 additional replica(s)
11786
 
									4   访问新添加主数据库服务器存取数据
[root@host50 ~]# redis-cli -c -h 192.168.4.58 -p 6358									
192.168.4.58:6358> keys *
1) "y"
2) "age"
3) "name"
4) "x2"
5) "v1"
192.168.4.58:6358> set a1 alices
-> Redirected to slot [7785] located at 192.168.4.56:6356
OK
192.168.4.56:6356> set a2 alices
-> Redirected to slot [11786] located at 192.168.4.58:6358
OK
192.168.4.58:6358>									
									
									
						1.2  添加slave 角色的数据库服务器
						            1  准备新的虚拟机192.168.4.59 
						            2 在59运行redis 服务并启用集群配置
								   
								    3 在管理主机把59 添加到集群里，做slave 服务器
[root@host57 ~]# redis-trib.rb add-node --slave 192.168.4.59:6359 
192.168.4.53:6353	
								
[root@host57 ~]# redis-trib.rb info 192.168.4.53:6353
						        
									 4 客户端连59 查看数据
[root@host50 ~]# redis-cli -c -h 192.168.4.59 -p 6359
192.168.4.59:6359> keys *

					2  把redis服务器移除集群		
						考虑：什么情况下把Redis服务器移除集群	
						
						     					 
								 
						         2.1  移除slave 角色的数据库服务器	
										因为slave服务器不占用hash槽 可以直接移除
										在管理主机执行移除的命令
									     查看备移除主机的ID 
[root@host57 ~]# redis-trib.rb check  192.168.4.53:6353									

[root@host57 ~]# redis-trib.rb del-node 192.168.4.58:6358 
879ad247935481fb31e0860b288f17903ba67abf										

[root@host57 ~]# redis-trib.rb info   192.168.4.53:6353	

									    2.2  移除master 角色的数据库服务器
										        要先释放  hash槽 才可以 移除	
												删除主服务器56
]# redis-trib.rb reshard 192.168.4.53:6353
    1 释放hash 槽 的个数  
	2  接收hash 槽 主机的	ID 
	3  释放hash 槽 主机的ID 
	4  done   结束ID 的输入
	5  yes   统一配置 
	
 ]# redis-trib.rb info 192.168.4.53:6353
 
 ]# redis-trib.rb del-node 192.168.4.58:6358 
 472850cc708ddb35d546ac742d45fd04d09c1de4
												
							平均分配主服务器占用的hash槽
[root@host57 ~]# redis-trib.rb rebalance  192.168.4.53:6353

						
							宕机的服务器，启动后，运行redis服务，会自动加入集群
							并同步宕机期间的数据
							
							
							3  把 移除数据库服务器再添加到集群里
									 被手动移除的主机，服务启动后，不自动加入集群
									 需要手动加入集群
									 
									 启动服务后，连接服务执行
									 >  cluester   reset   #清除集群信息
									 > exit 
									 
									  在管理主机执行添加主机到集群的命令
									   如果添加的是master 角色的服务器 要重新分配hash槽
									   如果添加的是slave角色的服务器 就不需要分配hash槽


	把集群中的主机 恢复为独立的数据库服务器？
	     
[root@host51 ~]# redis-cli -h 192.168.4.51 -p 6351 shutdown
[root@host51 ~]# rm -rf /var/lib/redis/6379/*									  
[root@host51 ~]# sed -i '815s/^/#/' /etc/redis/6379.conf 
[root@host51 ~]# sed -i '823s/^/#/' /etc/redis/6379.conf 
[root@host51 ~]# sed -i '829s/^/#/' /etc/redis/6379.conf 

[root@host51 ~]# sed -n '829p;823p;815p' /etc/redis/6379.conf 
#cluster-enabled yes
#cluster-config-file nodes-6379.conf
#cluster-node-timeout 5000
[root@host51 ~]# 									 

[root@host51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@host51 ~]# netstat  -utnlp  | grep redis-server
tcp        0      0 192.168.4.51:6351       0.0.0.0:*               LISTEN      31796/redis-server  
[root@host51 ~]# 									 
			
[root@host51 ~]# redis-cli -h 192.168.4.51 -p 6351 
192.168.4.51:6351> info replication    查看主机角色
# Replication
role:master   默认都是主数据库服务器 
192.168.4.51:6351> keys *
(empty list or set)
192.168.4.51:6351> 
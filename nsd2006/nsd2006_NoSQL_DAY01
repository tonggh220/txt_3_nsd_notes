一  部署Redis服务
		1.1 相关的概念 （具体 见PPT）
			RDBMS  关系型数据库管理系统  （mysql ）
			NoSQL   非关系型数据库管理系统 (Redis) 
			Redis 介绍
		1.2 搭建redis服务器  192.168.4.50 
					1 安装软件   
]# rpm -q gcc || yum -y install gcc
]#tar -zxvf /var/ftp/pub/redis-4.0.8.tar.gz 
]# cd redis-4.0.8/
]#make && make install
					
					2  初始化配置
redis-4.0.8]# ./utils/install_server.sh 	（使用默认配置 回车即可）
				
		3 修改配置文件（让服务按照默认配置运行，文件可以不修改）
			        4  查看服务状态 （初始化成功，会自动 启动服务 ）
					]# netstat  -utnlp  | grep 6379
					或
					]# ss  -utnlp  | grep 6379
[root@host50 redis-4.0.8]# ps  -C redis-server  # 查看进程
   PID TTY          TIME CMD
 61158 ?        00:00:00 redis-server
			
					5  连接服务存取数据
					    连接本机的redis服务 
[root@host50 redis-4.0.8]# redis-cli 
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> set scholl tarena
OK
127.0.0.1:6379> keys *
1) "scholl"
127.0.0.1:6379> get scholl
"tarena"
127.0.0.1:6379> exit
[root@host50 redis-4.0.8]#		

						人为的停止和启动redis 服务
[root@host50 ~]# /etc/init.d/redis_6379 stop  停止服务
[root@host50 ~]# /etc/init.d/redis_6379 start 启动服务 

[root@host50 ~]# redis-cli 
127.0.0.1:6379> keys *
1) "scholl"
127.0.0.1:6379> exit
[root@host50 ~]# 

[root@host50 ~]# ls /var/lib/redis/6379/
dump.rdb 
[root@host50 ~]#

			相关命令？
127.0.0.1:6379> mset  x  7  y 9  z 11 
127.0.0.1:6379> mget  x  y  z	
		
127.0.0.1:6379> keys  sex
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys  name
1) "name"
127.0.0.1:6379> keys  *
1) "name"
2) "x"
3) "y"
4) "z"
5) "scholl"
127.0.0.1:6379> keys  ?
1) "x"
2) "y"
3) "z"
127.0.0.1:6379> keys  ????
1) "name"
127.0.0.1:6379> keys  a??
(empty list or set)
127.0.0.1:6379> 
				
127.0.0.1:6379> set i 88
OK
127.0.0.1:6379> type i
string
127.0.0.1:6379> lpush tea plj
(integer) 1
127.0.0.1:6379>
127.0.0.1:6379> type tea
list
127.0.0.1:6379>

127.0.0.1:6379> EXISTS age
(integer) 0
127.0.0.1:6379> EXISTS name
(integer) 1
127.0.0.1:6379> get name
"tom"
127.0.0.1:6379> set name jerry
OK
127.0.0.1:6379> get name
"jerry"
127.0.0.1:6379> 				


127.0.0.1:6379> ttl  x
(integer) -1
127.0.0.1:6379> EXPIRE x 20
(integer) 1
127.0.0.1:6379> ttl x
(integer) 12
127.0.0.1:6379> keys *
1) "name"
2) "x"
3) "tea"
4) "y"
5) "z"
6) "i"
7) "scholl"
127.0.0.1:6379> ttl x
(integer) -2
127.0.0.1:6379> keys *
1) "name"
2) "tea"
3) "y"
4) "z"
5) "i"
6) "scholl"
	

127.0.0.1:6379[2]> select 0
OK
127.0.0.1:6379> keys *
1) "name"
2) "tea"
3) "y"
4) "z"
5) "i"
6) "scholl"
127.0.0.1:6379> move name 2
(integer) 1
127.0.0.1:6379> select 2
OK
127.0.0.1:6379[2]> keys *
1) "name"
127.0.0.1:6379[2]>
127.0.0.1:6379[2]> select 0
OK
127.0.0.1:6379> keys *
1) "tea"
2) "y"
3) "z"
4) "i"
5) "scholl"
127.0.0.1:6379> del tea
(integer) 1
127.0.0.1:6379> keys *
1) "y"
2) "z"
3) "i"
4) "scholl"
127.0.0.1:6379> del  y   z    i
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> flushall
OK
127.0.0.1:6379> 
127.0.0.1:6379> set i 99
OK
127.0.0.1:6379> keys *
1) "i"
127.0.0.1:6379> save
OK
127.0.0.1:6379> shutdown
not connected> exit
[root@host50 ~]# 

[root@host50 ~]# 
[root@host50 ~]# redis-cli 
Could not connect to Redis at 127.0.0.1:6379: Connection refused
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected> exit
[root@host50 ~]# 
[root@host50 ~]# /etc/init.d/redis_6379 start
Starting Redis server...

[root@host50 ~]# redis-cli 
127.0.0.1:6379>


				配置文件解析（/etc/redis/6379.conf  常用配置说明）
				改变redis服务的运行配置，修改配置文件后要重启redis服务
				才能生效。
				
		守护进程 （服务启动后无论是否有客户端访问，进程都在内存里运行）
		常驻部队（无论是否有敌军进范 部队都驻守在边疆）
		
		非 守护进程    （服务启动后没有时客户端访问，进程就休眠） 
		机动部队（发现敌军进犯时 ，才到达边疆抵抗 ）
		
内存清除策略：当向redis服务存储数据时，如果内存空间不足，
删除内存里已有数据的方式，就是内存清除策略。

LRU   最近最少使用
volatile-lru 	//最近最少使用 （针对设置了TTL的key）
allkeys-lru   	//删除最少使用的key(针对所有的key)



LFU   最少使用
allkeys-lfu	//从所有key中清除使用频率最少的key
volatile-lfu  	//从所有配置了过期时间的key中清除使用频率最少的key



RANDOM    随机删除
volatile-random   	//在设置了TTL的key里随机移除
allkeys-random    	//随机移除key

TTL   生存时间  移除最近过期的key

noeviction  不删除    存不下时也不删除内存里已经存储的数据 
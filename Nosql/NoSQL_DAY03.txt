+++++++NoSQL_day03
主从复制
	默认Redis服务运行后，是master服务器

	查看复制信息 > info   replication

	命令行配置： 马上生效 ， 但重启服务后还原
	> slaveof  192.168.4.51   6351

	永久配置： vim /etc/redis/6379.conf
	282   slaveof   masterip地址  master端口号


	命令行恢复为独立的数据库服务器
	> slaveof  no  one
			
	配置带验证的主从复制   练习6分钟 到 15:27 
		主服务器设置连接密码
		]# vim +501 /etc/redis/6379.conf
			requirepass 123456
		:wq
[root@mysql51 ~]# redis-cli  -h 192.168.4.51 -p 6351 shutdown
[root@mysql51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@mysql51 ~]# 
[root@mysql51 ~]# redis-cli  -h 192.168.4.51 -p 6351  -a 123456

		从服务器指定主服务器的连接密码

[root@mysql52 ~]# redis-cli  -h 192.168.4.52 -p 6352  shutdown
[root@mysql52 ~]# vim /etc/redis/6379.conf 
		masterauth 123456
:wq
[root@mysql52 ~]# redis-cli  -h 192.168.4.52 -p 6352
192.168.4.52:6352> info replication


		配置一主多从结构 （把主机53 也配置为 51的从服务器）
		vim /etc/redis/6379.conf
		slaveof  192.168.4.51  6351
		masterauth  123456
		:wq
				
		]# redis-cli  -h 192.168.4.53 -p 6353 shutdown
		]# /etc/init.d/redis_6379 start
		]# redis-cli  -h 192.168.4.53 -p 6353

		或
		> config set  requirepass  123456  给自己设置连接
		> auth  123456  输入连接密码
		> slaveof  192.168.4.51 6351   命令行指定主服务器
		> config set  masterauth  123456  命令行指定主服务器密码
		> config rewrite   把命令行的配置保存到配置文件里
		> info replication  查看复制信息

		配置主从从结构  把主机54 配置为 53的从服务器  时间5分钟 到 16:17 
[root@mysql54 ~]# redis-cli  -h 192.168.4.54 -p 6354 
192.168.4.54:6354> slaveof 192.168.4.53 6353
OK
192.168.4.54:6354> config set masterauth 123456
OK
192.168.4.54:6354> config rewrite
OK
192.168.4.54:6354> info replication

		主从复制工作过程？

	哨兵服务：监视主服务的服务状态，当发现主服务器无法连接时 自动将对应的从提升为主服务器

		 1 配置主52 从53  从54 结构
		 2 配置哨兵服务器56        练习+休息到 17:20 
			2.1  安装源码redis软件
			 ]# tar  -zxvf  redis-4.0.8.tar.gz
			 ]# yum  -y install gcc
			 ]# cd redis-4.0.8
			 ]# make  && make install
			2.2  编辑哨兵服务的主配置文件
			vim  /etc/sentinel.conf
bind  0.0.0.0
port  26379
sentinel monitor   redisserver    192.168.4.51  6351    1
sentinel auth-pass    redisserver    123456
:wq


			2.3 启动哨兵服务
[root@host56 ~]# redis-sentinel  /etc/sentinel.conf    （启动信息会输出在屏幕上）

			2.4 验证配置
				把主服务器51的redis服务停止
				查看56主机的监控信息
				在53主机查看角色



二、数据持久化: redis服务在运行过程中，定期把内存里的数据写进硬盘 ，存储在数据库目录下的.rdb结尾的文件里.
	2.1  RDB（ 默认的持久化方式） 指定的就是 dump.rdb 文件
 		RDB介绍
		使用备份的rdb问恢复数据
192.168.4.50:6360> keys *
1) "site"
192.168.4.50:6360> mset x 1 y 2 z 3 f 4
OK
192.168.4.50:6360> keys *
1) "f"
2) "x"
3) "z"
4) "site"
5) "y"
192.168.4.50:6360> save
OK
192.168.4.50:6360> exit
[root@mysql50 ~]# ls /var/lib/redis/6379/
dump.rdb


[root@mysql51 ~]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456 shutdown
[root@mysql51 ~]# 
[root@mysql51 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@mysql51 ~]# 
[root@mysql51 ~]# 
[root@mysql51 ~]# rm  -rf /var/lib/redis/6379/dump.rdb 
[root@mysql51 ~]# 
[root@mysql51 ~]# vim /etc/redis/6379.conf   （注释从服务器的配置）

[root@mysql50 ~]# scp /var/lib/redis/6379/dump.rdb  root@192.168.4.51:/var/lib/redis/6379/

[root@mysql51 ~]# ls /var/lib/redis/6379/
dump.rdb
[root@mysql51 ~]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@mysql51 ~]# 
[root@mysql51 ~]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456 
192.168.4.51:6351> keys *
1) "y"
2) "site"
3) "f"
4) "z"
5) "x"
192.168.4.51:6351> 


	2.2  AOF 

				

三 数据类型：
	数据类型： 字符 、 列表  、 hash表 、 集合 、 有序集合
		     *           *              *
	字符类型管理命令： set   setrange    strlen   decr    decrby   get   getrange  mget  incr 
			incrby    incrbyfloat    setbit  bitcount  mget  mset



	setbit  位存储   
	setbit  变量命令   第几位   值

	setbit   name      3           0
   

	bitcount 统计变量值  里  1的个数

1G=1024M
1M=1024K
1K=1024bytes
1bytes=8位
1bit=1或0

		setbit  taobaoplj    1   1
		setbit  taobaoplj    2   0
	           
		bitcount  taobaoplj


	列表类型管理命令(  一个变量可以存储多个值)
		Redis的list是一个字符队列
		先进后出
		一个key可以有多个值

		lpush   lrange   lpop   lindex  lset  rpush  rpop 
             
	Hash表:  变量可以存储多列，每列都有对应的值
		是一个string类型的field和value的映射表
		一个key可对应多个field，一个field对应一个value
                                将一个对象存储为hash类型，较于每个字段都存储成string类型更能节省内存
		hset   hmset  hget  hmget  hkeys  hvals  hgetall  hdel 

		练习 +  订餐 + 修改  11:20


		
		












